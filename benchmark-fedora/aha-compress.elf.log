
Temporary breakpoint 1, start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102d0 <start_trigger+16>:	sd	ra,8(sp)
0x00000000000102d4	37	}
=> 0x102d4 <start_trigger+20>:	sd	s0,0(sp)
0x00000000000102d8	37	}
=> 0x102d8 <start_trigger+24>:	addi	s0,sp,16
0x00000000000102dc	37	}
=> 0x102dc <start_trigger+28>:	ld	s0,0(sp)
0x00000000000102e0 in start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102e0 <start_trigger+32>:	ld	ra,8(sp)
0x00000000000102e4	37	}
=> 0x102e4 <start_trigger+36>:	addi	sp,sp,16
0x00000000000102e8	37	}
=> 0x102e8 <start_trigger+40>:	ld	ra,0(t6)
0x00000000000102ec	37	}
=> 0x102ec <start_trigger+44>:	addi	t6,t6,16
0x00000000000102f0	37	}
=> 0x102f0 <start_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb68) at main.c:54
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1021c <main+144>:	ld	a0,-88(s0)
0x0000000000010220	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10220 <main+148>:	sw	a0,-36(s0)
0x0000000000010224	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10224 <main+152>:	j	0x10228 <main+156>
0x0000000000010228	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10228 <main+156>:	lw	a0,-36(s0)
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+160>:	li	a1,0
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+164>:	blt	a1,a0,0x1025c <main+208>
0x0000000000010234	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10234 <main+168>:	j	0x10238 <main+172>
56	      initialise_benchmark ();
=> 0x10238 <main+172>:	jal	ra,0x10864 <initialise_benchmark>
initialise_benchmark () at compress_test.c:156
156	{
=> 0x10864 <initialise_benchmark>:	addi	t6,t6,-16
0x0000000000010868	156	{
=> 0x10868 <initialise_benchmark+4>:	sd	ra,0(t6)
0x000000000001086c	156	{
=> 0x1086c <initialise_benchmark+8>:	st	zero,0(t6)
0x0000000000010870	156	{
=> 0x10870 <initialise_benchmark+12>:	addi	sp,sp,-16
157	}
=> 0x10874 <initialise_benchmark+16>:	sd	ra,8(sp)
0x0000000000010878	157	}
=> 0x10878 <initialise_benchmark+20>:	sd	s0,0(sp)
0x000000000001087c	157	}
=> 0x1087c <initialise_benchmark+24>:	addi	s0,sp,16
0x0000000000010880	157	}
=> 0x10880 <initialise_benchmark+28>:	ld	s0,0(sp)
0x0000000000010884 in initialise_benchmark () at compress_test.c:157
157	}
=> 0x10884 <initialise_benchmark+32>:	ld	ra,8(sp)
0x0000000000010888	157	}
=> 0x10888 <initialise_benchmark+36>:	addi	sp,sp,16
0x000000000001088c	157	}
=> 0x1088c <initialise_benchmark+40>:	ld	ra,0(t6)
0x0000000000010890	157	}
=> 0x10890 <initialise_benchmark+44>:	addi	t6,t6,16
0x0000000000010894	157	}
=> 0x10894 <initialise_benchmark+48>:	ret
main (argc=1, argv=0x3ffffffb68) at main.c:57
57	      result = benchmark ();
=> 0x1023c <main+176>:	sd	a0,-120(s0)
0x0000000000010240	57	      result = benchmark ();
=> 0x10240 <main+180>:	jal	ra,0x10898 <benchmark>
benchmark () at compress_test.c:162
162	{
=> 0x10898 <benchmark>:	addi	t6,t6,-16
0x000000000001089c	162	{
=> 0x1089c <benchmark+4>:	sd	ra,0(t6)
0x00000000000108a0	162	{
=> 0x108a0 <benchmark+8>:	st	zero,0(t6)
0x00000000000108a4	162	{
=> 0x108a4 <benchmark+12>:	addi	sp,sp,-96
0x00000000000108a8	162	{
=> 0x108a8 <benchmark+16>:	sd	ra,88(sp)
0x00000000000108ac	162	{
=> 0x108ac <benchmark+20>:	sd	s0,80(sp)
0x00000000000108b0	162	{
=> 0x108b0 <benchmark+24>:	addi	s0,sp,96
0x00000000000108b4	162	{
=> 0x108b4 <benchmark+28>:	li	a0,0
163	   int errors = 0,  n, i;
=> 0x108b8 <benchmark+32>:	sw	a0,-20(s0)
0x00000000000108bc	163	   int errors = 0,  n, i;
=> 0x108bc <benchmark+36>:	li	a1,54
166	   n = sizeof(test)/sizeof(test[0]);
=> 0x108c0 <benchmark+40>:	sw	a1,-24(s0)
168	   for (i = 0; i < n; i += 3) {
=> 0x108c4 <benchmark+44>:	sw	a0,-28(s0)
0x00000000000108c8	168	   for (i = 0; i < n; i += 3) {
=> 0x108c8 <benchmark+48>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x00000000000108d8	168	   for (i = 0; i < n; i += 3) {
=> 0x108d8 <benchmark+64>:	j	0x108dc <benchmark+68>
169	      r = compress1(test[i], test[i+1]);
=> 0x108dc <benchmark+68>:	lw	a0,-28(s0)
0x00000000000108e0	169	      r = compress1(test[i], test[i+1]);
=> 0x108e0 <benchmark+72>:	lui	a1,0x1d
0x00000000000108e4	169	      r = compress1(test[i], test[i+1]);
=> 0x108e4 <benchmark+76>:	addi	a1,a1,-280
0x00000000000108e8	169	      r = compress1(test[i], test[i+1]);
=> 0x108e8 <benchmark+80>:	slli	a2,a0,0x3
0x00000000000108ec	169	      r = compress1(test[i], test[i+1]);
=> 0x108ec <benchmark+84>:	add	a2,a2,a1
0x00000000000108f0	169	      r = compress1(test[i], test[i+1]);
=> 0x108f0 <benchmark+88>:	lw	a2,0(a2)
0x00000000000108f4	169	      r = compress1(test[i], test[i+1]);
=> 0x108f4 <benchmark+92>:	addiw	a0,a0,1
0x00000000000108f8	169	      r = compress1(test[i], test[i+1]);
=> 0x108f8 <benchmark+96>:	slli	a0,a0,0x3
0x00000000000108fc	169	      r = compress1(test[i], test[i+1]);
=> 0x108fc <benchmark+100>:	add	a0,a0,a1
0x0000000000010900	169	      r = compress1(test[i], test[i+1]);
=> 0x10900 <benchmark+104>:	lw	a0,0(a0)
0x0000000000010904	169	      r = compress1(test[i], test[i+1]);
=> 0x10904 <benchmark+108>:	sd	a0,-40(s0)
0x0000000000010908	169	      r = compress1(test[i], test[i+1]);
=> 0x10908 <benchmark+112>:	mv	a0,a2
0x000000000001090c	169	      r = compress1(test[i], test[i+1]);
=> 0x1090c <benchmark+116>:	ld	a2,-40(s0)
0x0000000000010910	169	      r = compress1(test[i], test[i+1]);
=> 0x10910 <benchmark+120>:	sd	a1,-48(s0)
0x0000000000010914	169	      r = compress1(test[i], test[i+1]);
=> 0x10914 <benchmark+124>:	mv	a1,a2
0x0000000000010918	169	      r = compress1(test[i], test[i+1]);
=> 0x10918 <benchmark+128>:	jal	ra,0x10328 <compress1>
compress1 (x=0, mask=54) at compress_test.c:35
35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10328 <compress1>:	addi	t6,t6,-16
0x000000000001032c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1032c <compress1+4>:	sd	ra,0(t6)
0x0000000000010330	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10330 <compress1+8>:	st	zero,0(t6)
0x0000000000010334	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10334 <compress1+12>:	addi	sp,sp,-32
0x0000000000010338	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10338 <compress1+16>:	sd	ra,24(sp)
0x000000000001033c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1033c <compress1+20>:	sd	s0,16(sp)
0x0000000000010340	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10340 <compress1+24>:	addi	s0,sp,32
0x0000000000010344	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10344 <compress1+28>:	mv	a2,a1
0x0000000000010348	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10348 <compress1+32>:	mv	a3,a0
0x000000000001034c	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x1034c <compress1+36>:	sw	a0,-20(s0)
0x0000000000010350	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10350 <compress1+40>:	sw	a1,-24(s0)
0x0000000000010354	35	unsigned compress1(unsigned x, unsigned mask) {
=> 0x10354 <compress1+44>:	li	a0,0
36	  unsigned result = 0, bit = 1;
=> 0x10358 <compress1+48>:	sw	a0,-28(s0)
0x000000000001035c	36	  unsigned result = 0, bit = 1;
=> 0x1035c <compress1+52>:	li	a0,1
0x0000000000010360	36	  unsigned result = 0, bit = 1;
=> 0x10360 <compress1+56>:	sw	a0,-32(s0)
37	  while (mask != 0) {
=> 0x10364 <compress1+60>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
0x0000000000010374	37	  while (mask != 0) {
=> 0x10374 <compress1+76>:	j	0x10378 <compress1+80>
38	    if ((mask & 1) != 0) {
=> 0x10378 <compress1+80>:	lbu	a0,-24(s0)
0x000000000001037c	38	    if ((mask & 1) != 0) {
=> 0x1037c <compress1+84>:	andi	a0,a0,1
0x0000000000010380	38	    if ((mask & 1) != 0) {
=> 0x10380 <compress1+88>:	li	a1,0
0x0000000000010384	38	    if ((mask & 1) != 0) {
=> 0x10384 <compress1+92>:	beq	a0,a1,0x103c4 <compress1+156>
0x0000000000010388	38	    if ((mask & 1) != 0) {
=> 0x10388 <compress1+96>:	j	0x1038c <compress1+100>
39	      if (x & 1) result |= bit;
=> 0x1038c <compress1+100>:	lbu	a0,-20(s0)
0x0000000000010390	39	      if (x & 1) result |= bit;
=> 0x10390 <compress1+104>:	andi	a0,a0,1
0x0000000000010394	39	      if (x & 1) result |= bit;
=> 0x10394 <compress1+108>:	li	a1,0
0x0000000000010398	39	      if (x & 1) result |= bit;
=> 0x10398 <compress1+112>:	beq	a0,a1,0x103b4 <compress1+140>
0x000000000001039c	39	      if (x & 1) result |= bit;
=> 0x1039c <compress1+116>:	j	0x103a0 <compress1+120>
0x00000000000103a0	39	      if (x & 1) result |= bit;
=> 0x103a0 <compress1+120>:	lw	a0,-32(s0)
0x00000000000103a4	39	      if (x & 1) result |= bit;
=> 0x103a4 <compress1+124>:	lw	a1,-28(s0)
0x00000000000103a8	39	      if (x & 1) result |= bit;
=> 0x103a8 <compress1+128>:	or	a0,a1,a0
0x00000000000103ac	39	      if (x & 1) result |= bit;
=> 0x103ac <compress1+132>:	sw	a0,-28(s0)
0x00000000000103b0	39	      if (x & 1) result |= bit;
=> 0x103b0 <compress1+136>:	j	0x103b4 <compress1+140>
40	      bit <<= 1;
=> 0x103b4 <compress1+140>:	lw	a0,-32(s0)
0x00000000000103b8	40	      bit <<= 1;
=> 0x103b8 <compress1+144>:	slli	a0,a0,0x1
0x00000000000103bc	40	      bit <<= 1;
=> 0x103bc <compress1+148>:	sw	a0,-32(s0)
41	    }
=> 0x103c0 <compress1+152>:	j	0x103c4 <compress1+156>
42	    mask >>= 1;
=> 0x103c4 <compress1+156>:	lwu	a0,-24(s0)
0x00000000000103c8	42	    mask >>= 1;
=> 0x103c8 <compress1+160>:	srli	a0,a0,0x1
0x00000000000103cc	42	    mask >>= 1;
=> 0x103cc <compress1+164>:	sw	a0,-24(s0)
43	    x >>= 1;
=> 0x103d0 <compress1+168>:	lwu	a0,-20(s0)
0x00000000000103d4	43	    x >>= 1;
=> 0x103d4 <compress1+172>:	srli	a0,a0,0x1
0x00000000000103d8	43	    x >>= 1;
=> 0x103d8 <compress1+176>:	sw	a0,-20(s0)
37	  while (mask != 0) {
=> 0x103dc <compress1+180>:	j	0x10368 <compress1+64>
0x0000000000010368	37	  while (mask != 0) {
=> 0x10368 <compress1+64>:	lw	a0,-24(s0)
0x000000000001036c	37	  while (mask != 0) {
=> 0x1036c <compress1+68>:	li	a1,0
0x0000000000010370	37	  while (mask != 0) {
=> 0x10370 <compress1+72>:	beq	a0,a1,0x103e0 <compress1+184>
45	  return result;
=> 0x103e0 <compress1+184>:	lw	a0,-28(s0)
0x00000000000103e4	45	  return result;
=> 0x103e4 <compress1+188>:	ld	s0,16(sp)
0x00000000000103e8 in compress1 (x=0, mask=54) at compress_test.c:45
45	  return result;
=> 0x103e8 <compress1+192>:	ld	ra,24(sp)
0x00000000000103ec	45	  return result;
=> 0x103ec <compress1+196>:	addi	sp,sp,32
0x00000000000103f0	45	  return result;
=> 0x103f0 <compress1+200>:	ld	ra,0(t6)
0x00000000000103f4	45	  return result;
=> 0x103f4 <compress1+204>:	addi	t6,t6,16
0x00000000000103f8	45	  return result;
=> 0x103f8 <compress1+208>:	ret
0x000000000001091c in benchmark () at compress_test.c:169
169	      r = compress1(test[i], test[i+1]);
=> 0x1091c <benchmark+132>:	sw	a0,-32(s0)
170	      if (r != test[i+2])
=> 0x10920 <benchmark+136>:	lwu	a0,-32(s0)
0x0000000000010924	170	      if (r != test[i+2])
=> 0x10924 <benchmark+140>:	lw	a1,-28(s0)
0x0000000000010928	170	      if (r != test[i+2])
=> 0x10928 <benchmark+144>:	addiw	a1,a1,2
0x000000000001092c	170	      if (r != test[i+2])
=> 0x1092c <benchmark+148>:	slli	a1,a1,0x3
0x0000000000010930	170	      if (r != test[i+2])
=> 0x10930 <benchmark+152>:	ld	a2,-48(s0)
0x0000000000010934	170	      if (r != test[i+2])
=> 0x10934 <benchmark+156>:	add	a1,a1,a2
0x0000000000010938	170	      if (r != test[i+2])
=> 0x10938 <benchmark+160>:	ld	a1,0(a1)
0x000000000001093c	170	      if (r != test[i+2])
=> 0x1093c <benchmark+164>:	beq	a0,a1,0x10950 <benchmark+184>
172	   }
=> 0x10950 <benchmark+184>:	j	0x10954 <benchmark+188>
168	   for (i = 0; i < n; i += 3) {
=> 0x10954 <benchmark+188>:	lw	a0,-28(s0)
0x0000000000010958	168	   for (i = 0; i < n; i += 3) {
=> 0x10958 <benchmark+192>:	addi	a0,a0,3
0x000000000001095c	168	   for (i = 0; i < n; i += 3) {
=> 0x1095c <benchmark+196>:	sw	a0,-28(s0)
0x0000000000010960	168	   for (i = 0; i < n; i += 3) {
=> 0x10960 <benchmark+200>:	j	0x108cc <benchmark+52>
0x00000000000108cc	168	   for (i = 0; i < n; i += 3) {
=> 0x108cc <benchmark+52>:	lw	a0,-28(s0)
0x00000000000108d0	168	   for (i = 0; i < n; i += 3) {
=> 0x108d0 <benchmark+56>:	lw	a1,-24(s0)
0x00000000000108d4	168	   for (i = 0; i < n; i += 3) {
=> 0x108d4 <benchmark+60>:	bge	a0,a1,0x10964 <benchmark+204>
0x0000000000010964	168	   for (i = 0; i < n; i += 3) {
=> 0x10964 <benchmark+204>:	li	a0,0
174	   for (i = 0; i < n; i += 3) {
=> 0x10968 <benchmark+208>:	sw	a0,-28(s0)
0x000000000001096c	174	   for (i = 0; i < n; i += 3) {
=> 0x1096c <benchmark+212>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x000000000001097c	174	   for (i = 0; i < n; i += 3) {
=> 0x1097c <benchmark+228>:	j	0x10980 <benchmark+232>
175	      r = compress2(test[i], test[i+1]);
=> 0x10980 <benchmark+232>:	lw	a0,-28(s0)
0x0000000000010984	175	      r = compress2(test[i], test[i+1]);
=> 0x10984 <benchmark+236>:	lui	a1,0x1d
0x0000000000010988	175	      r = compress2(test[i], test[i+1]);
=> 0x10988 <benchmark+240>:	addi	a1,a1,-280
0x000000000001098c	175	      r = compress2(test[i], test[i+1]);
=> 0x1098c <benchmark+244>:	slli	a2,a0,0x3
0x0000000000010990	175	      r = compress2(test[i], test[i+1]);
=> 0x10990 <benchmark+248>:	add	a2,a2,a1
0x0000000000010994	175	      r = compress2(test[i], test[i+1]);
=> 0x10994 <benchmark+252>:	lw	a2,0(a2)
0x0000000000010998	175	      r = compress2(test[i], test[i+1]);
=> 0x10998 <benchmark+256>:	addiw	a0,a0,1
0x000000000001099c	175	      r = compress2(test[i], test[i+1]);
=> 0x1099c <benchmark+260>:	slli	a0,a0,0x3
0x00000000000109a0	175	      r = compress2(test[i], test[i+1]);
=> 0x109a0 <benchmark+264>:	add	a0,a0,a1
0x00000000000109a4	175	      r = compress2(test[i], test[i+1]);
=> 0x109a4 <benchmark+268>:	lw	a0,0(a0)
0x00000000000109a8	175	      r = compress2(test[i], test[i+1]);
=> 0x109a8 <benchmark+272>:	sd	a0,-56(s0)
0x00000000000109ac	175	      r = compress2(test[i], test[i+1]);
=> 0x109ac <benchmark+276>:	mv	a0,a2
0x00000000000109b0	175	      r = compress2(test[i], test[i+1]);
=> 0x109b0 <benchmark+280>:	ld	a2,-56(s0)
0x00000000000109b4	175	      r = compress2(test[i], test[i+1]);
=> 0x109b4 <benchmark+284>:	sd	a1,-64(s0)
0x00000000000109b8	175	      r = compress2(test[i], test[i+1]);
=> 0x109b8 <benchmark+288>:	mv	a1,a2
0x00000000000109bc	175	      r = compress2(test[i], test[i+1]);
=> 0x109bc <benchmark+292>:	jal	ra,0x103fc <compress2>
compress2 (x=0, m=54) at compress_test.c:53
53	unsigned compress2(unsigned x, unsigned m) {
=> 0x103fc <compress2>:	addi	t6,t6,-16
0x0000000000010400	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10400 <compress2+4>:	sd	ra,0(t6)
0x0000000000010404	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10404 <compress2+8>:	st	zero,0(t6)
0x0000000000010408	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10408 <compress2+12>:	addi	sp,sp,-48
0x000000000001040c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1040c <compress2+16>:	sd	ra,40(sp)
0x0000000000010410	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10410 <compress2+20>:	sd	s0,32(sp)
0x0000000000010414	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10414 <compress2+24>:	addi	s0,sp,48
0x0000000000010418	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10418 <compress2+28>:	mv	a2,a1
0x000000000001041c	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x1041c <compress2+32>:	mv	a3,a0
0x0000000000010420	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10420 <compress2+36>:	sw	a0,-20(s0)
0x0000000000010424	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10424 <compress2+40>:	sw	a1,-24(s0)
0x0000000000010428	53	unsigned compress2(unsigned x, unsigned m) {
=> 0x10428 <compress2+44>:	li	a0,0
56	   r = 0;
=> 0x1042c <compress2+48>:	sw	a0,-28(s0)
57	   s = 0;
=> 0x10430 <compress2+52>:	sw	a0,-32(s0)
58	   do {
=> 0x10434 <compress2+56>:	j	0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
59	      b = m & 1;
=> 0x10438 <compress2+60>:	lwu	a0,-24(s0)
0x000000000001043c	59	      b = m & 1;
=> 0x1043c <compress2+64>:	andi	a0,a0,1
0x0000000000010440	59	      b = m & 1;
=> 0x10440 <compress2+68>:	sw	a0,-36(s0)
60	      r = r | ((x & b) << s);
=> 0x10444 <compress2+72>:	lw	a0,-28(s0)
0x0000000000010448	60	      r = r | ((x & b) << s);
=> 0x10448 <compress2+76>:	lw	a1,-20(s0)
0x000000000001044c	60	      r = r | ((x & b) << s);
=> 0x1044c <compress2+80>:	lw	a2,-36(s0)
0x0000000000010450	60	      r = r | ((x & b) << s);
=> 0x10450 <compress2+84>:	and	a1,a1,a2
0x0000000000010454	60	      r = r | ((x & b) << s);
=> 0x10454 <compress2+88>:	lwu	a2,-32(s0)
0x0000000000010458	60	      r = r | ((x & b) << s);
=> 0x10458 <compress2+92>:	sllw	a1,a1,a2
0x000000000001045c	60	      r = r | ((x & b) << s);
=> 0x1045c <compress2+96>:	or	a0,a0,a1
0x0000000000010460	60	      r = r | ((x & b) << s);
=> 0x10460 <compress2+100>:	sw	a0,-28(s0)
61	      s = s + b;
=> 0x10464 <compress2+104>:	lw	a0,-32(s0)
0x0000000000010468	61	      s = s + b;
=> 0x10468 <compress2+108>:	lw	a1,-36(s0)
0x000000000001046c	61	      s = s + b;
=> 0x1046c <compress2+112>:	add	a0,a0,a1
0x0000000000010470	61	      s = s + b;
=> 0x10470 <compress2+116>:	sw	a0,-32(s0)
62	      x = x >> 1;
=> 0x10474 <compress2+120>:	lwu	a0,-20(s0)
0x0000000000010478	62	      x = x >> 1;
=> 0x10478 <compress2+124>:	srli	a0,a0,0x1
0x000000000001047c	62	      x = x >> 1;
=> 0x1047c <compress2+128>:	sw	a0,-20(s0)
63	      m = m >> 1;
=> 0x10480 <compress2+132>:	lwu	a0,-24(s0)
0x0000000000010484	63	      m = m >> 1;
=> 0x10484 <compress2+136>:	srli	a0,a0,0x1
0x0000000000010488	63	      m = m >> 1;
=> 0x10488 <compress2+140>:	sw	a0,-24(s0)
64	   } while (m != 0);
=> 0x1048c <compress2+144>:	j	0x10490 <compress2+148>
0x0000000000010490	64	   } while (m != 0);
=> 0x10490 <compress2+148>:	lw	a0,-24(s0)
0x0000000000010494	64	   } while (m != 0);
=> 0x10494 <compress2+152>:	li	a1,0
0x0000000000010498	64	   } while (m != 0);
=> 0x10498 <compress2+156>:	bne	a0,a1,0x10438 <compress2+60>
0x000000000001049c	64	   } while (m != 0);
=> 0x1049c <compress2+160>:	j	0x104a0 <compress2+164>
65	   return r;
=> 0x104a0 <compress2+164>:	lw	a0,-28(s0)
0x00000000000104a4	65	   return r;
=> 0x104a4 <compress2+168>:	ld	s0,32(sp)
0x00000000000104a8 in compress2 (x=0, m=54) at compress_test.c:65
65	   return r;
=> 0x104a8 <compress2+172>:	ld	ra,40(sp)
0x00000000000104ac	65	   return r;
=> 0x104ac <compress2+176>:	addi	sp,sp,48
0x00000000000104b0	65	   return r;
=> 0x104b0 <compress2+180>:	ld	ra,0(t6)
0x00000000000104b4	65	   return r;
=> 0x104b4 <compress2+184>:	addi	t6,t6,16
0x00000000000104b8	65	   return r;
=> 0x104b8 <compress2+188>:	ret
0x00000000000109c0 in benchmark () at compress_test.c:175
175	      r = compress2(test[i], test[i+1]);
=> 0x109c0 <benchmark+296>:	sw	a0,-32(s0)
176	      if (r != test[i+2])
=> 0x109c4 <benchmark+300>:	lwu	a0,-32(s0)
0x00000000000109c8	176	      if (r != test[i+2])
=> 0x109c8 <benchmark+304>:	lw	a1,-28(s0)
0x00000000000109cc	176	      if (r != test[i+2])
=> 0x109cc <benchmark+308>:	addiw	a1,a1,2
0x00000000000109d0	176	      if (r != test[i+2])
=> 0x109d0 <benchmark+312>:	slli	a1,a1,0x3
0x00000000000109d4	176	      if (r != test[i+2])
=> 0x109d4 <benchmark+316>:	ld	a2,-64(s0)
0x00000000000109d8	176	      if (r != test[i+2])
=> 0x109d8 <benchmark+320>:	add	a1,a1,a2
0x00000000000109dc	176	      if (r != test[i+2])
=> 0x109dc <benchmark+324>:	ld	a1,0(a1)
0x00000000000109e0	176	      if (r != test[i+2])
=> 0x109e0 <benchmark+328>:	beq	a0,a1,0x109f4 <benchmark+348>
178	   }
=> 0x109f4 <benchmark+348>:	j	0x109f8 <benchmark+352>
174	   for (i = 0; i < n; i += 3) {
=> 0x109f8 <benchmark+352>:	lw	a0,-28(s0)
0x00000000000109fc	174	   for (i = 0; i < n; i += 3) {
=> 0x109fc <benchmark+356>:	addi	a0,a0,3
0x0000000000010a00	174	   for (i = 0; i < n; i += 3) {
=> 0x10a00 <benchmark+360>:	sw	a0,-28(s0)
0x0000000000010a04	174	   for (i = 0; i < n; i += 3) {
=> 0x10a04 <benchmark+364>:	j	0x10970 <benchmark+216>
0x0000000000010970	174	   for (i = 0; i < n; i += 3) {
=> 0x10970 <benchmark+216>:	lw	a0,-28(s0)
0x0000000000010974	174	   for (i = 0; i < n; i += 3) {
=> 0x10974 <benchmark+220>:	lw	a1,-24(s0)
0x0000000000010978	174	   for (i = 0; i < n; i += 3) {
=> 0x10978 <benchmark+224>:	bge	a0,a1,0x10a08 <benchmark+368>
0x0000000000010a08	174	   for (i = 0; i < n; i += 3) {
=> 0x10a08 <benchmark+368>:	li	a0,0
180	   for (i = 0; i < n; i += 3) {
=> 0x10a0c <benchmark+372>:	sw	a0,-28(s0)
0x0000000000010a10	180	   for (i = 0; i < n; i += 3) {
=> 0x10a10 <benchmark+376>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010a20	180	   for (i = 0; i < n; i += 3) {
=> 0x10a20 <benchmark+392>:	j	0x10a24 <benchmark+396>
181	      r = compress3(test[i], test[i+1]);
=> 0x10a24 <benchmark+396>:	lw	a0,-28(s0)
0x0000000000010a28	181	      r = compress3(test[i], test[i+1]);
=> 0x10a28 <benchmark+400>:	lui	a1,0x1d
0x0000000000010a2c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a2c <benchmark+404>:	addi	a1,a1,-280
0x0000000000010a30	181	      r = compress3(test[i], test[i+1]);
=> 0x10a30 <benchmark+408>:	slli	a2,a0,0x3
0x0000000000010a34	181	      r = compress3(test[i], test[i+1]);
=> 0x10a34 <benchmark+412>:	add	a2,a2,a1
0x0000000000010a38	181	      r = compress3(test[i], test[i+1]);
=> 0x10a38 <benchmark+416>:	lw	a2,0(a2)
0x0000000000010a3c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a3c <benchmark+420>:	addiw	a0,a0,1
0x0000000000010a40	181	      r = compress3(test[i], test[i+1]);
=> 0x10a40 <benchmark+424>:	slli	a0,a0,0x3
0x0000000000010a44	181	      r = compress3(test[i], test[i+1]);
=> 0x10a44 <benchmark+428>:	add	a0,a0,a1
0x0000000000010a48	181	      r = compress3(test[i], test[i+1]);
=> 0x10a48 <benchmark+432>:	lw	a0,0(a0)
0x0000000000010a4c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a4c <benchmark+436>:	sd	a0,-72(s0)
0x0000000000010a50	181	      r = compress3(test[i], test[i+1]);
=> 0x10a50 <benchmark+440>:	mv	a0,a2
0x0000000000010a54	181	      r = compress3(test[i], test[i+1]);
=> 0x10a54 <benchmark+444>:	ld	a2,-72(s0)
0x0000000000010a58	181	      r = compress3(test[i], test[i+1]);
=> 0x10a58 <benchmark+448>:	sd	a1,-80(s0)
0x0000000000010a5c	181	      r = compress3(test[i], test[i+1]);
=> 0x10a5c <benchmark+452>:	mv	a1,a2
0x0000000000010a60	181	      r = compress3(test[i], test[i+1]);
=> 0x10a60 <benchmark+456>:	jal	ra,0x104bc <compress3>
compress3 (x=0, mask=54) at compress_test.c:75
75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104bc <compress3>:	addi	t6,t6,-16
0x00000000000104c0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c0 <compress3+4>:	sd	ra,0(t6)
0x00000000000104c4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c4 <compress3+8>:	st	zero,0(t6)
0x00000000000104c8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104c8 <compress3+12>:	addi	sp,sp,-80
0x00000000000104cc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104cc <compress3+16>:	sd	ra,72(sp)
0x00000000000104d0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d0 <compress3+20>:	sd	s0,64(sp)
0x00000000000104d4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d4 <compress3+24>:	addi	s0,sp,80
0x00000000000104d8	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104d8 <compress3+28>:	mv	a2,a1
0x00000000000104dc	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104dc <compress3+32>:	mv	a3,a0
0x00000000000104e0	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e0 <compress3+36>:	sw	a0,-20(s0)
0x00000000000104e4	75	unsigned compress3(unsigned x, unsigned mask) {
=> 0x104e4 <compress3+40>:	sw	a1,-24(s0)
79	  m = ~mask;
=> 0x104e8 <compress3+44>:	lwu	a0,-24(s0)
0x00000000000104ec	79	  m = ~mask;
=> 0x104ec <compress3+48>:	li	a1,1
0x00000000000104f0	79	  m = ~mask;
=> 0x104f0 <compress3+52>:	slli	a1,a1,0x20
0x00000000000104f4	79	  m = ~mask;
=> 0x104f4 <compress3+56>:	addi	a1,a1,-1
0x00000000000104f8	79	  m = ~mask;
=> 0x104f8 <compress3+60>:	xor	a0,a0,a1
0x00000000000104fc	79	  m = ~mask;
=> 0x104fc <compress3+64>:	sd	a0,-64(s0)
80	  zm = mask;
=> 0x10500 <compress3+68>:	lwu	a0,-24(s0)
0x0000000000010504	80	  zm = mask;
=> 0x10504 <compress3+72>:	sd	a0,-72(s0)
0x0000000000010508	80	  zm = mask;
=> 0x10508 <compress3+76>:	li	a0,0
81	  for (i = 0; i < 5; i++) {
=> 0x1050c <compress3+80>:	sw	a0,-76(s0)
0x0000000000010510	81	  for (i = 0; i < 5; i++) {
=> 0x10510 <compress3+84>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
0x0000000000010520	81	  for (i = 0; i < 5; i++) {
=> 0x10520 <compress3+100>:	j	0x10524 <compress3+104>
82	      q = m;
=> 0x10524 <compress3+104>:	ld	a0,-64(s0)
0x0000000000010528	82	      q = m;
=> 0x10528 <compress3+108>:	sd	a0,-56(s0)
83	      m ^= m << 1;
=> 0x1052c <compress3+112>:	ld	a0,-64(s0)
0x0000000000010530	83	      m ^= m << 1;
=> 0x10530 <compress3+116>:	slli	a1,a0,0x1
0x0000000000010534	83	      m ^= m << 1;
=> 0x10534 <compress3+120>:	xor	a0,a0,a1
0x0000000000010538	83	      m ^= m << 1;
=> 0x10538 <compress3+124>:	sd	a0,-64(s0)
84	      m ^= m << 2;
=> 0x1053c <compress3+128>:	ld	a0,-64(s0)
0x0000000000010540	84	      m ^= m << 2;
=> 0x10540 <compress3+132>:	slli	a1,a0,0x2
0x0000000000010544	84	      m ^= m << 2;
=> 0x10544 <compress3+136>:	xor	a0,a0,a1
0x0000000000010548	84	      m ^= m << 2;
=> 0x10548 <compress3+140>:	sd	a0,-64(s0)
85	      m ^= m << 4;
=> 0x1054c <compress3+144>:	ld	a0,-64(s0)
0x0000000000010550	85	      m ^= m << 4;
=> 0x10550 <compress3+148>:	slli	a1,a0,0x4
0x0000000000010554	85	      m ^= m << 4;
=> 0x10554 <compress3+152>:	xor	a0,a0,a1
0x0000000000010558	85	      m ^= m << 4;
=> 0x10558 <compress3+156>:	sd	a0,-64(s0)
86	      m ^= m << 8;
=> 0x1055c <compress3+160>:	ld	a0,-64(s0)
0x0000000000010560	86	      m ^= m << 8;
=> 0x10560 <compress3+164>:	slli	a1,a0,0x8
0x0000000000010564	86	      m ^= m << 8;
=> 0x10564 <compress3+168>:	xor	a0,a0,a1
0x0000000000010568	86	      m ^= m << 8;
=> 0x10568 <compress3+172>:	sd	a0,-64(s0)
87	      m ^= m << 16;
=> 0x1056c <compress3+176>:	ld	a0,-64(s0)
0x0000000000010570	87	      m ^= m << 16;
=> 0x10570 <compress3+180>:	slli	a1,a0,0x10
0x0000000000010574	87	      m ^= m << 16;
=> 0x10574 <compress3+184>:	xor	a0,a0,a1
0x0000000000010578	87	      m ^= m << 16;
=> 0x10578 <compress3+188>:	sd	a0,-64(s0)
88	      masks[i] = (m << 1) & zm;
=> 0x1057c <compress3+192>:	ld	a0,-64(s0)
0x0000000000010580	88	      masks[i] = (m << 1) & zm;
=> 0x10580 <compress3+196>:	slli	a0,a0,0x1
0x0000000000010584	88	      masks[i] = (m << 1) & zm;
=> 0x10584 <compress3+200>:	ld	a1,-72(s0)
0x0000000000010588	88	      masks[i] = (m << 1) & zm;
=> 0x10588 <compress3+204>:	and	a0,a0,a1
0x000000000001058c	88	      masks[i] = (m << 1) & zm;
=> 0x1058c <compress3+208>:	lw	a1,-76(s0)
0x0000000000010590	88	      masks[i] = (m << 1) & zm;
=> 0x10590 <compress3+212>:	slli	a1,a1,0x2
0x0000000000010594	88	      masks[i] = (m << 1) & zm;
=> 0x10594 <compress3+216>:	addi	a2,s0,-44
0x0000000000010598	88	      masks[i] = (m << 1) & zm;
=> 0x10598 <compress3+220>:	add	a1,a2,a1
0x000000000001059c	88	      masks[i] = (m << 1) & zm;
=> 0x1059c <compress3+224>:	sw	a0,0(a1)
89	      m = q & ~m;
=> 0x105a0 <compress3+228>:	ld	a0,-56(s0)
0x00000000000105a4	89	      m = q & ~m;
=> 0x105a4 <compress3+232>:	ld	a1,-64(s0)
0x00000000000105a8	89	      m = q & ~m;
=> 0x105a8 <compress3+236>:	not	a1,a1
0x00000000000105ac	89	      m = q & ~m;
=> 0x105ac <compress3+240>:	and	a0,a0,a1
0x00000000000105b0	89	      m = q & ~m;
=> 0x105b0 <compress3+244>:	sd	a0,-64(s0)
90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b4 <compress3+248>:	ld	a0,-72(s0)
0x00000000000105b8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105b8 <compress3+252>:	lw	a1,-76(s0)
0x00000000000105bc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105bc <compress3+256>:	slli	a1,a1,0x2
0x00000000000105c0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c0 <compress3+260>:	add	a1,a2,a1
0x00000000000105c4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c4 <compress3+264>:	lwu	a1,0(a1)
0x00000000000105c8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105c8 <compress3+268>:	and	a0,a0,a1
0x00000000000105cc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105cc <compress3+272>:	sd	a0,-56(s0)
0x00000000000105d0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d0 <compress3+276>:	ld	a0,-72(s0)
0x00000000000105d4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d4 <compress3+280>:	ld	a1,-56(s0)
0x00000000000105d8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105d8 <compress3+284>:	xor	a0,a0,a1
0x00000000000105dc	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105dc <compress3+288>:	lwu	a2,-76(s0)
0x00000000000105e0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e0 <compress3+292>:	li	a3,1
0x00000000000105e4	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e4 <compress3+296>:	sllw	a2,a3,a2
0x00000000000105e8	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105e8 <compress3+300>:	srl	a1,a1,a2
0x00000000000105ec	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105ec <compress3+304>:	xor	a0,a0,a1
0x00000000000105f0	90	      q = zm & masks[i]; zm = zm ^ q ^ (q >> (1 << i));
=> 0x105f0 <compress3+308>:	sd	a0,-72(s0)
91	  }
=> 0x105f4 <compress3+312>:	j	0x105f8 <compress3+316>
81	  for (i = 0; i < 5; i++) {
=> 0x105f8 <compress3+316>:	lw	a0,-76(s0)
0x00000000000105fc	81	  for (i = 0; i < 5; i++) {
=> 0x105fc <compress3+320>:	addi	a0,a0,1
0x0000000000010600	81	  for (i = 0; i < 5; i++) {
=> 0x10600 <compress3+324>:	sw	a0,-76(s0)
0x0000000000010604	81	  for (i = 0; i < 5; i++) {
=> 0x10604 <compress3+328>:	j	0x10514 <compress3+88>
0x0000000000010514	81	  for (i = 0; i < 5; i++) {
=> 0x10514 <compress3+88>:	lw	a0,-76(s0)
0x0000000000010518	81	  for (i = 0; i < 5; i++) {
=> 0x10518 <compress3+92>:	li	a1,4
0x000000000001051c	81	  for (i = 0; i < 5; i++) {
=> 0x1051c <compress3+96>:	blt	a1,a0,0x10608 <compress3+332>
92	  x = x & mask;
=> 0x10608 <compress3+332>:	lw	a0,-20(s0)
0x000000000001060c	92	  x = x & mask;
=> 0x1060c <compress3+336>:	lw	a1,-24(s0)
0x0000000000010610	92	  x = x & mask;
=> 0x10610 <compress3+340>:	and	a0,a0,a1
0x0000000000010614	92	  x = x & mask;
=> 0x10614 <compress3+344>:	sw	a0,-20(s0)
93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10618 <compress3+348>:	lwu	a0,-20(s0)
0x000000000001061c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1061c <compress3+352>:	lwu	a1,-44(s0)
0x0000000000010620	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10620 <compress3+356>:	and	a0,a0,a1
0x0000000000010624	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10624 <compress3+360>:	sd	a0,-56(s0)
0x0000000000010628	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10628 <compress3+364>:	lw	a0,-20(s0)
0x000000000001062c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1062c <compress3+368>:	ld	a1,-56(s0)
0x0000000000010630	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10630 <compress3+372>:	xor	a0,a0,a1
0x0000000000010634	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10634 <compress3+376>:	srli	a1,a1,0x1
0x0000000000010638	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x10638 <compress3+380>:	xor	a0,a0,a1
0x000000000001063c	93	  q = x & masks[0];  x = x ^ q ^ (q >> 1);
=> 0x1063c <compress3+384>:	sw	a0,-20(s0)
94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10640 <compress3+388>:	lwu	a0,-20(s0)
0x0000000000010644	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10644 <compress3+392>:	lwu	a1,-40(s0)
0x0000000000010648	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10648 <compress3+396>:	and	a0,a0,a1
0x000000000001064c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1064c <compress3+400>:	sd	a0,-56(s0)
0x0000000000010650	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10650 <compress3+404>:	lw	a0,-20(s0)
0x0000000000010654	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10654 <compress3+408>:	ld	a1,-56(s0)
0x0000000000010658	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10658 <compress3+412>:	xor	a0,a0,a1
0x000000000001065c	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x1065c <compress3+416>:	srli	a1,a1,0x2
0x0000000000010660	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10660 <compress3+420>:	xor	a0,a0,a1
0x0000000000010664	94	  q = x & masks[1];  x = x ^ q ^ (q >> 2);
=> 0x10664 <compress3+424>:	sw	a0,-20(s0)
95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10668 <compress3+428>:	lwu	a0,-20(s0)
0x000000000001066c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1066c <compress3+432>:	lwu	a1,-36(s0)
0x0000000000010670	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10670 <compress3+436>:	and	a0,a0,a1
0x0000000000010674	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10674 <compress3+440>:	sd	a0,-56(s0)
0x0000000000010678	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10678 <compress3+444>:	lw	a0,-20(s0)
0x000000000001067c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1067c <compress3+448>:	ld	a1,-56(s0)
0x0000000000010680	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10680 <compress3+452>:	xor	a0,a0,a1
0x0000000000010684	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10684 <compress3+456>:	srli	a1,a1,0x4
0x0000000000010688	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x10688 <compress3+460>:	xor	a0,a0,a1
0x000000000001068c	95	  q = x & masks[2];  x = x ^ q ^ (q >> 4);
=> 0x1068c <compress3+464>:	sw	a0,-20(s0)
96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10690 <compress3+468>:	lwu	a0,-20(s0)
0x0000000000010694	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10694 <compress3+472>:	lwu	a1,-32(s0)
0x0000000000010698	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x10698 <compress3+476>:	and	a0,a0,a1
0x000000000001069c	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x1069c <compress3+480>:	sd	a0,-56(s0)
0x00000000000106a0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a0 <compress3+484>:	lw	a0,-20(s0)
0x00000000000106a4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a4 <compress3+488>:	ld	a1,-56(s0)
0x00000000000106a8	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106a8 <compress3+492>:	xor	a0,a0,a1
0x00000000000106ac	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106ac <compress3+496>:	srli	a1,a1,0x8
0x00000000000106b0	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b0 <compress3+500>:	xor	a0,a0,a1
0x00000000000106b4	96	  q = x & masks[3];  x = x ^ q ^ (q >> 8);
=> 0x106b4 <compress3+504>:	sw	a0,-20(s0)
97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106b8 <compress3+508>:	lwu	a0,-20(s0)
0x00000000000106bc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106bc <compress3+512>:	lwu	a1,-28(s0)
0x00000000000106c0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c0 <compress3+516>:	and	a0,a0,a1
0x00000000000106c4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c4 <compress3+520>:	sd	a0,-56(s0)
0x00000000000106c8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106c8 <compress3+524>:	lw	a0,-20(s0)
0x00000000000106cc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106cc <compress3+528>:	ld	a1,-56(s0)
0x00000000000106d0	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d0 <compress3+532>:	xor	a0,a0,a1
0x00000000000106d4	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d4 <compress3+536>:	srli	a1,a1,0x10
0x00000000000106d8	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106d8 <compress3+540>:	xor	a0,a0,a1
0x00000000000106dc	97	  q = x & masks[4];  x = x ^ q ^ (q >> 16);
=> 0x106dc <compress3+544>:	sw	a0,-20(s0)
98	  return x;
=> 0x106e0 <compress3+548>:	lw	a0,-20(s0)
0x00000000000106e4	98	  return x;
=> 0x106e4 <compress3+552>:	ld	s0,64(sp)
0x00000000000106e8 in compress3 (x=0, mask=54) at compress_test.c:98
98	  return x;
=> 0x106e8 <compress3+556>:	ld	ra,72(sp)
0x00000000000106ec	98	  return x;
=> 0x106ec <compress3+560>:	addi	sp,sp,80
0x00000000000106f0	98	  return x;
=> 0x106f0 <compress3+564>:	ld	ra,0(t6)
0x00000000000106f4	98	  return x;
=> 0x106f4 <compress3+568>:	addi	t6,t6,16
0x00000000000106f8	98	  return x;
=> 0x106f8 <compress3+572>:	ret
0x0000000000010a64 in benchmark () at compress_test.c:181
181	      r = compress3(test[i], test[i+1]);
=> 0x10a64 <benchmark+460>:	sw	a0,-32(s0)
182	      if (r != test[i+2])
=> 0x10a68 <benchmark+464>:	lwu	a0,-32(s0)
0x0000000000010a6c	182	      if (r != test[i+2])
=> 0x10a6c <benchmark+468>:	lw	a1,-28(s0)
0x0000000000010a70	182	      if (r != test[i+2])
=> 0x10a70 <benchmark+472>:	addiw	a1,a1,2
0x0000000000010a74	182	      if (r != test[i+2])
=> 0x10a74 <benchmark+476>:	slli	a1,a1,0x3
0x0000000000010a78	182	      if (r != test[i+2])
=> 0x10a78 <benchmark+480>:	ld	a2,-80(s0)
0x0000000000010a7c	182	      if (r != test[i+2])
=> 0x10a7c <benchmark+484>:	add	a1,a1,a2
0x0000000000010a80	182	      if (r != test[i+2])
=> 0x10a80 <benchmark+488>:	ld	a1,0(a1)
0x0000000000010a84	182	      if (r != test[i+2])
=> 0x10a84 <benchmark+492>:	beq	a0,a1,0x10a98 <benchmark+512>
184	   }
=> 0x10a98 <benchmark+512>:	j	0x10a9c <benchmark+516>
180	   for (i = 0; i < n; i += 3) {
=> 0x10a9c <benchmark+516>:	lw	a0,-28(s0)
0x0000000000010aa0	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa0 <benchmark+520>:	addi	a0,a0,3
0x0000000000010aa4	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa4 <benchmark+524>:	sw	a0,-28(s0)
0x0000000000010aa8	180	   for (i = 0; i < n; i += 3) {
=> 0x10aa8 <benchmark+528>:	j	0x10a14 <benchmark+380>
0x0000000000010a14	180	   for (i = 0; i < n; i += 3) {
=> 0x10a14 <benchmark+380>:	lw	a0,-28(s0)
0x0000000000010a18	180	   for (i = 0; i < n; i += 3) {
=> 0x10a18 <benchmark+384>:	lw	a1,-24(s0)
0x0000000000010a1c	180	   for (i = 0; i < n; i += 3) {
=> 0x10a1c <benchmark+388>:	bge	a0,a1,0x10aac <benchmark+532>
0x0000000000010aac	180	   for (i = 0; i < n; i += 3) {
=> 0x10aac <benchmark+532>:	li	a0,0
186	   for (i = 0; i < n; i += 3) {
=> 0x10ab0 <benchmark+536>:	sw	a0,-28(s0)
0x0000000000010ab4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab4 <benchmark+540>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
0x0000000000010ac4	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac4 <benchmark+556>:	j	0x10ac8 <benchmark+560>
187	      r = compress4(test[i], test[i+1]);
=> 0x10ac8 <benchmark+560>:	lw	a0,-28(s0)
0x0000000000010acc	187	      r = compress4(test[i], test[i+1]);
=> 0x10acc <benchmark+564>:	lui	a1,0x1d
0x0000000000010ad0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad0 <benchmark+568>:	addi	a1,a1,-280
0x0000000000010ad4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad4 <benchmark+572>:	slli	a2,a0,0x3
0x0000000000010ad8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ad8 <benchmark+576>:	add	a2,a2,a1
0x0000000000010adc	187	      r = compress4(test[i], test[i+1]);
=> 0x10adc <benchmark+580>:	lw	a2,0(a2)
0x0000000000010ae0	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae0 <benchmark+584>:	addiw	a0,a0,1
0x0000000000010ae4	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae4 <benchmark+588>:	slli	a0,a0,0x3
0x0000000000010ae8	187	      r = compress4(test[i], test[i+1]);
=> 0x10ae8 <benchmark+592>:	add	a0,a0,a1
0x0000000000010aec	187	      r = compress4(test[i], test[i+1]);
=> 0x10aec <benchmark+596>:	lw	a0,0(a0)
0x0000000000010af0	187	      r = compress4(test[i], test[i+1]);
=> 0x10af0 <benchmark+600>:	sd	a0,-88(s0)
0x0000000000010af4	187	      r = compress4(test[i], test[i+1]);
=> 0x10af4 <benchmark+604>:	mv	a0,a2
0x0000000000010af8	187	      r = compress4(test[i], test[i+1]);
=> 0x10af8 <benchmark+608>:	ld	a2,-88(s0)
0x0000000000010afc	187	      r = compress4(test[i], test[i+1]);
=> 0x10afc <benchmark+612>:	sd	a1,-96(s0)
0x0000000000010b00	187	      r = compress4(test[i], test[i+1]);
=> 0x10b00 <benchmark+616>:	mv	a1,a2
0x0000000000010b04	187	      r = compress4(test[i], test[i+1]);
=> 0x10b04 <benchmark+620>:	jal	ra,0x106fc <compress4>
compress4 (x=0, m=54) at compress_test.c:109
109	unsigned compress4(unsigned x, unsigned m) {
=> 0x106fc <compress4>:	addi	t6,t6,-16
0x0000000000010700	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10700 <compress4+4>:	sd	ra,0(t6)
0x0000000000010704	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10704 <compress4+8>:	st	zero,0(t6)
0x0000000000010708	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10708 <compress4+12>:	addi	sp,sp,-64
0x000000000001070c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1070c <compress4+16>:	sd	ra,56(sp)
0x0000000000010710	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10710 <compress4+20>:	sd	s0,48(sp)
0x0000000000010714	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10714 <compress4+24>:	addi	s0,sp,64
0x0000000000010718	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10718 <compress4+28>:	mv	a2,a1
0x000000000001071c	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x1071c <compress4+32>:	mv	a3,a0
0x0000000000010720	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10720 <compress4+36>:	sw	a0,-20(s0)
0x0000000000010724	109	unsigned compress4(unsigned x, unsigned m) {
=> 0x10724 <compress4+40>:	sw	a1,-24(s0)
113	   x = x & m;           // Clear irrelevant bits.
=> 0x10728 <compress4+44>:	lw	a0,-20(s0)
0x000000000001072c	113	   x = x & m;           // Clear irrelevant bits.
=> 0x1072c <compress4+48>:	lw	a1,-24(s0)
0x0000000000010730	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10730 <compress4+52>:	and	a0,a0,a1
0x0000000000010734	113	   x = x & m;           // Clear irrelevant bits.
=> 0x10734 <compress4+56>:	sw	a0,-20(s0)
114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10738 <compress4+60>:	lw	a0,-24(s0)
0x000000000001073c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1073c <compress4+64>:	not	a0,a0
0x0000000000010740	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10740 <compress4+68>:	slli	a0,a0,0x1
0x0000000000010744	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10744 <compress4+72>:	slli	a0,a0,0x20
0x0000000000010748	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10748 <compress4+76>:	srli	a0,a0,0x20
0x000000000001074c	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x1074c <compress4+80>:	sd	a0,-32(s0)
0x0000000000010750	114	   mk = ~m << 1;        // We will count 0's to right.
=> 0x10750 <compress4+84>:	li	a0,0
116	   for (i = 0; i < 5; i++) {
=> 0x10754 <compress4+88>:	sw	a0,-60(s0)
0x0000000000010758	116	   for (i = 0; i < 5; i++) {
=> 0x10758 <compress4+92>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
0x0000000000010768	116	   for (i = 0; i < 5; i++) {
=> 0x10768 <compress4+108>:	j	0x1076c <compress4+112>
117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x1076c <compress4+112>:	ld	a0,-32(s0)
0x0000000000010770	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10770 <compress4+116>:	slli	a1,a0,0x1
0x0000000000010774	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10774 <compress4+120>:	xor	a0,a0,a1
0x0000000000010778	117	      mp = mk ^ (mk << 1);              // Parallel suffix.
=> 0x10778 <compress4+124>:	sd	a0,-40(s0)
118	      mp = mp ^ (mp << 2);
=> 0x1077c <compress4+128>:	ld	a0,-40(s0)
0x0000000000010780	118	      mp = mp ^ (mp << 2);
=> 0x10780 <compress4+132>:	slli	a1,a0,0x2
0x0000000000010784	118	      mp = mp ^ (mp << 2);
=> 0x10784 <compress4+136>:	xor	a0,a0,a1
0x0000000000010788	118	      mp = mp ^ (mp << 2);
=> 0x10788 <compress4+140>:	sd	a0,-40(s0)
119	      mp = mp ^ (mp << 4);
=> 0x1078c <compress4+144>:	ld	a0,-40(s0)
0x0000000000010790	119	      mp = mp ^ (mp << 4);
=> 0x10790 <compress4+148>:	slli	a1,a0,0x4
0x0000000000010794	119	      mp = mp ^ (mp << 4);
=> 0x10794 <compress4+152>:	xor	a0,a0,a1
0x0000000000010798	119	      mp = mp ^ (mp << 4);
=> 0x10798 <compress4+156>:	sd	a0,-40(s0)
120	      mp = mp ^ (mp << 8);
=> 0x1079c <compress4+160>:	ld	a0,-40(s0)
0x00000000000107a0	120	      mp = mp ^ (mp << 8);
=> 0x107a0 <compress4+164>:	slli	a1,a0,0x8
0x00000000000107a4	120	      mp = mp ^ (mp << 8);
=> 0x107a4 <compress4+168>:	xor	a0,a0,a1
0x00000000000107a8	120	      mp = mp ^ (mp << 8);
=> 0x107a8 <compress4+172>:	sd	a0,-40(s0)
121	      mp = mp ^ (mp << 16);
=> 0x107ac <compress4+176>:	ld	a0,-40(s0)
0x00000000000107b0	121	      mp = mp ^ (mp << 16);
=> 0x107b0 <compress4+180>:	slli	a1,a0,0x10
0x00000000000107b4	121	      mp = mp ^ (mp << 16);
=> 0x107b4 <compress4+184>:	xor	a0,a0,a1
0x00000000000107b8	121	      mp = mp ^ (mp << 16);
=> 0x107b8 <compress4+188>:	sd	a0,-40(s0)
122	      mv = mp & m;                      // Bits to move.
=> 0x107bc <compress4+192>:	ld	a0,-40(s0)
0x00000000000107c0	122	      mv = mp & m;                      // Bits to move.
=> 0x107c0 <compress4+196>:	lwu	a1,-24(s0)
0x00000000000107c4	122	      mv = mp & m;                      // Bits to move.
=> 0x107c4 <compress4+200>:	and	a0,a0,a1
0x00000000000107c8	122	      mv = mp & m;                      // Bits to move.
=> 0x107c8 <compress4+204>:	sd	a0,-48(s0)
123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107cc <compress4+208>:	lw	a0,-24(s0)
0x00000000000107d0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d0 <compress4+212>:	ld	a1,-48(s0)
0x00000000000107d4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d4 <compress4+216>:	xor	a0,a0,a1
0x00000000000107d8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107d8 <compress4+220>:	lwu	a2,-60(s0)
0x00000000000107dc	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107dc <compress4+224>:	li	a3,1
0x00000000000107e0	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e0 <compress4+228>:	sllw	a2,a3,a2
0x00000000000107e4	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e4 <compress4+232>:	srl	a1,a1,a2
0x00000000000107e8	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107e8 <compress4+236>:	or	a0,a0,a1
0x00000000000107ec	123	      m = (m ^ mv) | (mv >> (1 << i));    // Compress m.
=> 0x107ec <compress4+240>:	sw	a0,-24(s0)
124	      t = x & mv;
=> 0x107f0 <compress4+244>:	lwu	a0,-20(s0)
0x00000000000107f4	124	      t = x & mv;
=> 0x107f4 <compress4+248>:	ld	a1,-48(s0)
0x00000000000107f8	124	      t = x & mv;
=> 0x107f8 <compress4+252>:	and	a0,a0,a1
0x00000000000107fc	124	      t = x & mv;
=> 0x107fc <compress4+256>:	sd	a0,-56(s0)
125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10800 <compress4+260>:	lw	a0,-20(s0)
0x0000000000010804	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10804 <compress4+264>:	ld	a1,-56(s0)
0x0000000000010808	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10808 <compress4+268>:	xor	a0,a0,a1
0x000000000001080c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1080c <compress4+272>:	lwu	a2,-60(s0)
0x0000000000010810	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10810 <compress4+276>:	sllw	a2,a3,a2
0x0000000000010814	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10814 <compress4+280>:	srl	a1,a1,a2
0x0000000000010818	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x10818 <compress4+284>:	or	a0,a0,a1
0x000000000001081c	125	      x = (x ^ t) | (t >> (1 << i));      // Compress x.
=> 0x1081c <compress4+288>:	sw	a0,-20(s0)
126	      mk = mk & ~mp;
=> 0x10820 <compress4+292>:	ld	a0,-32(s0)
0x0000000000010824	126	      mk = mk & ~mp;
=> 0x10824 <compress4+296>:	ld	a1,-40(s0)
0x0000000000010828	126	      mk = mk & ~mp;
=> 0x10828 <compress4+300>:	not	a1,a1
0x000000000001082c	126	      mk = mk & ~mp;
=> 0x1082c <compress4+304>:	and	a0,a0,a1
0x0000000000010830	126	      mk = mk & ~mp;
=> 0x10830 <compress4+308>:	sd	a0,-32(s0)
127	   }
=> 0x10834 <compress4+312>:	j	0x10838 <compress4+316>
116	   for (i = 0; i < 5; i++) {
=> 0x10838 <compress4+316>:	lw	a0,-60(s0)
0x000000000001083c	116	   for (i = 0; i < 5; i++) {
=> 0x1083c <compress4+320>:	addi	a0,a0,1
0x0000000000010840	116	   for (i = 0; i < 5; i++) {
=> 0x10840 <compress4+324>:	sw	a0,-60(s0)
0x0000000000010844	116	   for (i = 0; i < 5; i++) {
=> 0x10844 <compress4+328>:	j	0x1075c <compress4+96>
0x000000000001075c	116	   for (i = 0; i < 5; i++) {
=> 0x1075c <compress4+96>:	lw	a0,-60(s0)
0x0000000000010760	116	   for (i = 0; i < 5; i++) {
=> 0x10760 <compress4+100>:	li	a1,4
0x0000000000010764	116	   for (i = 0; i < 5; i++) {
=> 0x10764 <compress4+104>:	blt	a1,a0,0x10848 <compress4+332>
128	   return x;
=> 0x10848 <compress4+332>:	lw	a0,-20(s0)
0x000000000001084c	128	   return x;
=> 0x1084c <compress4+336>:	ld	s0,48(sp)
0x0000000000010850 in compress4 (x=0, m=54) at compress_test.c:128
128	   return x;
=> 0x10850 <compress4+340>:	ld	ra,56(sp)
0x0000000000010854	128	   return x;
=> 0x10854 <compress4+344>:	addi	sp,sp,64
0x0000000000010858	128	   return x;
=> 0x10858 <compress4+348>:	ld	ra,0(t6)
0x000000000001085c	128	   return x;
=> 0x1085c <compress4+352>:	addi	t6,t6,16
0x0000000000010860	128	   return x;
=> 0x10860 <compress4+356>:	ret
0x0000000000010b08 in benchmark () at compress_test.c:187
187	      r = compress4(test[i], test[i+1]);
=> 0x10b08 <benchmark+624>:	sw	a0,-32(s0)
188	      if (r != test[i+2])
=> 0x10b0c <benchmark+628>:	lwu	a0,-32(s0)
0x0000000000010b10	188	      if (r != test[i+2])
=> 0x10b10 <benchmark+632>:	lw	a1,-28(s0)
0x0000000000010b14	188	      if (r != test[i+2])
=> 0x10b14 <benchmark+636>:	addiw	a1,a1,2
0x0000000000010b18	188	      if (r != test[i+2])
=> 0x10b18 <benchmark+640>:	slli	a1,a1,0x3
0x0000000000010b1c	188	      if (r != test[i+2])
=> 0x10b1c <benchmark+644>:	ld	a2,-96(s0)
0x0000000000010b20	188	      if (r != test[i+2])
=> 0x10b20 <benchmark+648>:	add	a1,a1,a2
0x0000000000010b24	188	      if (r != test[i+2])
=> 0x10b24 <benchmark+652>:	ld	a1,0(a1)
0x0000000000010b28	188	      if (r != test[i+2])
=> 0x10b28 <benchmark+656>:	beq	a0,a1,0x10b3c <benchmark+676>
190	   }
=> 0x10b3c <benchmark+676>:	j	0x10b40 <benchmark+680>
186	   for (i = 0; i < n; i += 3) {
=> 0x10b40 <benchmark+680>:	lw	a0,-28(s0)
0x0000000000010b44	186	   for (i = 0; i < n; i += 3) {
=> 0x10b44 <benchmark+684>:	addi	a0,a0,3
0x0000000000010b48	186	   for (i = 0; i < n; i += 3) {
=> 0x10b48 <benchmark+688>:	sw	a0,-28(s0)
0x0000000000010b4c	186	   for (i = 0; i < n; i += 3) {
=> 0x10b4c <benchmark+692>:	j	0x10ab8 <benchmark+544>
0x0000000000010ab8	186	   for (i = 0; i < n; i += 3) {
=> 0x10ab8 <benchmark+544>:	lw	a0,-28(s0)
0x0000000000010abc	186	   for (i = 0; i < n; i += 3) {
=> 0x10abc <benchmark+548>:	lw	a1,-24(s0)
0x0000000000010ac0	186	   for (i = 0; i < n; i += 3) {
=> 0x10ac0 <benchmark+552>:	bge	a0,a1,0x10b50 <benchmark+696>
192	   return errors;
=> 0x10b50 <benchmark+696>:	lw	a0,-20(s0)
0x0000000000010b54	192	   return errors;
=> 0x10b54 <benchmark+700>:	ld	s0,80(sp)
0x0000000000010b58 in benchmark () at compress_test.c:192
192	   return errors;
=> 0x10b58 <benchmark+704>:	ld	ra,88(sp)
0x0000000000010b5c	192	   return errors;
=> 0x10b5c <benchmark+708>:	addi	sp,sp,96
0x0000000000010b60	192	   return errors;
=> 0x10b60 <benchmark+712>:	ld	ra,0(t6)
0x0000000000010b64	192	   return errors;
=> 0x10b64 <benchmark+716>:	addi	t6,t6,16
0x0000000000010b68	192	   return errors;
=> 0x10b68 <benchmark+720>:	ret
0x0000000000010244 in main (argc=1, argv=0x3ffffffb68) at main.c:57
57	      result = benchmark ();
=> 0x10244 <main+184>:	sw	a0,-40(s0)
58	    }
=> 0x10248 <main+188>:	j	0x1024c <main+192>
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1024c <main+192>:	lw	a0,-36(s0)
0x0000000000010250	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10250 <main+196>:	addi	a0,a0,1
0x0000000000010254	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10254 <main+200>:	sw	a0,-36(s0)
0x0000000000010258	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10258 <main+204>:	j	0x10228 <main+156>
0x0000000000010228	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10228 <main+156>:	lw	a0,-36(s0)
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+160>:	li	a1,0
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+164>:	blt	a1,a0,0x1025c <main+208>
60	  stop_trigger ();
=> 0x1025c <main+208>:	jal	ra,0x102f4 <stop_trigger>
stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:40
40	{
=> 0x102f4 <stop_trigger>:	addi	t6,t6,-16
0x00000000000102f8	40	{
=> 0x102f8 <stop_trigger+4>:	sd	ra,0(t6)
0x00000000000102fc	40	{
=> 0x102fc <stop_trigger+8>:	st	zero,0(t6)
0x0000000000010300	40	{
=> 0x10300 <stop_trigger+12>:	addi	sp,sp,-16
47	}
=> 0x10304 <stop_trigger+16>:	sd	ra,8(sp)
0x0000000000010308	47	}
=> 0x10308 <stop_trigger+20>:	sd	s0,0(sp)
0x000000000001030c	47	}
=> 0x1030c <stop_trigger+24>:	addi	s0,sp,16
0x0000000000010310	47	}
=> 0x10310 <stop_trigger+28>:	ld	s0,0(sp)
0x0000000000010314 in stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:47
47	}
=> 0x10314 <stop_trigger+32>:	ld	ra,8(sp)
0x0000000000010318	47	}
=> 0x10318 <stop_trigger+36>:	addi	sp,sp,16
0x000000000001031c	47	}
=> 0x1031c <stop_trigger+40>:	ld	ra,0(t6)
0x0000000000010320	47	}
=> 0x10320 <stop_trigger+44>:	addi	t6,t6,16
0x0000000000010324	47	}
=> 0x10324 <stop_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb68) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x10260 <main+212>:	lw	a0,-40(s0)
0x0000000000010264	64	  correct = verify_benchmark (result);
=> 0x10264 <main+216>:	jal	ra,0x10b6c <verify_benchmark>
verify_benchmark (r=1) at compress_test.c:197
197	{
=> 0x10b6c <verify_benchmark>:	addi	t6,t6,-16
0x0000000000010b70	197	{
=> 0x10b70 <verify_benchmark+4>:	sd	ra,0(t6)
0x0000000000010b74	197	{
=> 0x10b74 <verify_benchmark+8>:	st	zero,0(t6)
0x0000000000010b78	197	{
=> 0x10b78 <verify_benchmark+12>:	addi	sp,sp,-32
0x0000000000010b7c	197	{
=> 0x10b7c <verify_benchmark+16>:	sd	ra,24(sp)
0x0000000000010b80	197	{
=> 0x10b80 <verify_benchmark+20>:	sd	s0,16(sp)
0x0000000000010b84	197	{
=> 0x10b84 <verify_benchmark+24>:	addi	s0,sp,32
0x0000000000010b88	197	{
=> 0x10b88 <verify_benchmark+28>:	mv	a1,a0
0x0000000000010b8c	197	{
=> 0x10b8c <verify_benchmark+32>:	sw	a0,-24(s0)
198	   if (r != 0)
=> 0x10b90 <verify_benchmark+36>:	lw	a0,-24(s0)
0x0000000000010b94	198	   if (r != 0)
=> 0x10b94 <verify_benchmark+40>:	li	a2,0
0x0000000000010b98	198	   if (r != 0)
=> 0x10b98 <verify_benchmark+44>:	beq	a0,a2,0x10bac <verify_benchmark+64>
0x0000000000010bac	199	      return 0;
=> 0x10bac <verify_benchmark+64>:	li	a0,1
200	   return 1;
=> 0x10bb0 <verify_benchmark+68>:	sw	a0,-20(s0)
0x0000000000010bb4	200	   return 1;
=> 0x10bb4 <verify_benchmark+72>:	j	0x10bb8 <verify_benchmark+76>
201	}
=> 0x10bb8 <verify_benchmark+76>:	lw	a0,-20(s0)
0x0000000000010bbc	201	}
=> 0x10bbc <verify_benchmark+80>:	ld	s0,16(sp)
0x0000000000010bc0 in verify_benchmark (r=1) at compress_test.c:201
201	}
=> 0x10bc0 <verify_benchmark+84>:	ld	ra,24(sp)
0x0000000000010bc4	201	}
=> 0x10bc4 <verify_benchmark+88>:	addi	sp,sp,32
0x0000000000010bc8	201	}
=> 0x10bc8 <verify_benchmark+92>:	ld	ra,0(t6)
0x0000000000010bcc	201	}
=> 0x10bcc <verify_benchmark+96>:	addi	t6,t6,16
0x0000000000010bd0	201	}
=> 0x10bd0 <verify_benchmark+100>:	ret
0x0000000000010268 in main (argc=1, argv=0x3ffffffb68) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x10268 <main+220>:	sw	a0,-44(s0)
66	  free(a);
=> 0x1026c <main+224>:	ld	a0,-56(s0)
0x0000000000010270	66	  free(a);
=> 0x10270 <main+228>:	jal	ra,0x10c64 <free>
0x0000000000010c64 in free ()
=> 0x10c64 <free>:	mv	a1,a0
0x0000000000010c66 in free ()
=> 0x10c66 <free+2>:	ld	a0,1872(gp)
0x0000000000010c6a in free ()
=> 0x10c6a <free+6>:	j	0x13732 <_free_r>
0x0000000000013732 in _free_r ()
=> 0x13732 <_free_r>:	beqz	a1,0x1381c <_free_r+234>
0x0000000000013734 in _free_r ()
=> 0x13734 <_free_r+2>:	addi	sp,sp,-32
0x0000000000013736 in _free_r ()
=> 0x13736 <_free_r+4>:	sd	s0,16(sp)
0x0000000000013738 in _free_r ()
=> 0x13738 <_free_r+6>:	sd	s1,8(sp)
0x000000000001373a in _free_r ()
=> 0x1373a <_free_r+8>:	mv	s0,a1
0x000000000001373c in _free_r ()
=> 0x1373c <_free_r+10>:	mv	s1,a0
0x000000000001373e in _free_r ()
=> 0x1373e <_free_r+12>:	sd	ra,24(sp)
0x0000000000013740 in _free_r ()
=> 0x13740 <_free_r+14>:	jal	ra,0x11332 <__malloc_lock>
0x0000000000011332 in __malloc_lock ()
=> 0x11332 <__malloc_lock>:	ret
0x0000000000013744 in _free_r ()
=> 0x13744 <_free_r+18>:	ld	a0,-8(s0)
0x0000000000013748 in _free_r ()
=> 0x13748 <_free_r+22>:	addi	a4,s0,-16
0x000000000001374c in _free_r ()
=> 0x1374c <_free_r+26>:	lui	a1,0x1e
0x000000000001374e in _free_r ()
=> 0x1374e <_free_r+28>:	andi	a5,a0,-2
0x0000000000013752 in _free_r ()
=> 0x13752 <_free_r+32>:	add	a2,a4,a5
0x0000000000013756 in _free_r ()
=> 0x13756 <_free_r+36>:	addi	a1,a1,1896
0x000000000001375a in _free_r ()
=> 0x1375a <_free_r+40>:	ld	a3,8(a2)
0x000000000001375c in _free_r ()
=> 0x1375c <_free_r+42>:	ld	a6,16(a1)
0x0000000000013760 in _free_r ()
=> 0x13760 <_free_r+46>:	andi	a3,a3,-4
0x0000000000013762 in _free_r ()
=> 0x13762 <_free_r+48>:	beq	a6,a2,0x138a2 <_free_r+368>
0x0000000000013766 in _free_r ()
=> 0x13766 <_free_r+52>:	sd	a3,8(a2)
0x0000000000013768 in _free_r ()
=> 0x13768 <_free_r+54>:	andi	a0,a0,1
0x000000000001376a in _free_r ()
=> 0x1376a <_free_r+56>:	add	a6,a2,a3
0x000000000001376e in _free_r ()
=> 0x1376e <_free_r+60>:	bnez	a0,0x137ee <_free_r+188>
0x00000000000137ee in _free_r ()
=> 0x137ee <_free_r+188>:	ld	a0,8(a6)
0x00000000000137f2 in _free_r ()
=> 0x137f2 <_free_r+192>:	andi	a0,a0,1
0x00000000000137f4 in _free_r ()
=> 0x137f4 <_free_r+194>:	bnez	a0,0x1381e <_free_r+236>
0x000000000001381e in _free_r ()
=> 0x1381e <_free_r+236>:	ori	a3,a5,1
0x0000000000013822 in _free_r ()
=> 0x13822 <_free_r+240>:	sd	a3,-8(s0)
0x0000000000013826 in _free_r ()
=> 0x13826 <_free_r+244>:	sd	a5,0(a2)
0x0000000000013828 in _free_r ()
=> 0x13828 <_free_r+246>:	li	a3,511
0x000000000001382c in _free_r ()
=> 0x1382c <_free_r+250>:	bgeu	a3,a5,0x137b0 <_free_r+126>
0x0000000000013830 in _free_r ()
=> 0x13830 <_free_r+254>:	srli	a3,a5,0x9
0x0000000000013834 in _free_r ()
=> 0x13834 <_free_r+258>:	li	a2,4
0x0000000000013836 in _free_r ()
=> 0x13836 <_free_r+260>:	bltu	a2,a3,0x138d4 <_free_r+418>
0x00000000000138d4 in _free_r ()
=> 0x138d4 <_free_r+418>:	li	a2,20
0x00000000000138d6 in _free_r ()
=> 0x138d6 <_free_r+420>:	bgeu	a2,a3,0x138fa <_free_r+456>
0x00000000000138da in _free_r ()
=> 0x138da <_free_r+424>:	li	a2,84
0x00000000000138de in _free_r ()
=> 0x138de <_free_r+428>:	bltu	a2,a3,0x13932 <_free_r+512>
0x0000000000013932 in _free_r ()
=> 0x13932 <_free_r+512>:	li	a2,340
0x0000000000013936 in _free_r ()
=> 0x13936 <_free_r+516>:	bltu	a2,a3,0x1394e <_free_r+540>
0x000000000001394e in _free_r ()
=> 0x1394e <_free_r+540>:	li	a2,1364
0x0000000000013952 in _free_r ()
=> 0x13952 <_free_r+544>:	bltu	a2,a3,0x1396a <_free_r+568>
0x000000000001396a in _free_r ()
=> 0x1396a <_free_r+568>:	li	a0,2032
0x000000000001396e in _free_r ()
=> 0x1396e <_free_r+572>:	li	a2,126
0x0000000000013972 in _free_r ()
=> 0x13972 <_free_r+576>:	j	0x1384c <_free_r+282>
0x000000000001384c in _free_r ()
=> 0x1384c <_free_r+282>:	add	a0,a0,a1
0x000000000001384e in _free_r ()
=> 0x1384e <_free_r+284>:	ld	a3,0(a0)
0x0000000000013850 in _free_r ()
=> 0x13850 <_free_r+286>:	addi	a0,a0,-16
0x0000000000013852 in _free_r ()
=> 0x13852 <_free_r+288>:	beq	a0,a3,0x1391c <_free_r+490>
0x000000000001391c in _free_r ()
=> 0x1391c <_free_r+490>:	ld	a6,8(a1)
0x0000000000013920 in _free_r ()
=> 0x13920 <_free_r+494>:	sraiw	a2,a2,0x2
0x0000000000013924 in _free_r ()
=> 0x13924 <_free_r+498>:	li	a5,1
0x0000000000013926 in _free_r ()
=> 0x13926 <_free_r+500>:	sll	a2,a5,a2
0x000000000001392a in _free_r ()
=> 0x1392a <_free_r+504>:	or	a2,a2,a6
0x000000000001392e in _free_r ()
=> 0x1392e <_free_r+508>:	sd	a2,8(a1)
0x0000000000013930 in _free_r ()
=> 0x13930 <_free_r+510>:	j	0x13866 <_free_r+308>
0x0000000000013866 in _free_r ()
=> 0x13866 <_free_r+308>:	sd	a0,24(a4)
0x0000000000013868 in _free_r ()
=> 0x13868 <_free_r+310>:	sd	a3,16(a4)
0x000000000001386a in _free_r ()
=> 0x1386a <_free_r+312>:	ld	s0,16(sp)
0x000000000001386c in _free_r ()
=> 0x1386c <_free_r+314>:	sd	a4,16(a0)
0x000000000001386e in _free_r ()
=> 0x1386e <_free_r+316>:	ld	ra,24(sp)
0x0000000000013870 in _free_r ()
=> 0x13870 <_free_r+318>:	mv	a0,s1
0x0000000000013872 in _free_r ()
=> 0x13872 <_free_r+320>:	ld	s1,8(sp)
0x0000000000013874 in _free_r ()
=> 0x13874 <_free_r+322>:	sd	a4,24(a3)
0x0000000000013876 in _free_r ()
=> 0x13876 <_free_r+324>:	addi	sp,sp,32
0x0000000000013878 in _free_r ()
=> 0x13878 <_free_r+326>:	j	0x11334 <__malloc_unlock>
0x0000000000011334 in __malloc_unlock ()
=> 0x11334 <__malloc_unlock>:	ret
main (argc=1, argv=0x3ffffffb68) at main.c:68
68	  return (!correct);
=> 0x10274 <main+232>:	lw	a0,-44(s0)
0x0000000000010278	68	  return (!correct);
=> 0x10278 <main+236>:	seqz	a0,a0
0x000000000001027c	68	  return (!correct);
=> 0x1027c <main+240>:	ld	s0,112(sp)
0x0000000000010280 in main (argc=<error reading variable: Cannot access memory at address 0x2aaabbc298>, argv=<error reading variable: Cannot access memory at address 0x2aaabbc290>) at main.c:68
68	  return (!correct);
=> 0x10280 <main+244>:	ld	ra,120(sp)
0x0000000000010284	68	  return (!correct);
=> 0x10284 <main+248>:	addi	sp,sp,128
0x0000000000010288	68	  return (!correct);
=> 0x10288 <main+252>:	ret
0x000000000001013a in _start ()
=> 0x1013a <_start+64>:	j	0x10bd4 <exit>
0x0000000000010bd4 in exit ()
=> 0x10bd4 <exit>:	addi	sp,sp,-16
0x0000000000010bd6 in exit ()
=> 0x10bd6 <exit+2>:	li	a1,0
0x0000000000010bd8 in exit ()
=> 0x10bd8 <exit+4>:	sd	s0,0(sp)
0x0000000000010bda in exit ()
=> 0x10bda <exit+6>:	sd	ra,8(sp)
0x0000000000010bdc in exit ()
=> 0x10bdc <exit+8>:	mv	s0,a0
0x0000000000010bde in exit ()
=> 0x10bde <exit+10>:	jal	ra,0x130d2 <__call_exitprocs>
0x00000000000130d2 in __call_exitprocs ()
=> 0x130d2 <__call_exitprocs>:	addi	sp,sp,-80
0x00000000000130d4 in __call_exitprocs ()
=> 0x130d4 <__call_exitprocs+2>:	sd	s4,32(sp)
0x00000000000130d6 in __call_exitprocs ()
=> 0x130d6 <__call_exitprocs+4>:	ld	s4,1856(gp)
0x00000000000130da in __call_exitprocs ()
=> 0x130da <__call_exitprocs+8>:	sd	s2,48(sp)
0x00000000000130dc in __call_exitprocs ()
=> 0x130dc <__call_exitprocs+10>:	sd	ra,72(sp)
0x00000000000130de in __call_exitprocs ()
=> 0x130de <__call_exitprocs+12>:	ld	s2,504(s4)
0x00000000000130e2 in __call_exitprocs ()
=> 0x130e2 <__call_exitprocs+16>:	sd	s0,64(sp)
0x00000000000130e4 in __call_exitprocs ()
=> 0x130e4 <__call_exitprocs+18>:	sd	s1,56(sp)
0x00000000000130e6 in __call_exitprocs ()
=> 0x130e6 <__call_exitprocs+20>:	sd	s3,40(sp)
0x00000000000130e8 in __call_exitprocs ()
=> 0x130e8 <__call_exitprocs+22>:	sd	s5,24(sp)
0x00000000000130ea in __call_exitprocs ()
=> 0x130ea <__call_exitprocs+24>:	sd	s6,16(sp)
0x00000000000130ec in __call_exitprocs ()
=> 0x130ec <__call_exitprocs+26>:	sd	s7,8(sp)
0x00000000000130ee in __call_exitprocs ()
=> 0x130ee <__call_exitprocs+28>:	sd	s8,0(sp)
0x00000000000130f0 in __call_exitprocs ()
=> 0x130f0 <__call_exitprocs+30>:	beqz	s2,0x13120 <__call_exitprocs+78>
0x00000000000130f4 in __call_exitprocs ()
=> 0x130f4 <__call_exitprocs+34>:	mv	s6,a0
0x00000000000130f6 in __call_exitprocs ()
=> 0x130f6 <__call_exitprocs+36>:	mv	s7,a1
0x00000000000130f8 in __call_exitprocs ()
=> 0x130f8 <__call_exitprocs+38>:	li	s5,1
0x00000000000130fa in __call_exitprocs ()
=> 0x130fa <__call_exitprocs+40>:	li	s3,-1
0x00000000000130fc in __call_exitprocs ()
=> 0x130fc <__call_exitprocs+42>:	lw	s1,8(s2)
0x0000000000013100 in __call_exitprocs ()
=> 0x13100 <__call_exitprocs+46>:	addiw	s0,s1,-1
0x0000000000013104 in __call_exitprocs ()
=> 0x13104 <__call_exitprocs+50>:	bltz	s0,0x13120 <__call_exitprocs+78>
0x0000000000013108 in __call_exitprocs ()
=> 0x13108 <__call_exitprocs+54>:	slli	s1,s1,0x3
0x000000000001310a in __call_exitprocs ()
=> 0x1310a <__call_exitprocs+56>:	add	s1,s1,s2
0x000000000001310c in __call_exitprocs ()
=> 0x1310c <__call_exitprocs+58>:	beqz	s7,0x13138 <__call_exitprocs+102>
0x0000000000013138 in __call_exitprocs ()
=> 0x13138 <__call_exitprocs+102>:	lw	a5,8(s2)
0x000000000001313c in __call_exitprocs ()
=> 0x1313c <__call_exitprocs+106>:	ld	a4,8(s1)
0x000000000001313e in __call_exitprocs ()
=> 0x1313e <__call_exitprocs+108>:	addiw	a5,a5,-1
0x0000000000013140 in __call_exitprocs ()
=> 0x13140 <__call_exitprocs+110>:	beq	a5,s0,0x13188 <__call_exitprocs+182>
0x0000000000013188 in __call_exitprocs ()
=> 0x13188 <__call_exitprocs+182>:	sw	s0,8(s2)
0x000000000001318c in __call_exitprocs ()
=> 0x1318c <__call_exitprocs+186>:	j	0x13148 <__call_exitprocs+118>
0x0000000000013148 in __call_exitprocs ()
=> 0x13148 <__call_exitprocs+118>:	beqz	a4,0x13118 <__call_exitprocs+70>
0x000000000001314a in __call_exitprocs ()
=> 0x1314a <__call_exitprocs+120>:	lw	a5,784(s2)
0x000000000001314e in __call_exitprocs ()
=> 0x1314e <__call_exitprocs+124>:	sllw	a3,s5,s0
0x0000000000013152 in __call_exitprocs ()
=> 0x13152 <__call_exitprocs+128>:	lw	s8,8(s2)
0x0000000000013156 in __call_exitprocs ()
=> 0x13156 <__call_exitprocs+132>:	and	a5,a5,a3
0x0000000000013158 in __call_exitprocs ()
=> 0x13158 <__call_exitprocs+134>:	sext.w	a5,a5
0x000000000001315a in __call_exitprocs ()
=> 0x1315a <__call_exitprocs+136>:	bnez	a5,0x13174 <__call_exitprocs+162>
0x000000000001315c in __call_exitprocs ()
=> 0x1315c <__call_exitprocs+138>:	jalr	a4
0x000000000001362a in __libc_fini_array ()
=> 0x1362a <__libc_fini_array>:	addi	sp,sp,-32
0x000000000001362c in __libc_fini_array ()
=> 0x1362c <__libc_fini_array+2>:	sd	s0,16(sp)
0x000000000001362e in __libc_fini_array ()
=> 0x1362e <__libc_fini_array+4>:	lui	a5,0x1e
0x0000000000013630 in __libc_fini_array ()
=> 0x13630 <__libc_fini_array+6>:	lui	s0,0x1e
0x0000000000013632 in __libc_fini_array ()
=> 0x13632 <__libc_fini_array+8>:	addi	s0,s0,24
0x0000000000013636 in __libc_fini_array ()
=> 0x13636 <__libc_fini_array+12>:	addi	a5,a5,32
0x000000000001363a in __libc_fini_array ()
=> 0x1363a <__libc_fini_array+16>:	sub	a5,a5,s0
0x000000000001363c in __libc_fini_array ()
=> 0x1363c <__libc_fini_array+18>:	sd	s1,8(sp)
0x000000000001363e in __libc_fini_array ()
=> 0x1363e <__libc_fini_array+20>:	sd	ra,24(sp)
0x0000000000013640 in __libc_fini_array ()
=> 0x13640 <__libc_fini_array+22>:	srai	s1,a5,0x3
0x0000000000013644 in __libc_fini_array ()
=> 0x13644 <__libc_fini_array+26>:	beqz	s1,0x13654 <__libc_fini_array+42>
0x0000000000013646 in __libc_fini_array ()
=> 0x13646 <__libc_fini_array+28>:	addi	a5,a5,-8
0x0000000000013648 in __libc_fini_array ()
=> 0x13648 <__libc_fini_array+30>:	add	s0,s0,a5
0x000000000001364a in __libc_fini_array ()
=> 0x1364a <__libc_fini_array+32>:	ld	a5,0(s0)
0x000000000001364c in __libc_fini_array ()
=> 0x1364c <__libc_fini_array+34>:	addi	s1,s1,-1
0x000000000001364e in __libc_fini_array ()
=> 0x1364e <__libc_fini_array+36>:	addi	s0,s0,-8
0x0000000000013650 in __libc_fini_array ()
=> 0x13650 <__libc_fini_array+38>:	jalr	a5
0x000000000001013e in __do_global_dtors_aux ()
=> 0x1013e <__do_global_dtors_aux>:	lbu	a4,1952(gp)
0x0000000000010142 in __do_global_dtors_aux ()
=> 0x10142 <__do_global_dtors_aux+4>:	bnez	a4,0x1016e <__do_global_dtors_aux+48>
0x0000000000010144 in __do_global_dtors_aux ()
=> 0x10144 <__do_global_dtors_aux+6>:	addi	sp,sp,-16
0x0000000000010146 in __do_global_dtors_aux ()
=> 0x10146 <__do_global_dtors_aux+8>:	sd	s0,0(sp)
0x0000000000010148 in __do_global_dtors_aux ()
=> 0x10148 <__do_global_dtors_aux+10>:	mv	s0,a5
0x000000000001014a in __do_global_dtors_aux ()
=> 0x1014a <__do_global_dtors_aux+12>:	sd	ra,8(sp)
0x000000000001014c in __do_global_dtors_aux ()
=> 0x1014c <__do_global_dtors_aux+14>:	li	a5,0
0x0000000000010150 in __do_global_dtors_aux ()
=> 0x10150 <__do_global_dtors_aux+18>:	beqz	a5,0x10160 <__do_global_dtors_aux+34>
0x0000000000010160 in __do_global_dtors_aux ()
=> 0x10160 <__do_global_dtors_aux+34>:	li	a5,1
0x0000000000010162 in __do_global_dtors_aux ()
=> 0x10162 <__do_global_dtors_aux+36>:	ld	ra,8(sp)
0x0000000000010164 in __do_global_dtors_aux ()
=> 0x10164 <__do_global_dtors_aux+38>:	sb	a5,1952(gp)
0x0000000000010168 in __do_global_dtors_aux ()
=> 0x10168 <__do_global_dtors_aux+42>:	ld	s0,0(sp)
0x000000000001016a in __do_global_dtors_aux ()
=> 0x1016a <__do_global_dtors_aux+44>:	addi	sp,sp,16
0x000000000001016c in __do_global_dtors_aux ()
=> 0x1016c <__do_global_dtors_aux+46>:	ret
0x0000000000013652 in __libc_fini_array ()
=> 0x13652 <__libc_fini_array+40>:	bnez	s1,0x1364a <__libc_fini_array+32>
0x0000000000013654 in __libc_fini_array ()
=> 0x13654 <__libc_fini_array+42>:	ld	ra,24(sp)
0x0000000000013656 in __libc_fini_array ()
=> 0x13656 <__libc_fini_array+44>:	ld	s0,16(sp)
0x0000000000013658 in __libc_fini_array ()
=> 0x13658 <__libc_fini_array+46>:	ld	s1,8(sp)
0x000000000001365a in __libc_fini_array ()
=> 0x1365a <__libc_fini_array+48>:	addi	sp,sp,32
0x000000000001365c in __libc_fini_array ()
=> 0x1365c <__libc_fini_array+50>:	ret
0x000000000001315e in __call_exitprocs ()
=> 0x1315e <__call_exitprocs+140>:	lw	a4,8(s2)
0x0000000000013162 in __call_exitprocs ()
=> 0x13162 <__call_exitprocs+144>:	ld	a5,504(s4)
0x0000000000013166 in __call_exitprocs ()
=> 0x13166 <__call_exitprocs+148>:	bne	a4,s8,0x1316e <__call_exitprocs+156>
0x000000000001316a in __call_exitprocs ()
=> 0x1316a <__call_exitprocs+152>:	beq	a5,s2,0x13118 <__call_exitprocs+70>
0x0000000000013118 in __call_exitprocs ()
=> 0x13118 <__call_exitprocs+70>:	addiw	s0,s0,-1
0x000000000001311a in __call_exitprocs ()
=> 0x1311a <__call_exitprocs+72>:	addi	s1,s1,-8
0x000000000001311c in __call_exitprocs ()
=> 0x1311c <__call_exitprocs+74>:	bne	s0,s3,0x1310c <__call_exitprocs+58>
0x0000000000013120 in __call_exitprocs ()
=> 0x13120 <__call_exitprocs+78>:	ld	ra,72(sp)
0x0000000000013122 in __call_exitprocs ()
=> 0x13122 <__call_exitprocs+80>:	ld	s0,64(sp)
0x0000000000013124 in __call_exitprocs ()
=> 0x13124 <__call_exitprocs+82>:	ld	s1,56(sp)
0x0000000000013126 in __call_exitprocs ()
=> 0x13126 <__call_exitprocs+84>:	ld	s2,48(sp)
0x0000000000013128 in __call_exitprocs ()
=> 0x13128 <__call_exitprocs+86>:	ld	s3,40(sp)
0x000000000001312a in __call_exitprocs ()
=> 0x1312a <__call_exitprocs+88>:	ld	s4,32(sp)
0x000000000001312c in __call_exitprocs ()
=> 0x1312c <__call_exitprocs+90>:	ld	s5,24(sp)
0x000000000001312e in __call_exitprocs ()
=> 0x1312e <__call_exitprocs+92>:	ld	s6,16(sp)
0x0000000000013130 in __call_exitprocs ()
=> 0x13130 <__call_exitprocs+94>:	ld	s7,8(sp)
0x0000000000013132 in __call_exitprocs ()
=> 0x13132 <__call_exitprocs+96>:	ld	s8,0(sp)
0x0000000000013134 in __call_exitprocs ()
=> 0x13134 <__call_exitprocs+98>:	addi	sp,sp,80
0x0000000000013136 in __call_exitprocs ()
=> 0x13136 <__call_exitprocs+100>:	ret
0x0000000000010be2 in exit ()
=> 0x10be2 <exit+14>:	ld	a0,1856(gp)
0x0000000000010be6 in exit ()
=> 0x10be6 <exit+18>:	ld	a5,88(a0)
0x0000000000010be8 in exit ()
=> 0x10be8 <exit+20>:	beqz	a5,0x10bec <exit+24>
0x0000000000010bea in exit ()
=> 0x10bea <exit+22>:	jalr	a5
0x00000000000133aa in _cleanup_r ()
=> 0x133aa <_cleanup_r>:	lui	a1,0x1a
0x00000000000133ac in _cleanup_r ()
=> 0x133ac <_cleanup_r+2>:	addi	a1,a1,-1274
0x00000000000133b0 in _cleanup_r ()
=> 0x133b0 <_cleanup_r+6>:	j	0x13a00 <_fwalk_reent>
0x0000000000013a00 in _fwalk_reent ()
=> 0x13a00 <_fwalk_reent>:	addi	sp,sp,-80
0x0000000000013a02 in _fwalk_reent ()
=> 0x13a02 <_fwalk_reent+2>:	sd	s2,48(sp)
0x0000000000013a04 in _fwalk_reent ()
=> 0x13a04 <_fwalk_reent+4>:	sd	s3,40(sp)
0x0000000000013a06 in _fwalk_reent ()
=> 0x13a06 <_fwalk_reent+6>:	sd	s4,32(sp)
0x0000000000013a08 in _fwalk_reent ()
=> 0x13a08 <_fwalk_reent+8>:	sd	s5,24(sp)
0x0000000000013a0a in _fwalk_reent ()
=> 0x13a0a <_fwalk_reent+10>:	sd	s6,16(sp)
0x0000000000013a0c in _fwalk_reent ()
=> 0x13a0c <_fwalk_reent+12>:	sd	s7,8(sp)
0x0000000000013a0e in _fwalk_reent ()
=> 0x13a0e <_fwalk_reent+14>:	sd	s8,0(sp)
0x0000000000013a10 in _fwalk_reent ()
=> 0x13a10 <_fwalk_reent+16>:	sd	ra,72(sp)
0x0000000000013a12 in _fwalk_reent ()
=> 0x13a12 <_fwalk_reent+18>:	sd	s0,64(sp)
0x0000000000013a14 in _fwalk_reent ()
=> 0x13a14 <_fwalk_reent+20>:	sd	s1,56(sp)
0x0000000000013a16 in _fwalk_reent ()
=> 0x13a16 <_fwalk_reent+22>:	mv	s8,a0
0x0000000000013a18 in _fwalk_reent ()
=> 0x13a18 <_fwalk_reent+24>:	mv	s4,a1
0x0000000000013a1a in _fwalk_reent ()
=> 0x13a1a <_fwalk_reent+26>:	addi	s2,a0,1312
0x0000000000013a1e in _fwalk_reent ()
=> 0x13a1e <_fwalk_reent+30>:	li	s6,0
0x0000000000013a20 in _fwalk_reent ()
=> 0x13a20 <_fwalk_reent+32>:	li	s5,176
0x0000000000013a24 in _fwalk_reent ()
=> 0x13a24 <_fwalk_reent+36>:	li	s7,1
0x0000000000013a26 in _fwalk_reent ()
=> 0x13a26 <_fwalk_reent+38>:	li	s3,-1
0x0000000000013a28 in _fwalk_reent ()
=> 0x13a28 <_fwalk_reent+40>:	lw	a5,8(s2)
0x0000000000013a2c in _fwalk_reent ()
=> 0x13a2c <_fwalk_reent+44>:	ld	s0,16(s2)
0x0000000000013a30 in _fwalk_reent ()
=> 0x13a30 <_fwalk_reent+48>:	blez	a5,0x13a68 <_fwalk_reent+104>
0x0000000000013a34 in _fwalk_reent ()
=> 0x13a34 <_fwalk_reent+52>:	addiw	s1,a5,-1
0x0000000000013a38 in _fwalk_reent ()
=> 0x13a38 <_fwalk_reent+56>:	slli	s1,s1,0x20
0x0000000000013a3a in _fwalk_reent ()
=> 0x13a3a <_fwalk_reent+58>:	srli	s1,s1,0x20
0x0000000000013a3c in _fwalk_reent ()
=> 0x13a3c <_fwalk_reent+60>:	addi	s1,s1,1
0x0000000000013a3e in _fwalk_reent ()
=> 0x13a3e <_fwalk_reent+62>:	mul	s1,s1,s5
0x0000000000013a42 in _fwalk_reent ()
=> 0x13a42 <_fwalk_reent+66>:	add	s1,s1,s0
0x0000000000013a44 in _fwalk_reent ()
=> 0x13a44 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013a48 in _fwalk_reent ()
=> 0x13a48 <_fwalk_reent+72>:	bgeu	s7,a5,0x13a60 <_fwalk_reent+96>
0x0000000000013a4c in _fwalk_reent ()
=> 0x13a4c <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013a50 in _fwalk_reent ()
=> 0x13a50 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013a52 in _fwalk_reent ()
=> 0x13a52 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013a54 in _fwalk_reent ()
=> 0x13a54 <_fwalk_reent+84>:	beq	a5,s3,0x13a60 <_fwalk_reent+96>
0x0000000000013a58 in _fwalk_reent ()
=> 0x13a58 <_fwalk_reent+88>:	jalr	s4
0x0000000000019b06 in _fclose_r ()
=> 0x19b06 <_fclose_r>:	beqz	a1,0x19b40 <_fclose_r+58>
0x0000000000019b08 in _fclose_r ()
=> 0x19b08 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019b0a in _fclose_r ()
=> 0x19b0a <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019b0c in _fclose_r ()
=> 0x19b0c <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019b0e in _fclose_r ()
=> 0x19b0e <_fclose_r+8>:	mv	s0,a0
0x0000000000019b10 in _fclose_r ()
=> 0x19b10 <_fclose_r+10>:	beqz	a0,0x19b16 <_fclose_r+16>
0x0000000000019b12 in _fclose_r ()
=> 0x19b12 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019b14 in _fclose_r ()
=> 0x19b14 <_fclose_r+14>:	beqz	a5,0x19b30 <_fclose_r+42>
0x0000000000019b16 in _fclose_r ()
=> 0x19b16 <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019b1a in _fclose_r ()
=> 0x19b1a <_fclose_r+20>:	bnez	a5,0x19b26 <_fclose_r+32>
0x0000000000019b26 in _fclose_r ()
=> 0x19b26 <_fclose_r+32>:	mv	a0,s0
0x0000000000019b28 in _fclose_r ()
=> 0x19b28 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019b2a in _fclose_r ()
=> 0x19b2a <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019b2c in _fclose_r ()
=> 0x19b2c <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019b2e in _fclose_r ()
=> 0x19b2e <_fclose_r+40>:	j	0x19a86 <_fclose_r.part.0>
0x0000000000019a86 in _fclose_r.part.0 ()
=> 0x19a86 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019a88 in _fclose_r.part.0 ()
=> 0x19a88 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019a8a in _fclose_r.part.0 ()
=> 0x19a8a <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019a8c in _fclose_r.part.0 ()
=> 0x19a8c <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019a8e in _fclose_r.part.0 ()
=> 0x19a8e <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019a90 in _fclose_r.part.0 ()
=> 0x19a90 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019a92 in _fclose_r.part.0 ()
=> 0x19a92 <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019a94 in _fclose_r.part.0 ()
=> 0x19a94 <_fclose_r.part.0+14>:	jal	ra,0x13194 <__sflush_r>
0x0000000000013194 in __sflush_r ()
=> 0x13194 <__sflush_r>:	lh	a5,16(a1)
0x0000000000013198 in __sflush_r ()
=> 0x13198 <__sflush_r+4>:	addi	sp,sp,-48
0x000000000001319a in __sflush_r ()
=> 0x1319a <__sflush_r+6>:	sd	s0,32(sp)
0x000000000001319c in __sflush_r ()
=> 0x1319c <__sflush_r+8>:	sd	s3,8(sp)
0x000000000001319e in __sflush_r ()
=> 0x1319e <__sflush_r+10>:	sd	ra,40(sp)
0x00000000000131a0 in __sflush_r ()
=> 0x131a0 <__sflush_r+12>:	sd	s1,24(sp)
0x00000000000131a2 in __sflush_r ()
=> 0x131a2 <__sflush_r+14>:	sd	s2,16(sp)
0x00000000000131a4 in __sflush_r ()
=> 0x131a4 <__sflush_r+16>:	andi	a3,a5,8
0x00000000000131a8 in __sflush_r ()
=> 0x131a8 <__sflush_r+20>:	mv	s0,a1
0x00000000000131aa in __sflush_r ()
=> 0x131aa <__sflush_r+22>:	mv	s3,a0
0x00000000000131ac in __sflush_r ()
=> 0x131ac <__sflush_r+24>:	bnez	a3,0x13260 <__sflush_r+204>
0x00000000000131ae in __sflush_r ()
=> 0x131ae <__sflush_r+26>:	lui	a4,0x1
0x00000000000131b0 in __sflush_r ()
=> 0x131b0 <__sflush_r+28>:	addi	a4,a4,-2048
0x00000000000131b4 in __sflush_r ()
=> 0x131b4 <__sflush_r+32>:	lw	a3,8(a1)
0x00000000000131b6 in __sflush_r ()
=> 0x131b6 <__sflush_r+34>:	or	a5,a5,a4
0x00000000000131b8 in __sflush_r ()
=> 0x131b8 <__sflush_r+36>:	sh	a5,16(a1)
0x00000000000131bc in __sflush_r ()
=> 0x131bc <__sflush_r+40>:	blez	a3,0x132bc <__sflush_r+296>
0x00000000000132bc in __sflush_r ()
=> 0x132bc <__sflush_r+296>:	lw	a4,112(a1)
0x00000000000132be in __sflush_r ()
=> 0x132be <__sflush_r+298>:	bgtz	a4,0x131c0 <__sflush_r+44>
0x00000000000132c2 in __sflush_r ()
=> 0x132c2 <__sflush_r+302>:	j	0x13250 <__sflush_r+188>
0x0000000000013250 in __sflush_r ()
=> 0x13250 <__sflush_r+188>:	li	a0,0
0x0000000000013252 in __sflush_r ()
=> 0x13252 <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000013254 in __sflush_r ()
=> 0x13254 <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000013256 in __sflush_r ()
=> 0x13256 <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000013258 in __sflush_r ()
=> 0x13258 <__sflush_r+196>:	ld	s2,16(sp)
0x000000000001325a in __sflush_r ()
=> 0x1325a <__sflush_r+198>:	ld	s3,8(sp)
0x000000000001325c in __sflush_r ()
=> 0x1325c <__sflush_r+200>:	addi	sp,sp,48
0x000000000001325e in __sflush_r ()
=> 0x1325e <__sflush_r+202>:	ret
0x0000000000019a98 in _fclose_r.part.0 ()
=> 0x19a98 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019a9a in _fclose_r.part.0 ()
=> 0x19a9a <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019a9c in _fclose_r.part.0 ()
=> 0x19a9c <_fclose_r.part.0+22>:	beqz	a5,0x19aa8 <_fclose_r.part.0+34>
0x0000000000019a9e in _fclose_r.part.0 ()
=> 0x19a9e <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019aa0 in _fclose_r.part.0 ()
=> 0x19aa0 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019aa2 in _fclose_r.part.0 ()
=> 0x19aa2 <_fclose_r.part.0+28>:	jalr	a5
0x0000000000016d9c in __sclose ()
=> 0x16d9c <__sclose>:	lh	a1,18(a1)
0x0000000000016da0 in __sclose ()
=> 0x16da0 <__sclose+4>:	j	0x19a4a <_close_r>
0x0000000000019a4a in _close_r ()
=> 0x19a4a <_close_r>:	addi	sp,sp,-32
0x0000000000019a4c in _close_r ()
=> 0x19a4c <_close_r+2>:	sd	s0,16(sp)
0x0000000000019a4e in _close_r ()
=> 0x19a4e <_close_r+4>:	sd	s1,8(sp)
0x0000000000019a50 in _close_r ()
=> 0x19a50 <_close_r+6>:	mv	s0,a0
0x0000000000019a52 in _close_r ()
=> 0x19a52 <_close_r+8>:	mv	a0,a1
0x0000000000019a54 in _close_r ()
=> 0x19a54 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019a56 in _close_r ()
=> 0x19a56 <_close_r+12>:	sw	zero,1936(gp)
0x0000000000019a5a in _close_r ()
=> 0x19a5a <_close_r+16>:	jal	ra,0x1b8a8 <_close>
0x000000000001b8a8 in _close ()
=> 0x1b8a8 <_close>:	addi	sp,sp,-16
0x000000000001b8aa in _close ()
=> 0x1b8aa <_close+2>:	sd	ra,8(sp)
0x000000000001b8ac in _close ()
=> 0x1b8ac <_close+4>:	sd	s0,0(sp)
0x000000000001b8ae in _close ()
=> 0x1b8ae <_close+6>:	li	a7,57
0x000000000001b8b2 in _close ()
=> 0x1b8b2 <_close+10>:	ecall
0x000000000001b8b6 in _close ()
=> 0x1b8b6 <_close+14>:	mv	s0,a0
0x000000000001b8b8 in _close ()
=> 0x1b8b8 <_close+16>:	bltz	a0,0x1b8c6 <_close+30>
0x000000000001b8bc in _close ()
=> 0x1b8bc <_close+20>:	sext.w	a0,a0
0x000000000001b8be in _close ()
=> 0x1b8be <_close+22>:	ld	ra,8(sp)
0x000000000001b8c0 in _close ()
=> 0x1b8c0 <_close+24>:	ld	s0,0(sp)
0x000000000001b8c2 in _close ()
=> 0x1b8c2 <_close+26>:	addi	sp,sp,16
0x000000000001b8c4 in _close ()
=> 0x1b8c4 <_close+28>:	ret
0x0000000000019a5e in _close_r ()
=> 0x19a5e <_close_r+20>:	li	a5,-1
0x0000000000019a60 in _close_r ()
=> 0x19a60 <_close_r+22>:	beq	a0,a5,0x19a6e <_close_r+36>
0x0000000000019a64 in _close_r ()
=> 0x19a64 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019a66 in _close_r ()
=> 0x19a66 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019a68 in _close_r ()
=> 0x19a68 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019a6a in _close_r ()
=> 0x19a6a <_close_r+32>:	addi	sp,sp,32
0x0000000000019a6c in _close_r ()
=> 0x19a6c <_close_r+34>:	ret
0x0000000000019aa4 in _fclose_r.part.0 ()
=> 0x19aa4 <_fclose_r.part.0+30>:	bltz	a0,0x19af0 <_fclose_r.part.0+106>
0x0000000000019aa8 in _fclose_r.part.0 ()
=> 0x19aa8 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019aac in _fclose_r.part.0 ()
=> 0x19aac <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019ab0 in _fclose_r.part.0 ()
=> 0x19ab0 <_fclose_r.part.0+42>:	bnez	a5,0x19afc <_fclose_r.part.0+118>
0x0000000000019ab2 in _fclose_r.part.0 ()
=> 0x19ab2 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019ab4 in _fclose_r.part.0 ()
=> 0x19ab4 <_fclose_r.part.0+46>:	beqz	a1,0x19ac8 <_fclose_r.part.0+66>
0x0000000000019ac8 in _fclose_r.part.0 ()
=> 0x19ac8 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019aca in _fclose_r.part.0 ()
=> 0x19aca <_fclose_r.part.0+68>:	beqz	a1,0x19ad6 <_fclose_r.part.0+80>
0x0000000000019ad6 in _fclose_r.part.0 ()
=> 0x19ad6 <_fclose_r.part.0+80>:	jal	ra,0x1360a <__sfp_lock_acquire>
0x000000000001360a in __sfp_lock_acquire ()
=> 0x1360a <__sfp_lock_acquire>:	ret
0x0000000000019ada in _fclose_r.part.0 ()
=> 0x19ada <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019ade in _fclose_r.part.0 ()
=> 0x19ade <_fclose_r.part.0+88>:	jal	ra,0x1360c <__sfp_lock_release>
0x000000000001360c in __sfp_lock_release ()
=> 0x1360c <__sfp_lock_release>:	ret
0x0000000000019ae2 in _fclose_r.part.0 ()
=> 0x19ae2 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019ae4 in _fclose_r.part.0 ()
=> 0x19ae4 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019ae6 in _fclose_r.part.0 ()
=> 0x19ae6 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019ae8 in _fclose_r.part.0 ()
=> 0x19ae8 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019aea in _fclose_r.part.0 ()
=> 0x19aea <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019aec in _fclose_r.part.0 ()
=> 0x19aec <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019aee in _fclose_r.part.0 ()
=> 0x19aee <_fclose_r.part.0+104>:	ret
0x0000000000013a5a in _fwalk_reent ()
=> 0x13a5a <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013a5e in _fwalk_reent ()
=> 0x13a5e <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013a60 in _fwalk_reent ()
=> 0x13a60 <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013a64 in _fwalk_reent ()
=> 0x13a64 <_fwalk_reent+100>:	bne	s1,s0,0x13a44 <_fwalk_reent+68>
0x0000000000013a44 in _fwalk_reent ()
=> 0x13a44 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013a48 in _fwalk_reent ()
=> 0x13a48 <_fwalk_reent+72>:	bgeu	s7,a5,0x13a60 <_fwalk_reent+96>
0x0000000000013a4c in _fwalk_reent ()
=> 0x13a4c <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013a50 in _fwalk_reent ()
=> 0x13a50 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013a52 in _fwalk_reent ()
=> 0x13a52 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013a54 in _fwalk_reent ()
=> 0x13a54 <_fwalk_reent+84>:	beq	a5,s3,0x13a60 <_fwalk_reent+96>
0x0000000000013a58 in _fwalk_reent ()
=> 0x13a58 <_fwalk_reent+88>:	jalr	s4
0x0000000000019b06 in _fclose_r ()
=> 0x19b06 <_fclose_r>:	beqz	a1,0x19b40 <_fclose_r+58>
0x0000000000019b08 in _fclose_r ()
=> 0x19b08 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019b0a in _fclose_r ()
=> 0x19b0a <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019b0c in _fclose_r ()
=> 0x19b0c <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019b0e in _fclose_r ()
=> 0x19b0e <_fclose_r+8>:	mv	s0,a0
0x0000000000019b10 in _fclose_r ()
=> 0x19b10 <_fclose_r+10>:	beqz	a0,0x19b16 <_fclose_r+16>
0x0000000000019b12 in _fclose_r ()
=> 0x19b12 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019b14 in _fclose_r ()
=> 0x19b14 <_fclose_r+14>:	beqz	a5,0x19b30 <_fclose_r+42>
0x0000000000019b16 in _fclose_r ()
=> 0x19b16 <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019b1a in _fclose_r ()
=> 0x19b1a <_fclose_r+20>:	bnez	a5,0x19b26 <_fclose_r+32>
0x0000000000019b26 in _fclose_r ()
=> 0x19b26 <_fclose_r+32>:	mv	a0,s0
0x0000000000019b28 in _fclose_r ()
=> 0x19b28 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019b2a in _fclose_r ()
=> 0x19b2a <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019b2c in _fclose_r ()
=> 0x19b2c <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019b2e in _fclose_r ()
=> 0x19b2e <_fclose_r+40>:	j	0x19a86 <_fclose_r.part.0>
0x0000000000019a86 in _fclose_r.part.0 ()
=> 0x19a86 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019a88 in _fclose_r.part.0 ()
=> 0x19a88 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019a8a in _fclose_r.part.0 ()
=> 0x19a8a <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019a8c in _fclose_r.part.0 ()
=> 0x19a8c <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019a8e in _fclose_r.part.0 ()
=> 0x19a8e <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019a90 in _fclose_r.part.0 ()
=> 0x19a90 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019a92 in _fclose_r.part.0 ()
=> 0x19a92 <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019a94 in _fclose_r.part.0 ()
=> 0x19a94 <_fclose_r.part.0+14>:	jal	ra,0x13194 <__sflush_r>
0x0000000000013194 in __sflush_r ()
=> 0x13194 <__sflush_r>:	lh	a5,16(a1)
0x0000000000013198 in __sflush_r ()
=> 0x13198 <__sflush_r+4>:	addi	sp,sp,-48
0x000000000001319a in __sflush_r ()
=> 0x1319a <__sflush_r+6>:	sd	s0,32(sp)
0x000000000001319c in __sflush_r ()
=> 0x1319c <__sflush_r+8>:	sd	s3,8(sp)
0x000000000001319e in __sflush_r ()
=> 0x1319e <__sflush_r+10>:	sd	ra,40(sp)
0x00000000000131a0 in __sflush_r ()
=> 0x131a0 <__sflush_r+12>:	sd	s1,24(sp)
0x00000000000131a2 in __sflush_r ()
=> 0x131a2 <__sflush_r+14>:	sd	s2,16(sp)
0x00000000000131a4 in __sflush_r ()
=> 0x131a4 <__sflush_r+16>:	andi	a3,a5,8
0x00000000000131a8 in __sflush_r ()
=> 0x131a8 <__sflush_r+20>:	mv	s0,a1
0x00000000000131aa in __sflush_r ()
=> 0x131aa <__sflush_r+22>:	mv	s3,a0
0x00000000000131ac in __sflush_r ()
=> 0x131ac <__sflush_r+24>:	bnez	a3,0x13260 <__sflush_r+204>
0x0000000000013260 in __sflush_r ()
=> 0x13260 <__sflush_r+204>:	ld	s2,24(a1)
0x0000000000013264 in __sflush_r ()
=> 0x13264 <__sflush_r+208>:	beqz	s2,0x13250 <__sflush_r+188>
0x0000000000013268 in __sflush_r ()
=> 0x13268 <__sflush_r+212>:	ld	s1,0(a1)
0x000000000001326a in __sflush_r ()
=> 0x1326a <__sflush_r+214>:	slli	a4,a5,0x30
0x000000000001326e in __sflush_r ()
=> 0x1326e <__sflush_r+218>:	srli	a4,a4,0x30
0x0000000000013270 in __sflush_r ()
=> 0x13270 <__sflush_r+220>:	andi	a4,a4,3
0x0000000000013272 in __sflush_r ()
=> 0x13272 <__sflush_r+222>:	sd	s2,0(a1)
0x0000000000013276 in __sflush_r ()
=> 0x13276 <__sflush_r+226>:	subw	s1,s1,s2
0x000000000001327a in __sflush_r ()
=> 0x1327a <__sflush_r+230>:	li	a5,0
0x000000000001327c in __sflush_r ()
=> 0x1327c <__sflush_r+232>:	bnez	a4,0x13280 <__sflush_r+236>
0x0000000000013280 in __sflush_r ()
=> 0x13280 <__sflush_r+236>:	sw	a5,12(s0)
0x0000000000013282 in __sflush_r ()
=> 0x13282 <__sflush_r+238>:	bgtz	s1,0x1328e <__sflush_r+250>
0x0000000000013286 in __sflush_r ()
=> 0x13286 <__sflush_r+242>:	j	0x13250 <__sflush_r+188>
0x0000000000013250 in __sflush_r ()
=> 0x13250 <__sflush_r+188>:	li	a0,0
0x0000000000013252 in __sflush_r ()
=> 0x13252 <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000013254 in __sflush_r ()
=> 0x13254 <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000013256 in __sflush_r ()
=> 0x13256 <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000013258 in __sflush_r ()
=> 0x13258 <__sflush_r+196>:	ld	s2,16(sp)
0x000000000001325a in __sflush_r ()
=> 0x1325a <__sflush_r+198>:	ld	s3,8(sp)
0x000000000001325c in __sflush_r ()
=> 0x1325c <__sflush_r+200>:	addi	sp,sp,48
0x000000000001325e in __sflush_r ()
=> 0x1325e <__sflush_r+202>:	ret
0x0000000000019a98 in _fclose_r.part.0 ()
=> 0x19a98 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019a9a in _fclose_r.part.0 ()
=> 0x19a9a <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019a9c in _fclose_r.part.0 ()
=> 0x19a9c <_fclose_r.part.0+22>:	beqz	a5,0x19aa8 <_fclose_r.part.0+34>
0x0000000000019a9e in _fclose_r.part.0 ()
=> 0x19a9e <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019aa0 in _fclose_r.part.0 ()
=> 0x19aa0 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019aa2 in _fclose_r.part.0 ()
=> 0x19aa2 <_fclose_r.part.0+28>:	jalr	a5
0x0000000000016d9c in __sclose ()
=> 0x16d9c <__sclose>:	lh	a1,18(a1)
0x0000000000016da0 in __sclose ()
=> 0x16da0 <__sclose+4>:	j	0x19a4a <_close_r>
0x0000000000019a4a in _close_r ()
=> 0x19a4a <_close_r>:	addi	sp,sp,-32
0x0000000000019a4c in _close_r ()
=> 0x19a4c <_close_r+2>:	sd	s0,16(sp)
0x0000000000019a4e in _close_r ()
=> 0x19a4e <_close_r+4>:	sd	s1,8(sp)
0x0000000000019a50 in _close_r ()
=> 0x19a50 <_close_r+6>:	mv	s0,a0
0x0000000000019a52 in _close_r ()
=> 0x19a52 <_close_r+8>:	mv	a0,a1
0x0000000000019a54 in _close_r ()
=> 0x19a54 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019a56 in _close_r ()
=> 0x19a56 <_close_r+12>:	sw	zero,1936(gp)
0x0000000000019a5a in _close_r ()
=> 0x19a5a <_close_r+16>:	jal	ra,0x1b8a8 <_close>
0x000000000001b8a8 in _close ()
=> 0x1b8a8 <_close>:	addi	sp,sp,-16
0x000000000001b8aa in _close ()
=> 0x1b8aa <_close+2>:	sd	ra,8(sp)
0x000000000001b8ac in _close ()
=> 0x1b8ac <_close+4>:	sd	s0,0(sp)
0x000000000001b8ae in _close ()
=> 0x1b8ae <_close+6>:	li	a7,57
0x000000000001b8b2 in _close ()
=> 0x1b8b2 <_close+10>:	ecall
0x000000000001b8b6 in _close ()
=> 0x1b8b6 <_close+14>:	mv	s0,a0
0x000000000001b8b8 in _close ()
=> 0x1b8b8 <_close+16>:	bltz	a0,0x1b8c6 <_close+30>
0x000000000001b8bc in _close ()
=> 0x1b8bc <_close+20>:	sext.w	a0,a0
0x000000000001b8be in _close ()
=> 0x1b8be <_close+22>:	ld	ra,8(sp)
0x000000000001b8c0 in _close ()
=> 0x1b8c0 <_close+24>:	ld	s0,0(sp)
0x000000000001b8c2 in _close ()
=> 0x1b8c2 <_close+26>:	addi	sp,sp,16
0x000000000001b8c4 in _close ()
=> 0x1b8c4 <_close+28>:	ret
0x0000000000019a5e in _close_r ()
=> 0x19a5e <_close_r+20>:	li	a5,-1
0x0000000000019a60 in _close_r ()
=> 0x19a60 <_close_r+22>:	beq	a0,a5,0x19a6e <_close_r+36>
0x0000000000019a64 in _close_r ()
=> 0x19a64 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019a66 in _close_r ()
=> 0x19a66 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019a68 in _close_r ()
=> 0x19a68 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019a6a in _close_r ()
=> 0x19a6a <_close_r+32>:	addi	sp,sp,32
0x0000000000019a6c in _close_r ()
=> 0x19a6c <_close_r+34>:	ret
0x0000000000019aa4 in _fclose_r.part.0 ()
=> 0x19aa4 <_fclose_r.part.0+30>:	bltz	a0,0x19af0 <_fclose_r.part.0+106>
0x0000000000019aa8 in _fclose_r.part.0 ()
=> 0x19aa8 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019aac in _fclose_r.part.0 ()
=> 0x19aac <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019ab0 in _fclose_r.part.0 ()
=> 0x19ab0 <_fclose_r.part.0+42>:	bnez	a5,0x19afc <_fclose_r.part.0+118>
0x0000000000019afc in _fclose_r.part.0 ()
=> 0x19afc <_fclose_r.part.0+118>:	ld	a1,24(s0)
0x0000000000019afe in _fclose_r.part.0 ()
=> 0x19afe <_fclose_r.part.0+120>:	mv	a0,s1
0x0000000000019b00 in _fclose_r.part.0 ()
=> 0x19b00 <_fclose_r.part.0+122>:	jal	ra,0x13732 <_free_r>
0x0000000000013732 in _free_r ()
=> 0x13732 <_free_r>:	beqz	a1,0x1381c <_free_r+234>
0x0000000000013734 in _free_r ()
=> 0x13734 <_free_r+2>:	addi	sp,sp,-32
0x0000000000013736 in _free_r ()
=> 0x13736 <_free_r+4>:	sd	s0,16(sp)
0x0000000000013738 in _free_r ()
=> 0x13738 <_free_r+6>:	sd	s1,8(sp)
0x000000000001373a in _free_r ()
=> 0x1373a <_free_r+8>:	mv	s0,a1
0x000000000001373c in _free_r ()
=> 0x1373c <_free_r+10>:	mv	s1,a0
0x000000000001373e in _free_r ()
=> 0x1373e <_free_r+12>:	sd	ra,24(sp)
0x0000000000013740 in _free_r ()
=> 0x13740 <_free_r+14>:	jal	ra,0x11332 <__malloc_lock>
0x0000000000011332 in __malloc_lock ()
=> 0x11332 <__malloc_lock>:	ret
0x0000000000013744 in _free_r ()
=> 0x13744 <_free_r+18>:	ld	a0,-8(s0)
0x0000000000013748 in _free_r ()
=> 0x13748 <_free_r+22>:	addi	a4,s0,-16
0x000000000001374c in _free_r ()
=> 0x1374c <_free_r+26>:	lui	a1,0x1e
0x000000000001374e in _free_r ()
=> 0x1374e <_free_r+28>:	andi	a5,a0,-2
0x0000000000013752 in _free_r ()
=> 0x13752 <_free_r+32>:	add	a2,a4,a5
0x0000000000013756 in _free_r ()
=> 0x13756 <_free_r+36>:	addi	a1,a1,1896
0x000000000001375a in _free_r ()
=> 0x1375a <_free_r+40>:	ld	a3,8(a2)
0x000000000001375c in _free_r ()
=> 0x1375c <_free_r+42>:	ld	a6,16(a1)
0x0000000000013760 in _free_r ()
=> 0x13760 <_free_r+46>:	andi	a3,a3,-4
0x0000000000013762 in _free_r ()
=> 0x13762 <_free_r+48>:	beq	a6,a2,0x138a2 <_free_r+368>
0x00000000000138a2 in _free_r ()
=> 0x138a2 <_free_r+368>:	andi	a0,a0,1
0x00000000000138a4 in _free_r ()
=> 0x138a4 <_free_r+370>:	add	a5,a5,a3
0x00000000000138a6 in _free_r ()
=> 0x138a6 <_free_r+372>:	bnez	a0,0x138b8 <_free_r+390>
0x00000000000138a8 in _free_r ()
=> 0x138a8 <_free_r+374>:	ld	a0,-16(s0)
0x00000000000138ac in _free_r ()
=> 0x138ac <_free_r+378>:	sub	a4,a4,a0
0x00000000000138ae in _free_r ()
=> 0x138ae <_free_r+380>:	ld	a3,24(a4)
0x00000000000138b0 in _free_r ()
=> 0x138b0 <_free_r+382>:	ld	a2,16(a4)
0x00000000000138b2 in _free_r ()
=> 0x138b2 <_free_r+384>:	add	a5,a5,a0
0x00000000000138b4 in _free_r ()
=> 0x138b4 <_free_r+386>:	sd	a3,24(a2)
0x00000000000138b6 in _free_r ()
=> 0x138b6 <_free_r+388>:	sd	a2,16(a3)
0x00000000000138b8 in _free_r ()
=> 0x138b8 <_free_r+390>:	ori	a2,a5,1
0x00000000000138bc in _free_r ()
=> 0x138bc <_free_r+394>:	ld	a3,1888(gp)
0x00000000000138c0 in _free_r ()
=> 0x138c0 <_free_r+398>:	sd	a2,8(a4)
0x00000000000138c2 in _free_r ()
=> 0x138c2 <_free_r+400>:	sd	a4,16(a1)
0x00000000000138c4 in _free_r ()
=> 0x138c4 <_free_r+402>:	bltu	a5,a3,0x137e0 <_free_r+174>
0x00000000000138c8 in _free_r ()
=> 0x138c8 <_free_r+406>:	ld	a1,1920(gp)
0x00000000000138cc in _free_r ()
=> 0x138cc <_free_r+410>:	mv	a0,s1
0x00000000000138ce in _free_r ()
=> 0x138ce <_free_r+412>:	jal	ra,0x1365e <_malloc_trim_r>
0x000000000001365e in _malloc_trim_r ()
=> 0x1365e <_malloc_trim_r>:	addi	sp,sp,-48
0x0000000000013660 in _malloc_trim_r ()
=> 0x13660 <_malloc_trim_r+2>:	sd	s3,8(sp)
0x0000000000013662 in _malloc_trim_r ()
=> 0x13662 <_malloc_trim_r+4>:	lui	s3,0x1e
0x0000000000013664 in _malloc_trim_r ()
=> 0x13664 <_malloc_trim_r+6>:	sd	s0,32(sp)
0x0000000000013666 in _malloc_trim_r ()
=> 0x13666 <_malloc_trim_r+8>:	sd	s1,24(sp)
0x0000000000013668 in _malloc_trim_r ()
=> 0x13668 <_malloc_trim_r+10>:	sd	s2,16(sp)
0x000000000001366a in _malloc_trim_r ()
=> 0x1366a <_malloc_trim_r+12>:	sd	s4,0(sp)
0x000000000001366c in _malloc_trim_r ()
=> 0x1366c <_malloc_trim_r+14>:	sd	ra,40(sp)
0x000000000001366e in _malloc_trim_r ()
=> 0x1366e <_malloc_trim_r+16>:	mv	s4,a1
0x0000000000013670 in _malloc_trim_r ()
=> 0x13670 <_malloc_trim_r+18>:	mv	s2,a0
0x0000000000013672 in _malloc_trim_r ()
=> 0x13672 <_malloc_trim_r+20>:	addi	s3,s3,1896
0x0000000000013676 in _malloc_trim_r ()
=> 0x13676 <_malloc_trim_r+24>:	jal	ra,0x11332 <__malloc_lock>
0x0000000000011332 in __malloc_lock ()
=> 0x11332 <__malloc_lock>:	ret
0x000000000001367a in _malloc_trim_r ()
=> 0x1367a <_malloc_trim_r+28>:	ld	a4,16(s3)
0x000000000001367e in _malloc_trim_r ()
=> 0x1367e <_malloc_trim_r+32>:	lui	a5,0x1
0x0000000000013680 in _malloc_trim_r ()
=> 0x13680 <_malloc_trim_r+34>:	addi	s0,a5,-33
0x0000000000013684 in _malloc_trim_r ()
=> 0x13684 <_malloc_trim_r+38>:	ld	s1,8(a4)
0x0000000000013686 in _malloc_trim_r ()
=> 0x13686 <_malloc_trim_r+40>:	sub	s0,s0,s4
0x000000000001368a in _malloc_trim_r ()
=> 0x1368a <_malloc_trim_r+44>:	andi	s1,s1,-4
0x000000000001368c in _malloc_trim_r ()
=> 0x1368c <_malloc_trim_r+46>:	add	s0,s0,s1
0x000000000001368e in _malloc_trim_r ()
=> 0x1368e <_malloc_trim_r+48>:	srli	s0,s0,0xc
0x0000000000013690 in _malloc_trim_r ()
=> 0x13690 <_malloc_trim_r+50>:	addi	s0,s0,-1
0x0000000000013692 in _malloc_trim_r ()
=> 0x13692 <_malloc_trim_r+52>:	slli	s0,s0,0xc
0x0000000000013694 in _malloc_trim_r ()
=> 0x13694 <_malloc_trim_r+54>:	blt	s0,a5,0x136aa <_malloc_trim_r+76>
0x0000000000013698 in _malloc_trim_r ()
=> 0x13698 <_malloc_trim_r+58>:	li	a1,0
0x000000000001369a in _malloc_trim_r ()
=> 0x1369a <_malloc_trim_r+60>:	mv	a0,s2
0x000000000001369c in _malloc_trim_r ()
=> 0x1369c <_malloc_trim_r+62>:	jal	ra,0x11384 <_sbrk_r>
0x0000000000011384 in _sbrk_r ()
=> 0x11384 <_sbrk_r>:	addi	sp,sp,-32
0x0000000000011386 in _sbrk_r ()
=> 0x11386 <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000011388 in _sbrk_r ()
=> 0x11388 <_sbrk_r+4>:	sd	s1,8(sp)
0x000000000001138a in _sbrk_r ()
=> 0x1138a <_sbrk_r+6>:	mv	s0,a0
0x000000000001138c in _sbrk_r ()
=> 0x1138c <_sbrk_r+8>:	mv	a0,a1
0x000000000001138e in _sbrk_r ()
=> 0x1138e <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000011390 in _sbrk_r ()
=> 0x11390 <_sbrk_r+12>:	sw	zero,1936(gp)
0x0000000000011394 in _sbrk_r ()
=> 0x11394 <_sbrk_r+16>:	jal	ra,0x1b9cc <_sbrk>
0x000000000001b9cc in _sbrk ()
=> 0x1b9cc <_sbrk>:	ld	a4,1944(gp)
0x000000000001b9d0 in _sbrk ()
=> 0x1b9d0 <_sbrk+4>:	addi	sp,sp,-16
0x000000000001b9d2 in _sbrk ()
=> 0x1b9d2 <_sbrk+6>:	sd	ra,8(sp)
0x000000000001b9d4 in _sbrk ()
=> 0x1b9d4 <_sbrk+8>:	mv	a5,a0
0x000000000001b9d6 in _sbrk ()
=> 0x1b9d6 <_sbrk+10>:	bnez	a4,0x1b9ee <_sbrk+34>
0x000000000001b9ee in _sbrk ()
=> 0x1b9ee <_sbrk+34>:	li	a7,214
0x000000000001b9f2 in _sbrk ()
=> 0x1b9f2 <_sbrk+38>:	add	a0,a5,a4
0x000000000001b9f6 in _sbrk ()
=> 0x1b9f6 <_sbrk+42>:	ecall
0x000000000001b9fa in _sbrk ()
=> 0x1b9fa <_sbrk+46>:	ld	a4,1944(gp)
0x000000000001b9fe in _sbrk ()
=> 0x1b9fe <_sbrk+50>:	add	a5,a5,a4
0x000000000001ba00 in _sbrk ()
=> 0x1ba00 <_sbrk+52>:	bne	a0,a5,0x1ba10 <_sbrk+68>
0x000000000001ba04 in _sbrk ()
=> 0x1ba04 <_sbrk+56>:	ld	ra,8(sp)
0x000000000001ba06 in _sbrk ()
=> 0x1ba06 <_sbrk+58>:	sd	a0,1944(gp)
0x000000000001ba0a in _sbrk ()
=> 0x1ba0a <_sbrk+62>:	mv	a0,a4
0x000000000001ba0c in _sbrk ()
=> 0x1ba0c <_sbrk+64>:	addi	sp,sp,16
0x000000000001ba0e in _sbrk ()
=> 0x1ba0e <_sbrk+66>:	ret
0x0000000000011398 in _sbrk_r ()
=> 0x11398 <_sbrk_r+20>:	li	a5,-1
0x000000000001139a in _sbrk_r ()
=> 0x1139a <_sbrk_r+22>:	beq	a0,a5,0x113a8 <_sbrk_r+36>
0x000000000001139e in _sbrk_r ()
=> 0x1139e <_sbrk_r+26>:	ld	ra,24(sp)
0x00000000000113a0 in _sbrk_r ()
=> 0x113a0 <_sbrk_r+28>:	ld	s0,16(sp)
0x00000000000113a2 in _sbrk_r ()
=> 0x113a2 <_sbrk_r+30>:	ld	s1,8(sp)
0x00000000000113a4 in _sbrk_r ()
=> 0x113a4 <_sbrk_r+32>:	addi	sp,sp,32
0x00000000000113a6 in _sbrk_r ()
=> 0x113a6 <_sbrk_r+34>:	ret
0x00000000000136a0 in _malloc_trim_r ()
=> 0x136a0 <_malloc_trim_r+66>:	ld	a5,16(s3)
0x00000000000136a4 in _malloc_trim_r ()
=> 0x136a4 <_malloc_trim_r+70>:	add	a5,a5,s1
0x00000000000136a6 in _malloc_trim_r ()
=> 0x136a6 <_malloc_trim_r+72>:	beq	a0,a5,0x136c2 <_malloc_trim_r+100>
0x00000000000136c2 in _malloc_trim_r ()
=> 0x136c2 <_malloc_trim_r+100>:	neg	a1,s0
0x00000000000136c6 in _malloc_trim_r ()
=> 0x136c6 <_malloc_trim_r+104>:	mv	a0,s2
0x00000000000136c8 in _malloc_trim_r ()
=> 0x136c8 <_malloc_trim_r+106>:	jal	ra,0x11384 <_sbrk_r>
0x0000000000011384 in _sbrk_r ()
=> 0x11384 <_sbrk_r>:	addi	sp,sp,-32
0x0000000000011386 in _sbrk_r ()
=> 0x11386 <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000011388 in _sbrk_r ()
=> 0x11388 <_sbrk_r+4>:	sd	s1,8(sp)
0x000000000001138a in _sbrk_r ()
=> 0x1138a <_sbrk_r+6>:	mv	s0,a0
0x000000000001138c in _sbrk_r ()
=> 0x1138c <_sbrk_r+8>:	mv	a0,a1
0x000000000001138e in _sbrk_r ()
=> 0x1138e <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000011390 in _sbrk_r ()
=> 0x11390 <_sbrk_r+12>:	sw	zero,1936(gp)
0x0000000000011394 in _sbrk_r ()
=> 0x11394 <_sbrk_r+16>:	jal	ra,0x1b9cc <_sbrk>
0x000000000001b9cc in _sbrk ()
=> 0x1b9cc <_sbrk>:	ld	a4,1944(gp)
0x000000000001b9d0 in _sbrk ()
=> 0x1b9d0 <_sbrk+4>:	addi	sp,sp,-16
0x000000000001b9d2 in _sbrk ()
=> 0x1b9d2 <_sbrk+6>:	sd	ra,8(sp)
0x000000000001b9d4 in _sbrk ()
=> 0x1b9d4 <_sbrk+8>:	mv	a5,a0
0x000000000001b9d6 in _sbrk ()
=> 0x1b9d6 <_sbrk+10>:	bnez	a4,0x1b9ee <_sbrk+34>
0x000000000001b9ee in _sbrk ()
=> 0x1b9ee <_sbrk+34>:	li	a7,214
0x000000000001b9f2 in _sbrk ()
=> 0x1b9f2 <_sbrk+38>:	add	a0,a5,a4
0x000000000001b9f6 in _sbrk ()
=> 0x1b9f6 <_sbrk+42>:	ecall
0x000000000001b9fa in _sbrk ()
=> 0x1b9fa <_sbrk+46>:	ld	a4,1944(gp)
0x000000000001b9fe in _sbrk ()
=> 0x1b9fe <_sbrk+50>:	add	a5,a5,a4
0x000000000001ba00 in _sbrk ()
=> 0x1ba00 <_sbrk+52>:	bne	a0,a5,0x1ba10 <_sbrk+68>
0x000000000001ba04 in _sbrk ()
=> 0x1ba04 <_sbrk+56>:	ld	ra,8(sp)
0x000000000001ba06 in _sbrk ()
=> 0x1ba06 <_sbrk+58>:	sd	a0,1944(gp)
0x000000000001ba0a in _sbrk ()
=> 0x1ba0a <_sbrk+62>:	mv	a0,a4
0x000000000001ba0c in _sbrk ()
=> 0x1ba0c <_sbrk+64>:	addi	sp,sp,16
0x000000000001ba0e in _sbrk ()
=> 0x1ba0e <_sbrk+66>:	ret
0x0000000000011398 in _sbrk_r ()
=> 0x11398 <_sbrk_r+20>:	li	a5,-1
0x000000000001139a in _sbrk_r ()
=> 0x1139a <_sbrk_r+22>:	beq	a0,a5,0x113a8 <_sbrk_r+36>
0x000000000001139e in _sbrk_r ()
=> 0x1139e <_sbrk_r+26>:	ld	ra,24(sp)
0x00000000000113a0 in _sbrk_r ()
=> 0x113a0 <_sbrk_r+28>:	ld	s0,16(sp)
0x00000000000113a2 in _sbrk_r ()
=> 0x113a2 <_sbrk_r+30>:	ld	s1,8(sp)
0x00000000000113a4 in _sbrk_r ()
=> 0x113a4 <_sbrk_r+32>:	addi	sp,sp,32
0x00000000000113a6 in _sbrk_r ()
=> 0x113a6 <_sbrk_r+34>:	ret
0x00000000000136cc in _malloc_trim_r ()
=> 0x136cc <_malloc_trim_r+110>:	li	a5,-1
0x00000000000136ce in _malloc_trim_r ()
=> 0x136ce <_malloc_trim_r+112>:	beq	a0,a5,0x13706 <_malloc_trim_r+168>
0x00000000000136d2 in _malloc_trim_r ()
=> 0x136d2 <_malloc_trim_r+116>:	lui	a5,0x1f
0x00000000000136d6 in _malloc_trim_r ()
=> 0x136d6 <_malloc_trim_r+120>:	addi	a5,a5,488
0x00000000000136da in _malloc_trim_r ()
=> 0x136da <_malloc_trim_r+124>:	lw	a4,0(a5)
0x00000000000136dc in _malloc_trim_r ()
=> 0x136dc <_malloc_trim_r+126>:	ld	a3,16(s3)
0x00000000000136e0 in _malloc_trim_r ()
=> 0x136e0 <_malloc_trim_r+130>:	sub	s1,s1,s0
0x00000000000136e2 in _malloc_trim_r ()
=> 0x136e2 <_malloc_trim_r+132>:	ori	s1,s1,1
0x00000000000136e6 in _malloc_trim_r ()
=> 0x136e6 <_malloc_trim_r+136>:	subw	s0,a4,s0
0x00000000000136ea in _malloc_trim_r ()
=> 0x136ea <_malloc_trim_r+140>:	mv	a0,s2
0x00000000000136ec in _malloc_trim_r ()
=> 0x136ec <_malloc_trim_r+142>:	sd	s1,8(a3)
0x00000000000136ee in _malloc_trim_r ()
=> 0x136ee <_malloc_trim_r+144>:	sw	s0,0(a5)
0x00000000000136f0 in _malloc_trim_r ()
=> 0x136f0 <_malloc_trim_r+146>:	jal	ra,0x11334 <__malloc_unlock>
0x0000000000011334 in __malloc_unlock ()
=> 0x11334 <__malloc_unlock>:	ret
0x00000000000136f4 in _malloc_trim_r ()
=> 0x136f4 <_malloc_trim_r+150>:	ld	ra,40(sp)
0x00000000000136f6 in _malloc_trim_r ()
=> 0x136f6 <_malloc_trim_r+152>:	ld	s0,32(sp)
0x00000000000136f8 in _malloc_trim_r ()
=> 0x136f8 <_malloc_trim_r+154>:	ld	s1,24(sp)
0x00000000000136fa in _malloc_trim_r ()
=> 0x136fa <_malloc_trim_r+156>:	ld	s2,16(sp)
0x00000000000136fc in _malloc_trim_r ()
=> 0x136fc <_malloc_trim_r+158>:	ld	s3,8(sp)
0x00000000000136fe in _malloc_trim_r ()
=> 0x136fe <_malloc_trim_r+160>:	ld	s4,0(sp)
0x0000000000013700 in _malloc_trim_r ()
=> 0x13700 <_malloc_trim_r+162>:	li	a0,1
0x0000000000013702 in _malloc_trim_r ()
=> 0x13702 <_malloc_trim_r+164>:	addi	sp,sp,48
0x0000000000013704 in _malloc_trim_r ()
=> 0x13704 <_malloc_trim_r+166>:	ret
0x00000000000138d2 in _free_r ()
=> 0x138d2 <_free_r+416>:	j	0x137e0 <_free_r+174>
0x00000000000137e0 in _free_r ()
=> 0x137e0 <_free_r+174>:	ld	s0,16(sp)
0x00000000000137e2 in _free_r ()
=> 0x137e2 <_free_r+176>:	ld	ra,24(sp)
0x00000000000137e4 in _free_r ()
=> 0x137e4 <_free_r+178>:	mv	a0,s1
0x00000000000137e6 in _free_r ()
=> 0x137e6 <_free_r+180>:	ld	s1,8(sp)
0x00000000000137e8 in _free_r ()
=> 0x137e8 <_free_r+182>:	addi	sp,sp,32
0x00000000000137ea in _free_r ()
=> 0x137ea <_free_r+184>:	j	0x11334 <__malloc_unlock>
0x0000000000011334 in __malloc_unlock ()
=> 0x11334 <__malloc_unlock>:	ret
0x0000000000019b04 in _fclose_r.part.0 ()
=> 0x19b04 <_fclose_r.part.0+126>:	j	0x19ab2 <_fclose_r.part.0+44>
0x0000000000019ab2 in _fclose_r.part.0 ()
=> 0x19ab2 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019ab4 in _fclose_r.part.0 ()
=> 0x19ab4 <_fclose_r.part.0+46>:	beqz	a1,0x19ac8 <_fclose_r.part.0+66>
0x0000000000019ac8 in _fclose_r.part.0 ()
=> 0x19ac8 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019aca in _fclose_r.part.0 ()
=> 0x19aca <_fclose_r.part.0+68>:	beqz	a1,0x19ad6 <_fclose_r.part.0+80>
0x0000000000019ad6 in _fclose_r.part.0 ()
=> 0x19ad6 <_fclose_r.part.0+80>:	jal	ra,0x1360a <__sfp_lock_acquire>
0x000000000001360a in __sfp_lock_acquire ()
=> 0x1360a <__sfp_lock_acquire>:	ret
0x0000000000019ada in _fclose_r.part.0 ()
=> 0x19ada <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019ade in _fclose_r.part.0 ()
=> 0x19ade <_fclose_r.part.0+88>:	jal	ra,0x1360c <__sfp_lock_release>
0x000000000001360c in __sfp_lock_release ()
=> 0x1360c <__sfp_lock_release>:	ret
0x0000000000019ae2 in _fclose_r.part.0 ()
=> 0x19ae2 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019ae4 in _fclose_r.part.0 ()
=> 0x19ae4 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019ae6 in _fclose_r.part.0 ()
=> 0x19ae6 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019ae8 in _fclose_r.part.0 ()
=> 0x19ae8 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019aea in _fclose_r.part.0 ()
=> 0x19aea <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019aec in _fclose_r.part.0 ()
=> 0x19aec <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019aee in _fclose_r.part.0 ()
=> 0x19aee <_fclose_r.part.0+104>:	ret
0x0000000000013a5a in _fwalk_reent ()
=> 0x13a5a <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013a5e in _fwalk_reent ()
=> 0x13a5e <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013a60 in _fwalk_reent ()
=> 0x13a60 <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013a64 in _fwalk_reent ()
=> 0x13a64 <_fwalk_reent+100>:	bne	s1,s0,0x13a44 <_fwalk_reent+68>
0x0000000000013a44 in _fwalk_reent ()
=> 0x13a44 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013a48 in _fwalk_reent ()
=> 0x13a48 <_fwalk_reent+72>:	bgeu	s7,a5,0x13a60 <_fwalk_reent+96>
0x0000000000013a4c in _fwalk_reent ()
=> 0x13a4c <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013a50 in _fwalk_reent ()
=> 0x13a50 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013a52 in _fwalk_reent ()
=> 0x13a52 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013a54 in _fwalk_reent ()
=> 0x13a54 <_fwalk_reent+84>:	beq	a5,s3,0x13a60 <_fwalk_reent+96>
0x0000000000013a58 in _fwalk_reent ()
=> 0x13a58 <_fwalk_reent+88>:	jalr	s4
0x0000000000019b06 in _fclose_r ()
=> 0x19b06 <_fclose_r>:	beqz	a1,0x19b40 <_fclose_r+58>
0x0000000000019b08 in _fclose_r ()
=> 0x19b08 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019b0a in _fclose_r ()
=> 0x19b0a <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019b0c in _fclose_r ()
=> 0x19b0c <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019b0e in _fclose_r ()
=> 0x19b0e <_fclose_r+8>:	mv	s0,a0
0x0000000000019b10 in _fclose_r ()
=> 0x19b10 <_fclose_r+10>:	beqz	a0,0x19b16 <_fclose_r+16>
0x0000000000019b12 in _fclose_r ()
=> 0x19b12 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019b14 in _fclose_r ()
=> 0x19b14 <_fclose_r+14>:	beqz	a5,0x19b30 <_fclose_r+42>
0x0000000000019b16 in _fclose_r ()
=> 0x19b16 <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019b1a in _fclose_r ()
=> 0x19b1a <_fclose_r+20>:	bnez	a5,0x19b26 <_fclose_r+32>
0x0000000000019b26 in _fclose_r ()
=> 0x19b26 <_fclose_r+32>:	mv	a0,s0
0x0000000000019b28 in _fclose_r ()
=> 0x19b28 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019b2a in _fclose_r ()
=> 0x19b2a <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019b2c in _fclose_r ()
=> 0x19b2c <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019b2e in _fclose_r ()
=> 0x19b2e <_fclose_r+40>:	j	0x19a86 <_fclose_r.part.0>
0x0000000000019a86 in _fclose_r.part.0 ()
=> 0x19a86 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019a88 in _fclose_r.part.0 ()
=> 0x19a88 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019a8a in _fclose_r.part.0 ()
=> 0x19a8a <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019a8c in _fclose_r.part.0 ()
=> 0x19a8c <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019a8e in _fclose_r.part.0 ()
=> 0x19a8e <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019a90 in _fclose_r.part.0 ()
=> 0x19a90 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019a92 in _fclose_r.part.0 ()
=> 0x19a92 <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019a94 in _fclose_r.part.0 ()
=> 0x19a94 <_fclose_r.part.0+14>:	jal	ra,0x13194 <__sflush_r>
0x0000000000013194 in __sflush_r ()
=> 0x13194 <__sflush_r>:	lh	a5,16(a1)
0x0000000000013198 in __sflush_r ()
=> 0x13198 <__sflush_r+4>:	addi	sp,sp,-48
0x000000000001319a in __sflush_r ()
=> 0x1319a <__sflush_r+6>:	sd	s0,32(sp)
0x000000000001319c in __sflush_r ()
=> 0x1319c <__sflush_r+8>:	sd	s3,8(sp)
0x000000000001319e in __sflush_r ()
=> 0x1319e <__sflush_r+10>:	sd	ra,40(sp)
0x00000000000131a0 in __sflush_r ()
=> 0x131a0 <__sflush_r+12>:	sd	s1,24(sp)
0x00000000000131a2 in __sflush_r ()
=> 0x131a2 <__sflush_r+14>:	sd	s2,16(sp)
0x00000000000131a4 in __sflush_r ()
=> 0x131a4 <__sflush_r+16>:	andi	a3,a5,8
0x00000000000131a8 in __sflush_r ()
=> 0x131a8 <__sflush_r+20>:	mv	s0,a1
0x00000000000131aa in __sflush_r ()
=> 0x131aa <__sflush_r+22>:	mv	s3,a0
0x00000000000131ac in __sflush_r ()
=> 0x131ac <__sflush_r+24>:	bnez	a3,0x13260 <__sflush_r+204>
0x00000000000131ae in __sflush_r ()
=> 0x131ae <__sflush_r+26>:	lui	a4,0x1
0x00000000000131b0 in __sflush_r ()
=> 0x131b0 <__sflush_r+28>:	addi	a4,a4,-2048
0x00000000000131b4 in __sflush_r ()
=> 0x131b4 <__sflush_r+32>:	lw	a3,8(a1)
0x00000000000131b6 in __sflush_r ()
=> 0x131b6 <__sflush_r+34>:	or	a5,a5,a4
0x00000000000131b8 in __sflush_r ()
=> 0x131b8 <__sflush_r+36>:	sh	a5,16(a1)
0x00000000000131bc in __sflush_r ()
=> 0x131bc <__sflush_r+40>:	blez	a3,0x132bc <__sflush_r+296>
0x00000000000132bc in __sflush_r ()
=> 0x132bc <__sflush_r+296>:	lw	a4,112(a1)
0x00000000000132be in __sflush_r ()
=> 0x132be <__sflush_r+298>:	bgtz	a4,0x131c0 <__sflush_r+44>
0x00000000000132c2 in __sflush_r ()
=> 0x132c2 <__sflush_r+302>:	j	0x13250 <__sflush_r+188>
0x0000000000013250 in __sflush_r ()
=> 0x13250 <__sflush_r+188>:	li	a0,0
0x0000000000013252 in __sflush_r ()
=> 0x13252 <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000013254 in __sflush_r ()
=> 0x13254 <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000013256 in __sflush_r ()
=> 0x13256 <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000013258 in __sflush_r ()
=> 0x13258 <__sflush_r+196>:	ld	s2,16(sp)
0x000000000001325a in __sflush_r ()
=> 0x1325a <__sflush_r+198>:	ld	s3,8(sp)
0x000000000001325c in __sflush_r ()
=> 0x1325c <__sflush_r+200>:	addi	sp,sp,48
0x000000000001325e in __sflush_r ()
=> 0x1325e <__sflush_r+202>:	ret
0x0000000000019a98 in _fclose_r.part.0 ()
=> 0x19a98 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019a9a in _fclose_r.part.0 ()
=> 0x19a9a <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019a9c in _fclose_r.part.0 ()
=> 0x19a9c <_fclose_r.part.0+22>:	beqz	a5,0x19aa8 <_fclose_r.part.0+34>
0x0000000000019a9e in _fclose_r.part.0 ()
=> 0x19a9e <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019aa0 in _fclose_r.part.0 ()
=> 0x19aa0 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019aa2 in _fclose_r.part.0 ()
=> 0x19aa2 <_fclose_r.part.0+28>:	jalr	a5
0x0000000000016d9c in __sclose ()
=> 0x16d9c <__sclose>:	lh	a1,18(a1)
0x0000000000016da0 in __sclose ()
=> 0x16da0 <__sclose+4>:	j	0x19a4a <_close_r>
0x0000000000019a4a in _close_r ()
=> 0x19a4a <_close_r>:	addi	sp,sp,-32
0x0000000000019a4c in _close_r ()
=> 0x19a4c <_close_r+2>:	sd	s0,16(sp)
0x0000000000019a4e in _close_r ()
=> 0x19a4e <_close_r+4>:	sd	s1,8(sp)
0x0000000000019a50 in _close_r ()
=> 0x19a50 <_close_r+6>:	mv	s0,a0
0x0000000000019a52 in _close_r ()
=> 0x19a52 <_close_r+8>:	mv	a0,a1
0x0000000000019a54 in _close_r ()
=> 0x19a54 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019a56 in _close_r ()
=> 0x19a56 <_close_r+12>:	sw	zero,1936(gp)
0x0000000000019a5a in _close_r ()
=> 0x19a5a <_close_r+16>:	jal	ra,0x1b8a8 <_close>
0x000000000001b8a8 in _close ()
=> 0x1b8a8 <_close>:	addi	sp,sp,-16
0x000000000001b8aa in _close ()
=> 0x1b8aa <_close+2>:	sd	ra,8(sp)
0x000000000001b8ac in _close ()
=> 0x1b8ac <_close+4>:	sd	s0,0(sp)
0x000000000001b8ae in _close ()
=> 0x1b8ae <_close+6>:	li	a7,57
0x000000000001b8b2 in _close ()
=> 0x1b8b2 <_close+10>:	ecall
0x000000000001b8b6 in _close ()
=> 0x1b8b6 <_close+14>:	mv	s0,a0
0x000000000001b8b8 in _close ()
=> 0x1b8b8 <_close+16>:	bltz	a0,0x1b8c6 <_close+30>
0x000000000001b8bc in _close ()
=> 0x1b8bc <_close+20>:	sext.w	a0,a0
0x000000000001b8be in _close ()
=> 0x1b8be <_close+22>:	ld	ra,8(sp)
0x000000000001b8c0 in _close ()
=> 0x1b8c0 <_close+24>:	ld	s0,0(sp)
0x000000000001b8c2 in _close ()
=> 0x1b8c2 <_close+26>:	addi	sp,sp,16
0x000000000001b8c4 in _close ()
=> 0x1b8c4 <_close+28>:	ret
0x0000000000019a5e in _close_r ()
=> 0x19a5e <_close_r+20>:	li	a5,-1
0x0000000000019a60 in _close_r ()
=> 0x19a60 <_close_r+22>:	beq	a0,a5,0x19a6e <_close_r+36>
0x0000000000019a64 in _close_r ()
=> 0x19a64 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019a66 in _close_r ()
=> 0x19a66 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019a68 in _close_r ()
=> 0x19a68 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019a6a in _close_r ()
=> 0x19a6a <_close_r+32>:	addi	sp,sp,32
0x0000000000019a6c in _close_r ()
=> 0x19a6c <_close_r+34>:	ret
0x0000000000019aa4 in _fclose_r.part.0 ()
=> 0x19aa4 <_fclose_r.part.0+30>:	bltz	a0,0x19af0 <_fclose_r.part.0+106>
0x0000000000019aa8 in _fclose_r.part.0 ()
=> 0x19aa8 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019aac in _fclose_r.part.0 ()
=> 0x19aac <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019ab0 in _fclose_r.part.0 ()
=> 0x19ab0 <_fclose_r.part.0+42>:	bnez	a5,0x19afc <_fclose_r.part.0+118>
0x0000000000019ab2 in _fclose_r.part.0 ()
=> 0x19ab2 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019ab4 in _fclose_r.part.0 ()
=> 0x19ab4 <_fclose_r.part.0+46>:	beqz	a1,0x19ac8 <_fclose_r.part.0+66>
0x0000000000019ac8 in _fclose_r.part.0 ()
=> 0x19ac8 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019aca in _fclose_r.part.0 ()
=> 0x19aca <_fclose_r.part.0+68>:	beqz	a1,0x19ad6 <_fclose_r.part.0+80>
0x0000000000019ad6 in _fclose_r.part.0 ()
=> 0x19ad6 <_fclose_r.part.0+80>:	jal	ra,0x1360a <__sfp_lock_acquire>
0x000000000001360a in __sfp_lock_acquire ()
=> 0x1360a <__sfp_lock_acquire>:	ret
0x0000000000019ada in _fclose_r.part.0 ()
=> 0x19ada <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019ade in _fclose_r.part.0 ()
=> 0x19ade <_fclose_r.part.0+88>:	jal	ra,0x1360c <__sfp_lock_release>
0x000000000001360c in __sfp_lock_release ()
=> 0x1360c <__sfp_lock_release>:	ret
0x0000000000019ae2 in _fclose_r.part.0 ()
=> 0x19ae2 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019ae4 in _fclose_r.part.0 ()
=> 0x19ae4 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019ae6 in _fclose_r.part.0 ()
=> 0x19ae6 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019ae8 in _fclose_r.part.0 ()
=> 0x19ae8 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019aea in _fclose_r.part.0 ()
=> 0x19aea <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019aec in _fclose_r.part.0 ()
=> 0x19aec <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019aee in _fclose_r.part.0 ()
=> 0x19aee <_fclose_r.part.0+104>:	ret
0x0000000000013a5a in _fwalk_reent ()
=> 0x13a5a <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013a5e in _fwalk_reent ()
=> 0x13a5e <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013a60 in _fwalk_reent ()
=> 0x13a60 <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013a64 in _fwalk_reent ()
=> 0x13a64 <_fwalk_reent+100>:	bne	s1,s0,0x13a44 <_fwalk_reent+68>
0x0000000000013a68 in _fwalk_reent ()
=> 0x13a68 <_fwalk_reent+104>:	ld	s2,0(s2)
0x0000000000013a6c in _fwalk_reent ()
=> 0x13a6c <_fwalk_reent+108>:	bnez	s2,0x13a28 <_fwalk_reent+40>
0x0000000000013a70 in _fwalk_reent ()
=> 0x13a70 <_fwalk_reent+112>:	ld	ra,72(sp)
0x0000000000013a72 in _fwalk_reent ()
=> 0x13a72 <_fwalk_reent+114>:	ld	s0,64(sp)
0x0000000000013a74 in _fwalk_reent ()
=> 0x13a74 <_fwalk_reent+116>:	ld	s1,56(sp)
0x0000000000013a76 in _fwalk_reent ()
=> 0x13a76 <_fwalk_reent+118>:	ld	s2,48(sp)
0x0000000000013a78 in _fwalk_reent ()
=> 0x13a78 <_fwalk_reent+120>:	ld	s3,40(sp)
0x0000000000013a7a in _fwalk_reent ()
=> 0x13a7a <_fwalk_reent+122>:	ld	s4,32(sp)
0x0000000000013a7c in _fwalk_reent ()
=> 0x13a7c <_fwalk_reent+124>:	ld	s5,24(sp)
0x0000000000013a7e in _fwalk_reent ()
=> 0x13a7e <_fwalk_reent+126>:	ld	s7,8(sp)
0x0000000000013a80 in _fwalk_reent ()
=> 0x13a80 <_fwalk_reent+128>:	ld	s8,0(sp)
0x0000000000013a82 in _fwalk_reent ()
=> 0x13a82 <_fwalk_reent+130>:	mv	a0,s6
0x0000000000013a84 in _fwalk_reent ()
=> 0x13a84 <_fwalk_reent+132>:	ld	s6,16(sp)
0x0000000000013a86 in _fwalk_reent ()
=> 0x13a86 <_fwalk_reent+134>:	addi	sp,sp,80
0x0000000000013a88 in _fwalk_reent ()
=> 0x13a88 <_fwalk_reent+136>:	ret
0x0000000000010bec in exit ()
=> 0x10bec <exit+24>:	mv	a0,s0
0x0000000000010bee in exit ()
=> 0x10bee <exit+26>:	jal	ra,0x1b8d4 <_exit>
0x000000000001b8d4 in _exit ()
=> 0x1b8d4 <_exit>:	li	a7,93
0x000000000001b8d8 in _exit ()
=> 0x1b8d8 <_exit+4>:	ecall
[Inferior 1 (process 741) exited normally]
script_remote.gdb:25: Error in sourced command file:
No registers.
