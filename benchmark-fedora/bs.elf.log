
Temporary breakpoint 1, start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102cc <start_trigger+16>:	sd	ra,8(sp)
0x00000000000102d0	37	}
=> 0x102d0 <start_trigger+20>:	sd	s0,0(sp)
0x00000000000102d4	37	}
=> 0x102d4 <start_trigger+24>:	addi	s0,sp,16
0x00000000000102d8	37	}
=> 0x102d8 <start_trigger+28>:	ld	s0,0(sp)
0x00000000000102dc in start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102dc <start_trigger+32>:	ld	ra,8(sp)
0x00000000000102e0	37	}
=> 0x102e0 <start_trigger+36>:	addi	sp,sp,16
0x00000000000102e4	37	}
=> 0x102e4 <start_trigger+40>:	ld	ra,0(t6)
0x00000000000102e8	37	}
=> 0x102e8 <start_trigger+44>:	addi	t6,t6,16
0x00000000000102ec	37	}
=> 0x102ec <start_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:54
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10218 <main+144>:	ld	a0,-88(s0)
0x000000000001021c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1021c <main+148>:	sw	a0,-36(s0)
0x0000000000010220	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10220 <main+152>:	j	0x10224 <main+156>
0x0000000000010224	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10224 <main+156>:	lw	a0,-36(s0)
0x0000000000010228	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10228 <main+160>:	li	a1,0
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+164>:	blt	a1,a0,0x10258 <main+208>
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+168>:	j	0x10234 <main+172>
56	      initialise_benchmark ();
=> 0x10234 <main+172>:	jal	ra,0x10488 <initialise_benchmark>
initialise_benchmark () at libbs.c:125
125	{
=> 0x10488 <initialise_benchmark>:	addi	t6,t6,-16
0x000000000001048c	125	{
=> 0x1048c <initialise_benchmark+4>:	sd	ra,0(t6)
0x0000000000010490	125	{
=> 0x10490 <initialise_benchmark+8>:	st	zero,0(t6)
0x0000000000010494	125	{
=> 0x10494 <initialise_benchmark+12>:	addi	sp,sp,-16
126	}
=> 0x10498 <initialise_benchmark+16>:	sd	ra,8(sp)
0x000000000001049c	126	}
=> 0x1049c <initialise_benchmark+20>:	sd	s0,0(sp)
0x00000000000104a0	126	}
=> 0x104a0 <initialise_benchmark+24>:	addi	s0,sp,16
0x00000000000104a4	126	}
=> 0x104a4 <initialise_benchmark+28>:	ld	s0,0(sp)
0x00000000000104a8 in initialise_benchmark () at libbs.c:126
126	}
=> 0x104a8 <initialise_benchmark+32>:	ld	ra,8(sp)
0x00000000000104ac	126	}
=> 0x104ac <initialise_benchmark+36>:	addi	sp,sp,16
0x00000000000104b0	126	}
=> 0x104b0 <initialise_benchmark+40>:	ld	ra,0(t6)
0x00000000000104b4	126	}
=> 0x104b4 <initialise_benchmark+44>:	addi	t6,t6,16
0x00000000000104b8	126	}
=> 0x104b8 <initialise_benchmark+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:57
57	      result = benchmark ();
=> 0x10238 <main+176>:	sd	a0,-120(s0)
0x000000000001023c	57	      result = benchmark ();
=> 0x1023c <main+180>:	jal	ra,0x104bc <benchmark>
benchmark () at libbs.c:131
131	{
=> 0x104bc <benchmark>:	addi	t6,t6,-16
0x00000000000104c0	131	{
=> 0x104c0 <benchmark+4>:	sd	ra,0(t6)
0x00000000000104c4	131	{
=> 0x104c4 <benchmark+8>:	st	zero,0(t6)
0x00000000000104c8	131	{
=> 0x104c8 <benchmark+12>:	addi	sp,sp,-32
0x00000000000104cc	131	{
=> 0x104cc <benchmark+16>:	sd	ra,24(sp)
0x00000000000104d0	131	{
=> 0x104d0 <benchmark+20>:	sd	s0,16(sp)
0x00000000000104d4	131	{
=> 0x104d4 <benchmark+24>:	addi	s0,sp,32
0x00000000000104d8	131	{
=> 0x104d8 <benchmark+28>:	li	a0,8
132	  binary_search(8);
=> 0x104dc <benchmark+32>:	jal	ra,0x10324 <binary_search>
binary_search (x=0) at libbs.c:90
90	{
=> 0x10324 <binary_search>:	addi	t6,t6,-16
0x0000000000010328	90	{
=> 0x10328 <binary_search+4>:	sd	ra,0(t6)
0x000000000001032c	90	{
=> 0x1032c <binary_search+8>:	st	zero,0(t6)
0x0000000000010330	90	{
=> 0x10330 <binary_search+12>:	addi	sp,sp,-48
0x0000000000010334	90	{
=> 0x10334 <binary_search+16>:	sd	ra,40(sp)
0x0000000000010338	90	{
=> 0x10338 <binary_search+20>:	sd	s0,32(sp)
0x000000000001033c	90	{
=> 0x1033c <binary_search+24>:	addi	s0,sp,48
0x0000000000010340	90	{
=> 0x10340 <binary_search+28>:	mv	a1,a0
0x0000000000010344	90	{
=> 0x10344 <binary_search+32>:	sw	a0,-20(s0)
0x0000000000010348	90	{
=> 0x10348 <binary_search+36>:	li	a0,0
93	  low = 0;
=> 0x1034c <binary_search+40>:	sw	a0,-36(s0)
0x0000000000010350	93	  low = 0;
=> 0x10350 <binary_search+44>:	li	a0,14
94	  up = 14;
=> 0x10354 <binary_search+48>:	sw	a0,-32(s0)
0x0000000000010358	94	  up = 14;
=> 0x10358 <binary_search+52>:	li	a0,1
0x000000000001035c	94	  up = 14;
=> 0x1035c <binary_search+56>:	slli	a0,a0,0x20
0x0000000000010360	94	  up = 14;
=> 0x10360 <binary_search+60>:	addi	a0,a0,-1
95	  fvalue = -1 /* all data are positive */ ;
=> 0x10364 <binary_search+64>:	sw	a0,-24(s0)
96	  while (low <= up) {
=> 0x10368 <binary_search+68>:	j	0x1036c <binary_search+72>
0x000000000001036c	96	  while (low <= up) {
=> 0x1036c <binary_search+72>:	lw	a0,-36(s0)
0x0000000000010370	96	  while (low <= up) {
=> 0x10370 <binary_search+76>:	lw	a1,-32(s0)
0x0000000000010374	96	  while (low <= up) {
=> 0x10374 <binary_search+80>:	blt	a1,a0,0x1042c <binary_search+264>
0x0000000000010378	96	  while (low <= up) {
=> 0x10378 <binary_search+84>:	j	0x1037c <binary_search+88>
97	    mid = (low + up) >> 1;
=> 0x1037c <binary_search+88>:	lw	a0,-36(s0)
0x0000000000010380	97	    mid = (low + up) >> 1;
=> 0x10380 <binary_search+92>:	lw	a1,-32(s0)
0x0000000000010384	97	    mid = (low + up) >> 1;
=> 0x10384 <binary_search+96>:	addw	a0,a0,a1
0x0000000000010388	97	    mid = (low + up) >> 1;
=> 0x10388 <binary_search+100>:	srli	a0,a0,0x1
0x000000000001038c	97	    mid = (low + up) >> 1;
=> 0x1038c <binary_search+104>:	sw	a0,-28(s0)
98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10390 <binary_search+108>:	lw	a0,-28(s0)
0x0000000000010394	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10394 <binary_search+112>:	lui	a1,0x1e
0x0000000000010398	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10398 <binary_search+116>:	addi	a1,a1,1648
0x000000000001039c	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x1039c <binary_search+120>:	slli	a0,a0,0x3
0x00000000000103a0	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a0 <binary_search+124>:	add	a0,a0,a1
0x00000000000103a4	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a4 <binary_search+128>:	lw	a0,0(a0)
0x00000000000103a8	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a8 <binary_search+132>:	lw	a1,-20(s0)
0x00000000000103ac	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103ac <binary_search+136>:	bne	a0,a1,0x103e0 <binary_search+188>
103	      if ( data[mid].key > x ) 	{
=> 0x103e0 <binary_search+188>:	lw	a0,-28(s0)
0x00000000000103e4	103	      if ( data[mid].key > x ) 	{
=> 0x103e4 <binary_search+192>:	lui	a1,0x1e
0x00000000000103e8	103	      if ( data[mid].key > x ) 	{
=> 0x103e8 <binary_search+196>:	addi	a1,a1,1648
0x00000000000103ec	103	      if ( data[mid].key > x ) 	{
=> 0x103ec <binary_search+200>:	slli	a0,a0,0x3
0x00000000000103f0	103	      if ( data[mid].key > x ) 	{
=> 0x103f0 <binary_search+204>:	add	a0,a0,a1
0x00000000000103f4	103	      if ( data[mid].key > x ) 	{
=> 0x103f4 <binary_search+208>:	lw	a0,0(a0)
0x00000000000103f8	103	      if ( data[mid].key > x ) 	{
=> 0x103f8 <binary_search+212>:	lw	a1,-20(s0)
0x00000000000103fc	103	      if ( data[mid].key > x ) 	{
=> 0x103fc <binary_search+216>:	bge	a1,a0,0x10414 <binary_search+240>
0x0000000000010400	103	      if ( data[mid].key > x ) 	{
=> 0x10400 <binary_search+220>:	j	0x10404 <binary_search+224>
104		up = mid - 1;
=> 0x10404 <binary_search+224>:	lw	a0,-28(s0)
0x0000000000010408	104		up = mid - 1;
=> 0x10408 <binary_search+228>:	addi	a0,a0,-1
0x000000000001040c	104		up = mid - 1;
=> 0x1040c <binary_search+232>:	sw	a0,-32(s0)
105	      }
=> 0x10410 <binary_search+236>:	j	0x10424 <binary_search+256>
0x0000000000010424	107		low = mid + 1;
=> 0x10424 <binary_search+256>:	j	0x10428 <binary_search+260>
96	  while (low <= up) {
=> 0x10428 <binary_search+260>:	j	0x1036c <binary_search+72>
0x000000000001036c	96	  while (low <= up) {
=> 0x1036c <binary_search+72>:	lw	a0,-36(s0)
0x0000000000010370	96	  while (low <= up) {
=> 0x10370 <binary_search+76>:	lw	a1,-32(s0)
0x0000000000010374	96	  while (low <= up) {
=> 0x10374 <binary_search+80>:	blt	a1,a0,0x1042c <binary_search+264>
0x0000000000010378	96	  while (low <= up) {
=> 0x10378 <binary_search+84>:	j	0x1037c <binary_search+88>
97	    mid = (low + up) >> 1;
=> 0x1037c <binary_search+88>:	lw	a0,-36(s0)
0x0000000000010380	97	    mid = (low + up) >> 1;
=> 0x10380 <binary_search+92>:	lw	a1,-32(s0)
0x0000000000010384	97	    mid = (low + up) >> 1;
=> 0x10384 <binary_search+96>:	addw	a0,a0,a1
0x0000000000010388	97	    mid = (low + up) >> 1;
=> 0x10388 <binary_search+100>:	srli	a0,a0,0x1
0x000000000001038c	97	    mid = (low + up) >> 1;
=> 0x1038c <binary_search+104>:	sw	a0,-28(s0)
98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10390 <binary_search+108>:	lw	a0,-28(s0)
0x0000000000010394	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10394 <binary_search+112>:	lui	a1,0x1e
0x0000000000010398	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10398 <binary_search+116>:	addi	a1,a1,1648
0x000000000001039c	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x1039c <binary_search+120>:	slli	a0,a0,0x3
0x00000000000103a0	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a0 <binary_search+124>:	add	a0,a0,a1
0x00000000000103a4	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a4 <binary_search+128>:	lw	a0,0(a0)
0x00000000000103a8	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a8 <binary_search+132>:	lw	a1,-20(s0)
0x00000000000103ac	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103ac <binary_search+136>:	bne	a0,a1,0x103e0 <binary_search+188>
103	      if ( data[mid].key > x ) 	{
=> 0x103e0 <binary_search+188>:	lw	a0,-28(s0)
0x00000000000103e4	103	      if ( data[mid].key > x ) 	{
=> 0x103e4 <binary_search+192>:	lui	a1,0x1e
0x00000000000103e8	103	      if ( data[mid].key > x ) 	{
=> 0x103e8 <binary_search+196>:	addi	a1,a1,1648
0x00000000000103ec	103	      if ( data[mid].key > x ) 	{
=> 0x103ec <binary_search+200>:	slli	a0,a0,0x3
0x00000000000103f0	103	      if ( data[mid].key > x ) 	{
=> 0x103f0 <binary_search+204>:	add	a0,a0,a1
0x00000000000103f4	103	      if ( data[mid].key > x ) 	{
=> 0x103f4 <binary_search+208>:	lw	a0,0(a0)
0x00000000000103f8	103	      if ( data[mid].key > x ) 	{
=> 0x103f8 <binary_search+212>:	lw	a1,-20(s0)
0x00000000000103fc	103	      if ( data[mid].key > x ) 	{
=> 0x103fc <binary_search+216>:	bge	a1,a0,0x10414 <binary_search+240>
107		low = mid + 1;
=> 0x10414 <binary_search+240>:	lw	a0,-28(s0)
0x0000000000010418	107		low = mid + 1;
=> 0x10418 <binary_search+244>:	addi	a0,a0,1
0x000000000001041c	107		low = mid + 1;
=> 0x1041c <binary_search+248>:	sw	a0,-36(s0)
0x0000000000010420	107		low = mid + 1;
=> 0x10420 <binary_search+252>:	j	0x10424 <binary_search+256>
0x0000000000010424	107		low = mid + 1;
=> 0x10424 <binary_search+256>:	j	0x10428 <binary_search+260>
96	  while (low <= up) {
=> 0x10428 <binary_search+260>:	j	0x1036c <binary_search+72>
0x000000000001036c	96	  while (low <= up) {
=> 0x1036c <binary_search+72>:	lw	a0,-36(s0)
0x0000000000010370	96	  while (low <= up) {
=> 0x10370 <binary_search+76>:	lw	a1,-32(s0)
0x0000000000010374	96	  while (low <= up) {
=> 0x10374 <binary_search+80>:	blt	a1,a0,0x1042c <binary_search+264>
0x0000000000010378	96	  while (low <= up) {
=> 0x10378 <binary_search+84>:	j	0x1037c <binary_search+88>
97	    mid = (low + up) >> 1;
=> 0x1037c <binary_search+88>:	lw	a0,-36(s0)
0x0000000000010380	97	    mid = (low + up) >> 1;
=> 0x10380 <binary_search+92>:	lw	a1,-32(s0)
0x0000000000010384	97	    mid = (low + up) >> 1;
=> 0x10384 <binary_search+96>:	addw	a0,a0,a1
0x0000000000010388	97	    mid = (low + up) >> 1;
=> 0x10388 <binary_search+100>:	srli	a0,a0,0x1
0x000000000001038c	97	    mid = (low + up) >> 1;
=> 0x1038c <binary_search+104>:	sw	a0,-28(s0)
98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10390 <binary_search+108>:	lw	a0,-28(s0)
0x0000000000010394	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10394 <binary_search+112>:	lui	a1,0x1e
0x0000000000010398	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10398 <binary_search+116>:	addi	a1,a1,1648
0x000000000001039c	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x1039c <binary_search+120>:	slli	a0,a0,0x3
0x00000000000103a0	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a0 <binary_search+124>:	add	a0,a0,a1
0x00000000000103a4	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a4 <binary_search+128>:	lw	a0,0(a0)
0x00000000000103a8	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a8 <binary_search+132>:	lw	a1,-20(s0)
0x00000000000103ac	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103ac <binary_search+136>:	bne	a0,a1,0x103e0 <binary_search+188>
103	      if ( data[mid].key > x ) 	{
=> 0x103e0 <binary_search+188>:	lw	a0,-28(s0)
0x00000000000103e4	103	      if ( data[mid].key > x ) 	{
=> 0x103e4 <binary_search+192>:	lui	a1,0x1e
0x00000000000103e8	103	      if ( data[mid].key > x ) 	{
=> 0x103e8 <binary_search+196>:	addi	a1,a1,1648
0x00000000000103ec	103	      if ( data[mid].key > x ) 	{
=> 0x103ec <binary_search+200>:	slli	a0,a0,0x3
0x00000000000103f0	103	      if ( data[mid].key > x ) 	{
=> 0x103f0 <binary_search+204>:	add	a0,a0,a1
0x00000000000103f4	103	      if ( data[mid].key > x ) 	{
=> 0x103f4 <binary_search+208>:	lw	a0,0(a0)
0x00000000000103f8	103	      if ( data[mid].key > x ) 	{
=> 0x103f8 <binary_search+212>:	lw	a1,-20(s0)
0x00000000000103fc	103	      if ( data[mid].key > x ) 	{
=> 0x103fc <binary_search+216>:	bge	a1,a0,0x10414 <binary_search+240>
0x0000000000010400	103	      if ( data[mid].key > x ) 	{
=> 0x10400 <binary_search+220>:	j	0x10404 <binary_search+224>
104		up = mid - 1;
=> 0x10404 <binary_search+224>:	lw	a0,-28(s0)
0x0000000000010408	104		up = mid - 1;
=> 0x10408 <binary_search+228>:	addi	a0,a0,-1
0x000000000001040c	104		up = mid - 1;
=> 0x1040c <binary_search+232>:	sw	a0,-32(s0)
105	      }
=> 0x10410 <binary_search+236>:	j	0x10424 <binary_search+256>
0x0000000000010424	107		low = mid + 1;
=> 0x10424 <binary_search+256>:	j	0x10428 <binary_search+260>
96	  while (low <= up) {
=> 0x10428 <binary_search+260>:	j	0x1036c <binary_search+72>
0x000000000001036c	96	  while (low <= up) {
=> 0x1036c <binary_search+72>:	lw	a0,-36(s0)
0x0000000000010370	96	  while (low <= up) {
=> 0x10370 <binary_search+76>:	lw	a1,-32(s0)
0x0000000000010374	96	  while (low <= up) {
=> 0x10374 <binary_search+80>:	blt	a1,a0,0x1042c <binary_search+264>
0x0000000000010378	96	  while (low <= up) {
=> 0x10378 <binary_search+84>:	j	0x1037c <binary_search+88>
97	    mid = (low + up) >> 1;
=> 0x1037c <binary_search+88>:	lw	a0,-36(s0)
0x0000000000010380	97	    mid = (low + up) >> 1;
=> 0x10380 <binary_search+92>:	lw	a1,-32(s0)
0x0000000000010384	97	    mid = (low + up) >> 1;
=> 0x10384 <binary_search+96>:	addw	a0,a0,a1
0x0000000000010388	97	    mid = (low + up) >> 1;
=> 0x10388 <binary_search+100>:	srli	a0,a0,0x1
0x000000000001038c	97	    mid = (low + up) >> 1;
=> 0x1038c <binary_search+104>:	sw	a0,-28(s0)
98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10390 <binary_search+108>:	lw	a0,-28(s0)
0x0000000000010394	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10394 <binary_search+112>:	lui	a1,0x1e
0x0000000000010398	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x10398 <binary_search+116>:	addi	a1,a1,1648
0x000000000001039c	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x1039c <binary_search+120>:	slli	a0,a0,0x3
0x00000000000103a0	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a0 <binary_search+124>:	add	a0,a0,a1
0x00000000000103a4	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a4 <binary_search+128>:	lw	a0,0(a0)
0x00000000000103a8	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103a8 <binary_search+132>:	lw	a1,-20(s0)
0x00000000000103ac	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103ac <binary_search+136>:	bne	a0,a1,0x103e0 <binary_search+188>
0x00000000000103b0	98	    if ( data[mid].key == x ) {  /*  found  */
=> 0x103b0 <binary_search+140>:	j	0x103b4 <binary_search+144>
99	      up = low - 1;
=> 0x103b4 <binary_search+144>:	lw	a0,-36(s0)
0x00000000000103b8	99	      up = low - 1;
=> 0x103b8 <binary_search+148>:	addi	a0,a0,-1
0x00000000000103bc	99	      up = low - 1;
=> 0x103bc <binary_search+152>:	sw	a0,-32(s0)
100	      fvalue = data[mid].value;
=> 0x103c0 <binary_search+156>:	lw	a0,-28(s0)
0x00000000000103c4	100	      fvalue = data[mid].value;
=> 0x103c4 <binary_search+160>:	slli	a0,a0,0x3
0x00000000000103c8	100	      fvalue = data[mid].value;
=> 0x103c8 <binary_search+164>:	lui	a1,0x1e
0x00000000000103cc	100	      fvalue = data[mid].value;
=> 0x103cc <binary_search+168>:	addi	a1,a1,1648
0x00000000000103d0	100	      fvalue = data[mid].value;
=> 0x103d0 <binary_search+172>:	add	a0,a1,a0
0x00000000000103d4	100	      fvalue = data[mid].value;
=> 0x103d4 <binary_search+176>:	lw	a0,4(a0)
0x00000000000103d8	100	      fvalue = data[mid].value;
=> 0x103d8 <binary_search+180>:	sw	a0,-24(s0)
101	    }
=> 0x103dc <binary_search+184>:	j	0x10428 <binary_search+260>
96	  while (low <= up) {
=> 0x10428 <binary_search+260>:	j	0x1036c <binary_search+72>
0x000000000001036c	96	  while (low <= up) {
=> 0x1036c <binary_search+72>:	lw	a0,-36(s0)
0x0000000000010370	96	  while (low <= up) {
=> 0x10370 <binary_search+76>:	lw	a1,-32(s0)
0x0000000000010374	96	  while (low <= up) {
=> 0x10374 <binary_search+80>:	blt	a1,a0,0x1042c <binary_search+264>
110	  return fvalue;
=> 0x1042c <binary_search+264>:	lw	a0,-24(s0)
0x0000000000010430	110	  return fvalue;
=> 0x10430 <binary_search+268>:	ld	s0,32(sp)
0x0000000000010434 in binary_search (x=0) at libbs.c:110
110	  return fvalue;
=> 0x10434 <binary_search+272>:	ld	ra,40(sp)
0x0000000000010438	110	  return fvalue;
=> 0x10438 <binary_search+276>:	addi	sp,sp,48
0x000000000001043c	110	  return fvalue;
=> 0x1043c <binary_search+280>:	ld	ra,0(t6)
0x0000000000010440	110	  return fvalue;
=> 0x10440 <binary_search+284>:	addi	t6,t6,16
0x0000000000010444	110	  return fvalue;
=> 0x10444 <binary_search+288>:	ret
0x00000000000104e0 in benchmark () at libbs.c:132
132	  binary_search(8);
=> 0x104e0 <benchmark+36>:	li	a1,0
133	  return 0;
=> 0x104e4 <benchmark+40>:	sd	a0,-24(s0)
0x00000000000104e8	133	  return 0;
=> 0x104e8 <benchmark+44>:	mv	a0,a1
0x00000000000104ec	133	  return 0;
=> 0x104ec <benchmark+48>:	ld	s0,16(sp)
0x00000000000104f0 in benchmark () at libbs.c:133
133	  return 0;
=> 0x104f0 <benchmark+52>:	ld	ra,24(sp)
0x00000000000104f4	133	  return 0;
=> 0x104f4 <benchmark+56>:	addi	sp,sp,32
0x00000000000104f8	133	  return 0;
=> 0x104f8 <benchmark+60>:	ld	ra,0(t6)
0x00000000000104fc	133	  return 0;
=> 0x104fc <benchmark+64>:	addi	t6,t6,16
0x0000000000010500	133	  return 0;
=> 0x10500 <benchmark+68>:	ret
0x0000000000010240 in main (argc=1, argv=0x3ffffffb78) at main.c:57
57	      result = benchmark ();
=> 0x10240 <main+184>:	sw	a0,-40(s0)
58	    }
=> 0x10244 <main+188>:	j	0x10248 <main+192>
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10248 <main+192>:	lw	a0,-36(s0)
0x000000000001024c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1024c <main+196>:	addi	a0,a0,1
0x0000000000010250	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10250 <main+200>:	sw	a0,-36(s0)
0x0000000000010254	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10254 <main+204>:	j	0x10224 <main+156>
0x0000000000010224	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10224 <main+156>:	lw	a0,-36(s0)
0x0000000000010228	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10228 <main+160>:	li	a1,0
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+164>:	blt	a1,a0,0x10258 <main+208>
60	  stop_trigger ();
=> 0x10258 <main+208>:	jal	ra,0x102f0 <stop_trigger>
stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:40
40	{
=> 0x102f0 <stop_trigger>:	addi	t6,t6,-16
0x00000000000102f4	40	{
=> 0x102f4 <stop_trigger+4>:	sd	ra,0(t6)
0x00000000000102f8	40	{
=> 0x102f8 <stop_trigger+8>:	st	zero,0(t6)
0x00000000000102fc	40	{
=> 0x102fc <stop_trigger+12>:	addi	sp,sp,-16
47	}
=> 0x10300 <stop_trigger+16>:	sd	ra,8(sp)
0x0000000000010304	47	}
=> 0x10304 <stop_trigger+20>:	sd	s0,0(sp)
0x0000000000010308	47	}
=> 0x10308 <stop_trigger+24>:	addi	s0,sp,16
0x000000000001030c	47	}
=> 0x1030c <stop_trigger+28>:	ld	s0,0(sp)
0x0000000000010310 in stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:47
47	}
=> 0x10310 <stop_trigger+32>:	ld	ra,8(sp)
0x0000000000010314	47	}
=> 0x10314 <stop_trigger+36>:	addi	sp,sp,16
0x0000000000010318	47	}
=> 0x10318 <stop_trigger+40>:	ld	ra,0(t6)
0x000000000001031c	47	}
=> 0x1031c <stop_trigger+44>:	addi	t6,t6,16
0x0000000000010320	47	}
=> 0x10320 <stop_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x1025c <main+212>:	lw	a0,-40(s0)
0x0000000000010260	64	  correct = verify_benchmark (result);
=> 0x10260 <main+216>:	jal	ra,0x10448 <verify_benchmark>
verify_benchmark (res=0) at libbs.c:118
118	{
=> 0x10448 <verify_benchmark>:	addi	t6,t6,-16
0x000000000001044c	118	{
=> 0x1044c <verify_benchmark+4>:	sd	ra,0(t6)
0x0000000000010450	118	{
=> 0x10450 <verify_benchmark+8>:	st	zero,0(t6)
0x0000000000010454	118	{
=> 0x10454 <verify_benchmark+12>:	addi	sp,sp,-32
0x0000000000010458	118	{
=> 0x10458 <verify_benchmark+16>:	sd	ra,24(sp)
0x000000000001045c	118	{
=> 0x1045c <verify_benchmark+20>:	sd	s0,16(sp)
0x0000000000010460	118	{
=> 0x10460 <verify_benchmark+24>:	addi	s0,sp,32
0x0000000000010464	118	{
=> 0x10464 <verify_benchmark+28>:	mv	a1,a0
0x0000000000010468	118	{
=> 0x10468 <verify_benchmark+32>:	sw	a0,-20(s0)
0x000000000001046c	118	{
=> 0x1046c <verify_benchmark+36>:	li	a0,-1
119	  return -1;
=> 0x10470 <verify_benchmark+40>:	ld	s0,16(sp)
0x0000000000010474 in verify_benchmark (res=0) at libbs.c:119
119	  return -1;
=> 0x10474 <verify_benchmark+44>:	ld	ra,24(sp)
0x0000000000010478	119	  return -1;
=> 0x10478 <verify_benchmark+48>:	addi	sp,sp,32
0x000000000001047c	119	  return -1;
=> 0x1047c <verify_benchmark+52>:	ld	ra,0(t6)
0x0000000000010480	119	  return -1;
=> 0x10480 <verify_benchmark+56>:	addi	t6,t6,16
0x0000000000010484	119	  return -1;
=> 0x10484 <verify_benchmark+60>:	ret
0x0000000000010264 in main (argc=1, argv=0x3ffffffb78) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x10264 <main+220>:	sw	a0,-44(s0)
66	  free(a);
=> 0x10268 <main+224>:	ld	a0,-56(s0)
0x000000000001026c	66	  free(a);
=> 0x1026c <main+228>:	jal	ra,0x10594 <free>
0x0000000000010594 in free ()
=> 0x10594 <free>:	mv	a1,a0
0x0000000000010596 in free ()
=> 0x10596 <free+2>:	ld	a0,1872(gp)
0x000000000001059a in free ()
=> 0x1059a <free+6>:	j	0x1306c <_free_r>
0x000000000001306c in _free_r ()
=> 0x1306c <_free_r>:	beqz	a1,0x1315c <_free_r+240>
0x000000000001306e in _free_r ()
=> 0x1306e <_free_r+2>:	addi	sp,sp,-32
0x0000000000013070 in _free_r ()
=> 0x13070 <_free_r+4>:	sd	s0,16(sp)
0x0000000000013072 in _free_r ()
=> 0x13072 <_free_r+6>:	sd	s1,8(sp)
0x0000000000013074 in _free_r ()
=> 0x13074 <_free_r+8>:	mv	s0,a1
0x0000000000013076 in _free_r ()
=> 0x13076 <_free_r+10>:	mv	s1,a0
0x0000000000013078 in _free_r ()
=> 0x13078 <_free_r+12>:	sd	ra,24(sp)
0x000000000001307a in _free_r ()
=> 0x1307a <_free_r+14>:	jal	ra,0x10c6a <__malloc_lock>
0x0000000000010c6a in __malloc_lock ()
=> 0x10c6a <__malloc_lock>:	ret
0x000000000001307e in _free_r ()
=> 0x1307e <_free_r+18>:	ld	a0,-8(s0)
0x0000000000013082 in _free_r ()
=> 0x13082 <_free_r+22>:	addi	a4,s0,-16
0x0000000000013086 in _free_r ()
=> 0x13086 <_free_r+26>:	lui	a1,0x1f
0x000000000001308a in _free_r ()
=> 0x1308a <_free_r+30>:	andi	a5,a0,-2
0x000000000001308e in _free_r ()
=> 0x1308e <_free_r+34>:	add	a2,a4,a5
0x0000000000013092 in _free_r ()
=> 0x13092 <_free_r+38>:	addi	a1,a1,-464
0x0000000000013096 in _free_r ()
=> 0x13096 <_free_r+42>:	ld	a3,8(a2)
0x0000000000013098 in _free_r ()
=> 0x13098 <_free_r+44>:	ld	a6,16(a1)
0x000000000001309c in _free_r ()
=> 0x1309c <_free_r+48>:	andi	a3,a3,-4
0x000000000001309e in _free_r ()
=> 0x1309e <_free_r+50>:	beq	a6,a2,0x131e2 <_free_r+374>
0x00000000000130a2 in _free_r ()
=> 0x130a2 <_free_r+54>:	sd	a3,8(a2)
0x00000000000130a4 in _free_r ()
=> 0x130a4 <_free_r+56>:	andi	a0,a0,1
0x00000000000130a6 in _free_r ()
=> 0x130a6 <_free_r+58>:	add	a6,a2,a3
0x00000000000130aa in _free_r ()
=> 0x130aa <_free_r+62>:	bnez	a0,0x1312c <_free_r+192>
0x000000000001312c in _free_r ()
=> 0x1312c <_free_r+192>:	ld	a0,8(a6)
0x0000000000013130 in _free_r ()
=> 0x13130 <_free_r+196>:	andi	a0,a0,1
0x0000000000013132 in _free_r ()
=> 0x13132 <_free_r+198>:	bnez	a0,0x1315e <_free_r+242>
0x000000000001315e in _free_r ()
=> 0x1315e <_free_r+242>:	ori	a3,a5,1
0x0000000000013162 in _free_r ()
=> 0x13162 <_free_r+246>:	sd	a3,-8(s0)
0x0000000000013166 in _free_r ()
=> 0x13166 <_free_r+250>:	sd	a5,0(a2)
0x0000000000013168 in _free_r ()
=> 0x13168 <_free_r+252>:	li	a3,511
0x000000000001316c in _free_r ()
=> 0x1316c <_free_r+256>:	bgeu	a3,a5,0x130ee <_free_r+130>
0x0000000000013170 in _free_r ()
=> 0x13170 <_free_r+260>:	srli	a3,a5,0x9
0x0000000000013174 in _free_r ()
=> 0x13174 <_free_r+264>:	li	a2,4
0x0000000000013176 in _free_r ()
=> 0x13176 <_free_r+266>:	bltu	a2,a3,0x13214 <_free_r+424>
0x0000000000013214 in _free_r ()
=> 0x13214 <_free_r+424>:	li	a2,20
0x0000000000013216 in _free_r ()
=> 0x13216 <_free_r+426>:	bgeu	a2,a3,0x1323a <_free_r+462>
0x000000000001321a in _free_r ()
=> 0x1321a <_free_r+430>:	li	a2,84
0x000000000001321e in _free_r ()
=> 0x1321e <_free_r+434>:	bltu	a2,a3,0x13272 <_free_r+518>
0x0000000000013272 in _free_r ()
=> 0x13272 <_free_r+518>:	li	a2,340
0x0000000000013276 in _free_r ()
=> 0x13276 <_free_r+522>:	bltu	a2,a3,0x1328e <_free_r+546>
0x000000000001328e in _free_r ()
=> 0x1328e <_free_r+546>:	li	a2,1364
0x0000000000013292 in _free_r ()
=> 0x13292 <_free_r+550>:	bltu	a2,a3,0x132aa <_free_r+574>
0x00000000000132aa in _free_r ()
=> 0x132aa <_free_r+574>:	li	a0,2032
0x00000000000132ae in _free_r ()
=> 0x132ae <_free_r+578>:	li	a2,126
0x00000000000132b2 in _free_r ()
=> 0x132b2 <_free_r+582>:	j	0x1318c <_free_r+288>
0x000000000001318c in _free_r ()
=> 0x1318c <_free_r+288>:	add	a0,a0,a1
0x000000000001318e in _free_r ()
=> 0x1318e <_free_r+290>:	ld	a3,0(a0)
0x0000000000013190 in _free_r ()
=> 0x13190 <_free_r+292>:	addi	a0,a0,-16
0x0000000000013192 in _free_r ()
=> 0x13192 <_free_r+294>:	beq	a0,a3,0x1325c <_free_r+496>
0x000000000001325c in _free_r ()
=> 0x1325c <_free_r+496>:	ld	a6,8(a1)
0x0000000000013260 in _free_r ()
=> 0x13260 <_free_r+500>:	sraiw	a2,a2,0x2
0x0000000000013264 in _free_r ()
=> 0x13264 <_free_r+504>:	li	a5,1
0x0000000000013266 in _free_r ()
=> 0x13266 <_free_r+506>:	sll	a2,a5,a2
0x000000000001326a in _free_r ()
=> 0x1326a <_free_r+510>:	or	a2,a2,a6
0x000000000001326e in _free_r ()
=> 0x1326e <_free_r+514>:	sd	a2,8(a1)
0x0000000000013270 in _free_r ()
=> 0x13270 <_free_r+516>:	j	0x131a6 <_free_r+314>
0x00000000000131a6 in _free_r ()
=> 0x131a6 <_free_r+314>:	sd	a0,24(a4)
0x00000000000131a8 in _free_r ()
=> 0x131a8 <_free_r+316>:	sd	a3,16(a4)
0x00000000000131aa in _free_r ()
=> 0x131aa <_free_r+318>:	ld	s0,16(sp)
0x00000000000131ac in _free_r ()
=> 0x131ac <_free_r+320>:	sd	a4,16(a0)
0x00000000000131ae in _free_r ()
=> 0x131ae <_free_r+322>:	ld	ra,24(sp)
0x00000000000131b0 in _free_r ()
=> 0x131b0 <_free_r+324>:	mv	a0,s1
0x00000000000131b2 in _free_r ()
=> 0x131b2 <_free_r+326>:	ld	s1,8(sp)
0x00000000000131b4 in _free_r ()
=> 0x131b4 <_free_r+328>:	sd	a4,24(a3)
0x00000000000131b6 in _free_r ()
=> 0x131b6 <_free_r+330>:	addi	sp,sp,32
0x00000000000131b8 in _free_r ()
=> 0x131b8 <_free_r+332>:	j	0x10c6c <__malloc_unlock>
0x0000000000010c6c in __malloc_unlock ()
=> 0x10c6c <__malloc_unlock>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:68
68	  return (!correct);
=> 0x10270 <main+232>:	lw	a0,-44(s0)
0x0000000000010274	68	  return (!correct);
=> 0x10274 <main+236>:	seqz	a0,a0
0x0000000000010278	68	  return (!correct);
=> 0x10278 <main+240>:	ld	s0,112(sp)
0x000000000001027c in main (argc=<error reading variable: Cannot access memory at address 0x2aaabbdcc8>, argv=<error reading variable: Cannot access memory at address 0x2aaabbdcc0>) at main.c:68
68	  return (!correct);
=> 0x1027c <main+244>:	ld	ra,120(sp)
0x0000000000010280	68	  return (!correct);
=> 0x10280 <main+248>:	addi	sp,sp,128
0x0000000000010284	68	  return (!correct);
=> 0x10284 <main+252>:	ret
0x000000000001013a in _start ()
=> 0x1013a <_start+64>:	j	0x10504 <exit>
0x0000000000010504 in exit ()
=> 0x10504 <exit>:	addi	sp,sp,-16
0x0000000000010506 in exit ()
=> 0x10506 <exit+2>:	li	a1,0
0x0000000000010508 in exit ()
=> 0x10508 <exit+4>:	sd	s0,0(sp)
0x000000000001050a in exit ()
=> 0x1050a <exit+6>:	sd	ra,8(sp)
0x000000000001050c in exit ()
=> 0x1050c <exit+8>:	mv	s0,a0
0x000000000001050e in exit ()
=> 0x1050e <exit+10>:	jal	ra,0x12a0a <__call_exitprocs>
0x0000000000012a0a in __call_exitprocs ()
=> 0x12a0a <__call_exitprocs>:	addi	sp,sp,-80
0x0000000000012a0c in __call_exitprocs ()
=> 0x12a0c <__call_exitprocs+2>:	sd	s4,32(sp)
0x0000000000012a0e in __call_exitprocs ()
=> 0x12a0e <__call_exitprocs+4>:	ld	s4,1856(gp)
0x0000000000012a12 in __call_exitprocs ()
=> 0x12a12 <__call_exitprocs+8>:	sd	s2,48(sp)
0x0000000000012a14 in __call_exitprocs ()
=> 0x12a14 <__call_exitprocs+10>:	sd	ra,72(sp)
0x0000000000012a16 in __call_exitprocs ()
=> 0x12a16 <__call_exitprocs+12>:	ld	s2,504(s4)
0x0000000000012a1a in __call_exitprocs ()
=> 0x12a1a <__call_exitprocs+16>:	sd	s0,64(sp)
0x0000000000012a1c in __call_exitprocs ()
=> 0x12a1c <__call_exitprocs+18>:	sd	s1,56(sp)
0x0000000000012a1e in __call_exitprocs ()
=> 0x12a1e <__call_exitprocs+20>:	sd	s3,40(sp)
0x0000000000012a20 in __call_exitprocs ()
=> 0x12a20 <__call_exitprocs+22>:	sd	s5,24(sp)
0x0000000000012a22 in __call_exitprocs ()
=> 0x12a22 <__call_exitprocs+24>:	sd	s6,16(sp)
0x0000000000012a24 in __call_exitprocs ()
=> 0x12a24 <__call_exitprocs+26>:	sd	s7,8(sp)
0x0000000000012a26 in __call_exitprocs ()
=> 0x12a26 <__call_exitprocs+28>:	sd	s8,0(sp)
0x0000000000012a28 in __call_exitprocs ()
=> 0x12a28 <__call_exitprocs+30>:	beqz	s2,0x12a58 <__call_exitprocs+78>
0x0000000000012a2c in __call_exitprocs ()
=> 0x12a2c <__call_exitprocs+34>:	mv	s6,a0
0x0000000000012a2e in __call_exitprocs ()
=> 0x12a2e <__call_exitprocs+36>:	mv	s7,a1
0x0000000000012a30 in __call_exitprocs ()
=> 0x12a30 <__call_exitprocs+38>:	li	s5,1
0x0000000000012a32 in __call_exitprocs ()
=> 0x12a32 <__call_exitprocs+40>:	li	s3,-1
0x0000000000012a34 in __call_exitprocs ()
=> 0x12a34 <__call_exitprocs+42>:	lw	s1,8(s2)
0x0000000000012a38 in __call_exitprocs ()
=> 0x12a38 <__call_exitprocs+46>:	addiw	s0,s1,-1
0x0000000000012a3c in __call_exitprocs ()
=> 0x12a3c <__call_exitprocs+50>:	bltz	s0,0x12a58 <__call_exitprocs+78>
0x0000000000012a40 in __call_exitprocs ()
=> 0x12a40 <__call_exitprocs+54>:	slli	s1,s1,0x3
0x0000000000012a42 in __call_exitprocs ()
=> 0x12a42 <__call_exitprocs+56>:	add	s1,s1,s2
0x0000000000012a44 in __call_exitprocs ()
=> 0x12a44 <__call_exitprocs+58>:	beqz	s7,0x12a70 <__call_exitprocs+102>
0x0000000000012a70 in __call_exitprocs ()
=> 0x12a70 <__call_exitprocs+102>:	lw	a5,8(s2)
0x0000000000012a74 in __call_exitprocs ()
=> 0x12a74 <__call_exitprocs+106>:	ld	a4,8(s1)
0x0000000000012a76 in __call_exitprocs ()
=> 0x12a76 <__call_exitprocs+108>:	addiw	a5,a5,-1
0x0000000000012a78 in __call_exitprocs ()
=> 0x12a78 <__call_exitprocs+110>:	beq	a5,s0,0x12ac0 <__call_exitprocs+182>
0x0000000000012ac0 in __call_exitprocs ()
=> 0x12ac0 <__call_exitprocs+182>:	sw	s0,8(s2)
0x0000000000012ac4 in __call_exitprocs ()
=> 0x12ac4 <__call_exitprocs+186>:	j	0x12a80 <__call_exitprocs+118>
0x0000000000012a80 in __call_exitprocs ()
=> 0x12a80 <__call_exitprocs+118>:	beqz	a4,0x12a50 <__call_exitprocs+70>
0x0000000000012a82 in __call_exitprocs ()
=> 0x12a82 <__call_exitprocs+120>:	lw	a5,784(s2)
0x0000000000012a86 in __call_exitprocs ()
=> 0x12a86 <__call_exitprocs+124>:	sllw	a3,s5,s0
0x0000000000012a8a in __call_exitprocs ()
=> 0x12a8a <__call_exitprocs+128>:	lw	s8,8(s2)
0x0000000000012a8e in __call_exitprocs ()
=> 0x12a8e <__call_exitprocs+132>:	and	a5,a5,a3
0x0000000000012a90 in __call_exitprocs ()
=> 0x12a90 <__call_exitprocs+134>:	sext.w	a5,a5
0x0000000000012a92 in __call_exitprocs ()
=> 0x12a92 <__call_exitprocs+136>:	bnez	a5,0x12aac <__call_exitprocs+162>
0x0000000000012a94 in __call_exitprocs ()
=> 0x12a94 <__call_exitprocs+138>:	jalr	a4
0x0000000000012f62 in __libc_fini_array ()
=> 0x12f62 <__libc_fini_array>:	addi	sp,sp,-32
0x0000000000012f64 in __libc_fini_array ()
=> 0x12f64 <__libc_fini_array+2>:	sd	s0,16(sp)
0x0000000000012f66 in __libc_fini_array ()
=> 0x12f66 <__libc_fini_array+4>:	lui	a5,0x1e
0x0000000000012f68 in __libc_fini_array ()
=> 0x12f68 <__libc_fini_array+6>:	lui	s0,0x1e
0x0000000000012f6a in __libc_fini_array ()
=> 0x12f6a <__libc_fini_array+8>:	addi	s0,s0,1640
0x0000000000012f6e in __libc_fini_array ()
=> 0x12f6e <__libc_fini_array+12>:	addi	a5,a5,1648
0x0000000000012f72 in __libc_fini_array ()
=> 0x12f72 <__libc_fini_array+16>:	sub	a5,a5,s0
0x0000000000012f74 in __libc_fini_array ()
=> 0x12f74 <__libc_fini_array+18>:	sd	s1,8(sp)
0x0000000000012f76 in __libc_fini_array ()
=> 0x12f76 <__libc_fini_array+20>:	sd	ra,24(sp)
0x0000000000012f78 in __libc_fini_array ()
=> 0x12f78 <__libc_fini_array+22>:	srai	s1,a5,0x3
0x0000000000012f7c in __libc_fini_array ()
=> 0x12f7c <__libc_fini_array+26>:	beqz	s1,0x12f8c <__libc_fini_array+42>
0x0000000000012f7e in __libc_fini_array ()
=> 0x12f7e <__libc_fini_array+28>:	addi	a5,a5,-8
0x0000000000012f80 in __libc_fini_array ()
=> 0x12f80 <__libc_fini_array+30>:	add	s0,s0,a5
0x0000000000012f82 in __libc_fini_array ()
=> 0x12f82 <__libc_fini_array+32>:	ld	a5,0(s0)
0x0000000000012f84 in __libc_fini_array ()
=> 0x12f84 <__libc_fini_array+34>:	addi	s1,s1,-1
0x0000000000012f86 in __libc_fini_array ()
=> 0x12f86 <__libc_fini_array+36>:	addi	s0,s0,-8
0x0000000000012f88 in __libc_fini_array ()
=> 0x12f88 <__libc_fini_array+38>:	jalr	a5
0x000000000001013c in __do_global_dtors_aux ()
=> 0x1013c <__do_global_dtors_aux>:	lbu	a4,1952(gp)
0x0000000000010140 in __do_global_dtors_aux ()
=> 0x10140 <__do_global_dtors_aux+4>:	bnez	a4,0x1016c <__do_global_dtors_aux+48>
0x0000000000010142 in __do_global_dtors_aux ()
=> 0x10142 <__do_global_dtors_aux+6>:	addi	sp,sp,-16
0x0000000000010144 in __do_global_dtors_aux ()
=> 0x10144 <__do_global_dtors_aux+8>:	sd	s0,0(sp)
0x0000000000010146 in __do_global_dtors_aux ()
=> 0x10146 <__do_global_dtors_aux+10>:	mv	s0,a5
0x0000000000010148 in __do_global_dtors_aux ()
=> 0x10148 <__do_global_dtors_aux+12>:	sd	ra,8(sp)
0x000000000001014a in __do_global_dtors_aux ()
=> 0x1014a <__do_global_dtors_aux+14>:	li	a5,0
0x000000000001014e in __do_global_dtors_aux ()
=> 0x1014e <__do_global_dtors_aux+18>:	beqz	a5,0x1015e <__do_global_dtors_aux+34>
0x000000000001015e in __do_global_dtors_aux ()
=> 0x1015e <__do_global_dtors_aux+34>:	li	a5,1
0x0000000000010160 in __do_global_dtors_aux ()
=> 0x10160 <__do_global_dtors_aux+36>:	ld	ra,8(sp)
0x0000000000010162 in __do_global_dtors_aux ()
=> 0x10162 <__do_global_dtors_aux+38>:	sb	a5,1952(gp)
0x0000000000010166 in __do_global_dtors_aux ()
=> 0x10166 <__do_global_dtors_aux+42>:	ld	s0,0(sp)
0x0000000000010168 in __do_global_dtors_aux ()
=> 0x10168 <__do_global_dtors_aux+44>:	addi	sp,sp,16
0x000000000001016a in __do_global_dtors_aux ()
=> 0x1016a <__do_global_dtors_aux+46>:	ret
0x0000000000012f8a in __libc_fini_array ()
=> 0x12f8a <__libc_fini_array+40>:	bnez	s1,0x12f82 <__libc_fini_array+32>
0x0000000000012f8c in __libc_fini_array ()
=> 0x12f8c <__libc_fini_array+42>:	ld	ra,24(sp)
0x0000000000012f8e in __libc_fini_array ()
=> 0x12f8e <__libc_fini_array+44>:	ld	s0,16(sp)
0x0000000000012f90 in __libc_fini_array ()
=> 0x12f90 <__libc_fini_array+46>:	ld	s1,8(sp)
0x0000000000012f92 in __libc_fini_array ()
=> 0x12f92 <__libc_fini_array+48>:	addi	sp,sp,32
0x0000000000012f94 in __libc_fini_array ()
=> 0x12f94 <__libc_fini_array+50>:	ret
0x0000000000012a96 in __call_exitprocs ()
=> 0x12a96 <__call_exitprocs+140>:	lw	a4,8(s2)
0x0000000000012a9a in __call_exitprocs ()
=> 0x12a9a <__call_exitprocs+144>:	ld	a5,504(s4)
0x0000000000012a9e in __call_exitprocs ()
=> 0x12a9e <__call_exitprocs+148>:	bne	a4,s8,0x12aa6 <__call_exitprocs+156>
0x0000000000012aa2 in __call_exitprocs ()
=> 0x12aa2 <__call_exitprocs+152>:	beq	a5,s2,0x12a50 <__call_exitprocs+70>
0x0000000000012a50 in __call_exitprocs ()
=> 0x12a50 <__call_exitprocs+70>:	addiw	s0,s0,-1
0x0000000000012a52 in __call_exitprocs ()
=> 0x12a52 <__call_exitprocs+72>:	addi	s1,s1,-8
0x0000000000012a54 in __call_exitprocs ()
=> 0x12a54 <__call_exitprocs+74>:	bne	s0,s3,0x12a44 <__call_exitprocs+58>
0x0000000000012a58 in __call_exitprocs ()
=> 0x12a58 <__call_exitprocs+78>:	ld	ra,72(sp)
0x0000000000012a5a in __call_exitprocs ()
=> 0x12a5a <__call_exitprocs+80>:	ld	s0,64(sp)
0x0000000000012a5c in __call_exitprocs ()
=> 0x12a5c <__call_exitprocs+82>:	ld	s1,56(sp)
0x0000000000012a5e in __call_exitprocs ()
=> 0x12a5e <__call_exitprocs+84>:	ld	s2,48(sp)
0x0000000000012a60 in __call_exitprocs ()
=> 0x12a60 <__call_exitprocs+86>:	ld	s3,40(sp)
0x0000000000012a62 in __call_exitprocs ()
=> 0x12a62 <__call_exitprocs+88>:	ld	s4,32(sp)
0x0000000000012a64 in __call_exitprocs ()
=> 0x12a64 <__call_exitprocs+90>:	ld	s5,24(sp)
0x0000000000012a66 in __call_exitprocs ()
=> 0x12a66 <__call_exitprocs+92>:	ld	s6,16(sp)
0x0000000000012a68 in __call_exitprocs ()
=> 0x12a68 <__call_exitprocs+94>:	ld	s7,8(sp)
0x0000000000012a6a in __call_exitprocs ()
=> 0x12a6a <__call_exitprocs+96>:	ld	s8,0(sp)
0x0000000000012a6c in __call_exitprocs ()
=> 0x12a6c <__call_exitprocs+98>:	addi	sp,sp,80
0x0000000000012a6e in __call_exitprocs ()
=> 0x12a6e <__call_exitprocs+100>:	ret
0x0000000000010512 in exit ()
=> 0x10512 <exit+14>:	ld	a0,1856(gp)
0x0000000000010516 in exit ()
=> 0x10516 <exit+18>:	ld	a5,88(a0)
0x0000000000010518 in exit ()
=> 0x10518 <exit+20>:	beqz	a5,0x1051c <exit+24>
0x000000000001051a in exit ()
=> 0x1051a <exit+22>:	jalr	a5
0x0000000000012ce2 in _cleanup_r ()
=> 0x12ce2 <_cleanup_r>:	lui	a1,0x19
0x0000000000012ce4 in _cleanup_r ()
=> 0x12ce4 <_cleanup_r+2>:	addi	a1,a1,1094
0x0000000000012ce8 in _cleanup_r ()
=> 0x12ce8 <_cleanup_r+6>:	j	0x13340 <_fwalk_reent>
0x0000000000013340 in _fwalk_reent ()
=> 0x13340 <_fwalk_reent>:	addi	sp,sp,-80
0x0000000000013342 in _fwalk_reent ()
=> 0x13342 <_fwalk_reent+2>:	sd	s2,48(sp)
0x0000000000013344 in _fwalk_reent ()
=> 0x13344 <_fwalk_reent+4>:	sd	s3,40(sp)
0x0000000000013346 in _fwalk_reent ()
=> 0x13346 <_fwalk_reent+6>:	sd	s4,32(sp)
0x0000000000013348 in _fwalk_reent ()
=> 0x13348 <_fwalk_reent+8>:	sd	s5,24(sp)
0x000000000001334a in _fwalk_reent ()
=> 0x1334a <_fwalk_reent+10>:	sd	s6,16(sp)
0x000000000001334c in _fwalk_reent ()
=> 0x1334c <_fwalk_reent+12>:	sd	s7,8(sp)
0x000000000001334e in _fwalk_reent ()
=> 0x1334e <_fwalk_reent+14>:	sd	s8,0(sp)
0x0000000000013350 in _fwalk_reent ()
=> 0x13350 <_fwalk_reent+16>:	sd	ra,72(sp)
0x0000000000013352 in _fwalk_reent ()
=> 0x13352 <_fwalk_reent+18>:	sd	s0,64(sp)
0x0000000000013354 in _fwalk_reent ()
=> 0x13354 <_fwalk_reent+20>:	sd	s1,56(sp)
0x0000000000013356 in _fwalk_reent ()
=> 0x13356 <_fwalk_reent+22>:	mv	s8,a0
0x0000000000013358 in _fwalk_reent ()
=> 0x13358 <_fwalk_reent+24>:	mv	s4,a1
0x000000000001335a in _fwalk_reent ()
=> 0x1335a <_fwalk_reent+26>:	addi	s2,a0,1312
0x000000000001335e in _fwalk_reent ()
=> 0x1335e <_fwalk_reent+30>:	li	s6,0
0x0000000000013360 in _fwalk_reent ()
=> 0x13360 <_fwalk_reent+32>:	li	s5,176
0x0000000000013364 in _fwalk_reent ()
=> 0x13364 <_fwalk_reent+36>:	li	s7,1
0x0000000000013366 in _fwalk_reent ()
=> 0x13366 <_fwalk_reent+38>:	li	s3,-1
0x0000000000013368 in _fwalk_reent ()
=> 0x13368 <_fwalk_reent+40>:	lw	a5,8(s2)
0x000000000001336c in _fwalk_reent ()
=> 0x1336c <_fwalk_reent+44>:	ld	s0,16(s2)
0x0000000000013370 in _fwalk_reent ()
=> 0x13370 <_fwalk_reent+48>:	blez	a5,0x133a8 <_fwalk_reent+104>
0x0000000000013374 in _fwalk_reent ()
=> 0x13374 <_fwalk_reent+52>:	addiw	s1,a5,-1
0x0000000000013378 in _fwalk_reent ()
=> 0x13378 <_fwalk_reent+56>:	slli	s1,s1,0x20
0x000000000001337a in _fwalk_reent ()
=> 0x1337a <_fwalk_reent+58>:	srli	s1,s1,0x20
0x000000000001337c in _fwalk_reent ()
=> 0x1337c <_fwalk_reent+60>:	addi	s1,s1,1
0x000000000001337e in _fwalk_reent ()
=> 0x1337e <_fwalk_reent+62>:	mul	s1,s1,s5
0x0000000000013382 in _fwalk_reent ()
=> 0x13382 <_fwalk_reent+66>:	add	s1,s1,s0
0x0000000000013384 in _fwalk_reent ()
=> 0x13384 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013388 in _fwalk_reent ()
=> 0x13388 <_fwalk_reent+72>:	bgeu	s7,a5,0x133a0 <_fwalk_reent+96>
0x000000000001338c in _fwalk_reent ()
=> 0x1338c <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013390 in _fwalk_reent ()
=> 0x13390 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013392 in _fwalk_reent ()
=> 0x13392 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013394 in _fwalk_reent ()
=> 0x13394 <_fwalk_reent+84>:	beq	a5,s3,0x133a0 <_fwalk_reent+96>
0x0000000000013398 in _fwalk_reent ()
=> 0x13398 <_fwalk_reent+88>:	jalr	s4
0x0000000000019446 in _fclose_r ()
=> 0x19446 <_fclose_r>:	beqz	a1,0x19480 <_fclose_r+58>
0x0000000000019448 in _fclose_r ()
=> 0x19448 <_fclose_r+2>:	addi	sp,sp,-32
0x000000000001944a in _fclose_r ()
=> 0x1944a <_fclose_r+4>:	sd	s0,16(sp)
0x000000000001944c in _fclose_r ()
=> 0x1944c <_fclose_r+6>:	sd	ra,24(sp)
0x000000000001944e in _fclose_r ()
=> 0x1944e <_fclose_r+8>:	mv	s0,a0
0x0000000000019450 in _fclose_r ()
=> 0x19450 <_fclose_r+10>:	beqz	a0,0x19456 <_fclose_r+16>
0x0000000000019452 in _fclose_r ()
=> 0x19452 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019454 in _fclose_r ()
=> 0x19454 <_fclose_r+14>:	beqz	a5,0x19470 <_fclose_r+42>
0x0000000000019456 in _fclose_r ()
=> 0x19456 <_fclose_r+16>:	lh	a5,16(a1)
0x000000000001945a in _fclose_r ()
=> 0x1945a <_fclose_r+20>:	bnez	a5,0x19466 <_fclose_r+32>
0x0000000000019466 in _fclose_r ()
=> 0x19466 <_fclose_r+32>:	mv	a0,s0
0x0000000000019468 in _fclose_r ()
=> 0x19468 <_fclose_r+34>:	ld	s0,16(sp)
0x000000000001946a in _fclose_r ()
=> 0x1946a <_fclose_r+36>:	ld	ra,24(sp)
0x000000000001946c in _fclose_r ()
=> 0x1946c <_fclose_r+38>:	addi	sp,sp,32
0x000000000001946e in _fclose_r ()
=> 0x1946e <_fclose_r+40>:	j	0x193c6 <_fclose_r.part.0>
0x00000000000193c6 in _fclose_r.part.0 ()
=> 0x193c6 <_fclose_r.part.0>:	addi	sp,sp,-32
0x00000000000193c8 in _fclose_r.part.0 ()
=> 0x193c8 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x00000000000193ca in _fclose_r.part.0 ()
=> 0x193ca <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x00000000000193cc in _fclose_r.part.0 ()
=> 0x193cc <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x00000000000193ce in _fclose_r.part.0 ()
=> 0x193ce <_fclose_r.part.0+8>:	mv	s0,a1
0x00000000000193d0 in _fclose_r.part.0 ()
=> 0x193d0 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x00000000000193d2 in _fclose_r.part.0 ()
=> 0x193d2 <_fclose_r.part.0+12>:	mv	s1,a0
0x00000000000193d4 in _fclose_r.part.0 ()
=> 0x193d4 <_fclose_r.part.0+14>:	jal	ra,0x12acc <__sflush_r>
0x0000000000012acc in __sflush_r ()
=> 0x12acc <__sflush_r>:	lh	a5,16(a1)
0x0000000000012ad0 in __sflush_r ()
=> 0x12ad0 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000012ad2 in __sflush_r ()
=> 0x12ad2 <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000012ad4 in __sflush_r ()
=> 0x12ad4 <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000012ad6 in __sflush_r ()
=> 0x12ad6 <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000012ad8 in __sflush_r ()
=> 0x12ad8 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000012ada in __sflush_r ()
=> 0x12ada <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000012adc in __sflush_r ()
=> 0x12adc <__sflush_r+16>:	andi	a3,a5,8
0x0000000000012ae0 in __sflush_r ()
=> 0x12ae0 <__sflush_r+20>:	mv	s0,a1
0x0000000000012ae2 in __sflush_r ()
=> 0x12ae2 <__sflush_r+22>:	mv	s3,a0
0x0000000000012ae4 in __sflush_r ()
=> 0x12ae4 <__sflush_r+24>:	bnez	a3,0x12b98 <__sflush_r+204>
0x0000000000012ae6 in __sflush_r ()
=> 0x12ae6 <__sflush_r+26>:	lui	a4,0x1
0x0000000000012ae8 in __sflush_r ()
=> 0x12ae8 <__sflush_r+28>:	addi	a4,a4,-2048
0x0000000000012aec in __sflush_r ()
=> 0x12aec <__sflush_r+32>:	lw	a3,8(a1)
0x0000000000012aee in __sflush_r ()
=> 0x12aee <__sflush_r+34>:	or	a5,a5,a4
0x0000000000012af0 in __sflush_r ()
=> 0x12af0 <__sflush_r+36>:	sh	a5,16(a1)
0x0000000000012af4 in __sflush_r ()
=> 0x12af4 <__sflush_r+40>:	blez	a3,0x12bf4 <__sflush_r+296>
0x0000000000012bf4 in __sflush_r ()
=> 0x12bf4 <__sflush_r+296>:	lw	a4,112(a1)
0x0000000000012bf6 in __sflush_r ()
=> 0x12bf6 <__sflush_r+298>:	bgtz	a4,0x12af8 <__sflush_r+44>
0x0000000000012bfa in __sflush_r ()
=> 0x12bfa <__sflush_r+302>:	j	0x12b88 <__sflush_r+188>
0x0000000000012b88 in __sflush_r ()
=> 0x12b88 <__sflush_r+188>:	li	a0,0
0x0000000000012b8a in __sflush_r ()
=> 0x12b8a <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000012b8c in __sflush_r ()
=> 0x12b8c <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000012b8e in __sflush_r ()
=> 0x12b8e <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000012b90 in __sflush_r ()
=> 0x12b90 <__sflush_r+196>:	ld	s2,16(sp)
0x0000000000012b92 in __sflush_r ()
=> 0x12b92 <__sflush_r+198>:	ld	s3,8(sp)
0x0000000000012b94 in __sflush_r ()
=> 0x12b94 <__sflush_r+200>:	addi	sp,sp,48
0x0000000000012b96 in __sflush_r ()
=> 0x12b96 <__sflush_r+202>:	ret
0x00000000000193d8 in _fclose_r.part.0 ()
=> 0x193d8 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x00000000000193da in _fclose_r.part.0 ()
=> 0x193da <_fclose_r.part.0+20>:	mv	s2,a0
0x00000000000193dc in _fclose_r.part.0 ()
=> 0x193dc <_fclose_r.part.0+22>:	beqz	a5,0x193e8 <_fclose_r.part.0+34>
0x00000000000193de in _fclose_r.part.0 ()
=> 0x193de <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x00000000000193e0 in _fclose_r.part.0 ()
=> 0x193e0 <_fclose_r.part.0+26>:	mv	a0,s1
0x00000000000193e2 in _fclose_r.part.0 ()
=> 0x193e2 <_fclose_r.part.0+28>:	jalr	a5
0x00000000000166dc in __sclose ()
=> 0x166dc <__sclose>:	lh	a1,18(a1)
0x00000000000166e0 in __sclose ()
=> 0x166e0 <__sclose+4>:	j	0x1938a <_close_r>
0x000000000001938a in _close_r ()
=> 0x1938a <_close_r>:	addi	sp,sp,-32
0x000000000001938c in _close_r ()
=> 0x1938c <_close_r+2>:	sd	s0,16(sp)
0x000000000001938e in _close_r ()
=> 0x1938e <_close_r+4>:	sd	s1,8(sp)
0x0000000000019390 in _close_r ()
=> 0x19390 <_close_r+6>:	mv	s0,a0
0x0000000000019392 in _close_r ()
=> 0x19392 <_close_r+8>:	mv	a0,a1
0x0000000000019394 in _close_r ()
=> 0x19394 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019396 in _close_r ()
=> 0x19396 <_close_r+12>:	sw	zero,1936(gp)
0x000000000001939a in _close_r ()
=> 0x1939a <_close_r+16>:	jal	ra,0x1b1ea <_close>
0x000000000001b1ea in _close ()
=> 0x1b1ea <_close>:	addi	sp,sp,-16
0x000000000001b1ec in _close ()
=> 0x1b1ec <_close+2>:	sd	ra,8(sp)
0x000000000001b1ee in _close ()
=> 0x1b1ee <_close+4>:	sd	s0,0(sp)
0x000000000001b1f0 in _close ()
=> 0x1b1f0 <_close+6>:	li	a7,57
0x000000000001b1f4 in _close ()
=> 0x1b1f4 <_close+10>:	ecall
0x000000000001b1f8 in _close ()
=> 0x1b1f8 <_close+14>:	mv	s0,a0
0x000000000001b1fa in _close ()
=> 0x1b1fa <_close+16>:	bltz	a0,0x1b208 <_close+30>
0x000000000001b1fe in _close ()
=> 0x1b1fe <_close+20>:	sext.w	a0,a0
0x000000000001b200 in _close ()
=> 0x1b200 <_close+22>:	ld	ra,8(sp)
0x000000000001b202 in _close ()
=> 0x1b202 <_close+24>:	ld	s0,0(sp)
0x000000000001b204 in _close ()
=> 0x1b204 <_close+26>:	addi	sp,sp,16
0x000000000001b206 in _close ()
=> 0x1b206 <_close+28>:	ret
0x000000000001939e in _close_r ()
=> 0x1939e <_close_r+20>:	li	a5,-1
0x00000000000193a0 in _close_r ()
=> 0x193a0 <_close_r+22>:	beq	a0,a5,0x193ae <_close_r+36>
0x00000000000193a4 in _close_r ()
=> 0x193a4 <_close_r+26>:	ld	ra,24(sp)
0x00000000000193a6 in _close_r ()
=> 0x193a6 <_close_r+28>:	ld	s0,16(sp)
0x00000000000193a8 in _close_r ()
=> 0x193a8 <_close_r+30>:	ld	s1,8(sp)
0x00000000000193aa in _close_r ()
=> 0x193aa <_close_r+32>:	addi	sp,sp,32
0x00000000000193ac in _close_r ()
=> 0x193ac <_close_r+34>:	ret
0x00000000000193e4 in _fclose_r.part.0 ()
=> 0x193e4 <_fclose_r.part.0+30>:	bltz	a0,0x19430 <_fclose_r.part.0+106>
0x00000000000193e8 in _fclose_r.part.0 ()
=> 0x193e8 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x00000000000193ec in _fclose_r.part.0 ()
=> 0x193ec <_fclose_r.part.0+38>:	andi	a5,a5,128
0x00000000000193f0 in _fclose_r.part.0 ()
=> 0x193f0 <_fclose_r.part.0+42>:	bnez	a5,0x1943c <_fclose_r.part.0+118>
0x00000000000193f2 in _fclose_r.part.0 ()
=> 0x193f2 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x00000000000193f4 in _fclose_r.part.0 ()
=> 0x193f4 <_fclose_r.part.0+46>:	beqz	a1,0x19408 <_fclose_r.part.0+66>
0x0000000000019408 in _fclose_r.part.0 ()
=> 0x19408 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x000000000001940a in _fclose_r.part.0 ()
=> 0x1940a <_fclose_r.part.0+68>:	beqz	a1,0x19416 <_fclose_r.part.0+80>
0x0000000000019416 in _fclose_r.part.0 ()
=> 0x19416 <_fclose_r.part.0+80>:	jal	ra,0x12f42 <__sfp_lock_acquire>
0x0000000000012f42 in __sfp_lock_acquire ()
=> 0x12f42 <__sfp_lock_acquire>:	ret
0x000000000001941a in _fclose_r.part.0 ()
=> 0x1941a <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x000000000001941e in _fclose_r.part.0 ()
=> 0x1941e <_fclose_r.part.0+88>:	jal	ra,0x12f44 <__sfp_lock_release>
0x0000000000012f44 in __sfp_lock_release ()
=> 0x12f44 <__sfp_lock_release>:	ret
0x0000000000019422 in _fclose_r.part.0 ()
=> 0x19422 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019424 in _fclose_r.part.0 ()
=> 0x19424 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019426 in _fclose_r.part.0 ()
=> 0x19426 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019428 in _fclose_r.part.0 ()
=> 0x19428 <_fclose_r.part.0+98>:	mv	a0,s2
0x000000000001942a in _fclose_r.part.0 ()
=> 0x1942a <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x000000000001942c in _fclose_r.part.0 ()
=> 0x1942c <_fclose_r.part.0+102>:	addi	sp,sp,32
0x000000000001942e in _fclose_r.part.0 ()
=> 0x1942e <_fclose_r.part.0+104>:	ret
0x000000000001339a in _fwalk_reent ()
=> 0x1339a <_fwalk_reent+90>:	or	s6,a0,s6
0x000000000001339e in _fwalk_reent ()
=> 0x1339e <_fwalk_reent+94>:	sext.w	s6,s6
0x00000000000133a0 in _fwalk_reent ()
=> 0x133a0 <_fwalk_reent+96>:	addi	s0,s0,176
0x00000000000133a4 in _fwalk_reent ()
=> 0x133a4 <_fwalk_reent+100>:	bne	s1,s0,0x13384 <_fwalk_reent+68>
0x0000000000013384 in _fwalk_reent ()
=> 0x13384 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013388 in _fwalk_reent ()
=> 0x13388 <_fwalk_reent+72>:	bgeu	s7,a5,0x133a0 <_fwalk_reent+96>
0x000000000001338c in _fwalk_reent ()
=> 0x1338c <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013390 in _fwalk_reent ()
=> 0x13390 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013392 in _fwalk_reent ()
=> 0x13392 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013394 in _fwalk_reent ()
=> 0x13394 <_fwalk_reent+84>:	beq	a5,s3,0x133a0 <_fwalk_reent+96>
0x0000000000013398 in _fwalk_reent ()
=> 0x13398 <_fwalk_reent+88>:	jalr	s4
0x0000000000019446 in _fclose_r ()
=> 0x19446 <_fclose_r>:	beqz	a1,0x19480 <_fclose_r+58>
0x0000000000019448 in _fclose_r ()
=> 0x19448 <_fclose_r+2>:	addi	sp,sp,-32
0x000000000001944a in _fclose_r ()
=> 0x1944a <_fclose_r+4>:	sd	s0,16(sp)
0x000000000001944c in _fclose_r ()
=> 0x1944c <_fclose_r+6>:	sd	ra,24(sp)
0x000000000001944e in _fclose_r ()
=> 0x1944e <_fclose_r+8>:	mv	s0,a0
0x0000000000019450 in _fclose_r ()
=> 0x19450 <_fclose_r+10>:	beqz	a0,0x19456 <_fclose_r+16>
0x0000000000019452 in _fclose_r ()
=> 0x19452 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019454 in _fclose_r ()
=> 0x19454 <_fclose_r+14>:	beqz	a5,0x19470 <_fclose_r+42>
0x0000000000019456 in _fclose_r ()
=> 0x19456 <_fclose_r+16>:	lh	a5,16(a1)
0x000000000001945a in _fclose_r ()
=> 0x1945a <_fclose_r+20>:	bnez	a5,0x19466 <_fclose_r+32>
0x0000000000019466 in _fclose_r ()
=> 0x19466 <_fclose_r+32>:	mv	a0,s0
0x0000000000019468 in _fclose_r ()
=> 0x19468 <_fclose_r+34>:	ld	s0,16(sp)
0x000000000001946a in _fclose_r ()
=> 0x1946a <_fclose_r+36>:	ld	ra,24(sp)
0x000000000001946c in _fclose_r ()
=> 0x1946c <_fclose_r+38>:	addi	sp,sp,32
0x000000000001946e in _fclose_r ()
=> 0x1946e <_fclose_r+40>:	j	0x193c6 <_fclose_r.part.0>
0x00000000000193c6 in _fclose_r.part.0 ()
=> 0x193c6 <_fclose_r.part.0>:	addi	sp,sp,-32
0x00000000000193c8 in _fclose_r.part.0 ()
=> 0x193c8 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x00000000000193ca in _fclose_r.part.0 ()
=> 0x193ca <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x00000000000193cc in _fclose_r.part.0 ()
=> 0x193cc <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x00000000000193ce in _fclose_r.part.0 ()
=> 0x193ce <_fclose_r.part.0+8>:	mv	s0,a1
0x00000000000193d0 in _fclose_r.part.0 ()
=> 0x193d0 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x00000000000193d2 in _fclose_r.part.0 ()
=> 0x193d2 <_fclose_r.part.0+12>:	mv	s1,a0
0x00000000000193d4 in _fclose_r.part.0 ()
=> 0x193d4 <_fclose_r.part.0+14>:	jal	ra,0x12acc <__sflush_r>
0x0000000000012acc in __sflush_r ()
=> 0x12acc <__sflush_r>:	lh	a5,16(a1)
0x0000000000012ad0 in __sflush_r ()
=> 0x12ad0 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000012ad2 in __sflush_r ()
=> 0x12ad2 <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000012ad4 in __sflush_r ()
=> 0x12ad4 <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000012ad6 in __sflush_r ()
=> 0x12ad6 <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000012ad8 in __sflush_r ()
=> 0x12ad8 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000012ada in __sflush_r ()
=> 0x12ada <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000012adc in __sflush_r ()
=> 0x12adc <__sflush_r+16>:	andi	a3,a5,8
0x0000000000012ae0 in __sflush_r ()
=> 0x12ae0 <__sflush_r+20>:	mv	s0,a1
0x0000000000012ae2 in __sflush_r ()
=> 0x12ae2 <__sflush_r+22>:	mv	s3,a0
0x0000000000012ae4 in __sflush_r ()
=> 0x12ae4 <__sflush_r+24>:	bnez	a3,0x12b98 <__sflush_r+204>
0x0000000000012b98 in __sflush_r ()
=> 0x12b98 <__sflush_r+204>:	ld	s2,24(a1)
0x0000000000012b9c in __sflush_r ()
=> 0x12b9c <__sflush_r+208>:	beqz	s2,0x12b88 <__sflush_r+188>
0x0000000000012ba0 in __sflush_r ()
=> 0x12ba0 <__sflush_r+212>:	ld	s1,0(a1)
0x0000000000012ba2 in __sflush_r ()
=> 0x12ba2 <__sflush_r+214>:	slli	a4,a5,0x30
0x0000000000012ba6 in __sflush_r ()
=> 0x12ba6 <__sflush_r+218>:	srli	a4,a4,0x30
0x0000000000012ba8 in __sflush_r ()
=> 0x12ba8 <__sflush_r+220>:	andi	a4,a4,3
0x0000000000012baa in __sflush_r ()
=> 0x12baa <__sflush_r+222>:	sd	s2,0(a1)
0x0000000000012bae in __sflush_r ()
=> 0x12bae <__sflush_r+226>:	subw	s1,s1,s2
0x0000000000012bb2 in __sflush_r ()
=> 0x12bb2 <__sflush_r+230>:	li	a5,0
0x0000000000012bb4 in __sflush_r ()
=> 0x12bb4 <__sflush_r+232>:	bnez	a4,0x12bb8 <__sflush_r+236>
0x0000000000012bb8 in __sflush_r ()
=> 0x12bb8 <__sflush_r+236>:	sw	a5,12(s0)
0x0000000000012bba in __sflush_r ()
=> 0x12bba <__sflush_r+238>:	bgtz	s1,0x12bc6 <__sflush_r+250>
0x0000000000012bbe in __sflush_r ()
=> 0x12bbe <__sflush_r+242>:	j	0x12b88 <__sflush_r+188>
0x0000000000012b88 in __sflush_r ()
=> 0x12b88 <__sflush_r+188>:	li	a0,0
0x0000000000012b8a in __sflush_r ()
=> 0x12b8a <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000012b8c in __sflush_r ()
=> 0x12b8c <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000012b8e in __sflush_r ()
=> 0x12b8e <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000012b90 in __sflush_r ()
=> 0x12b90 <__sflush_r+196>:	ld	s2,16(sp)
0x0000000000012b92 in __sflush_r ()
=> 0x12b92 <__sflush_r+198>:	ld	s3,8(sp)
0x0000000000012b94 in __sflush_r ()
=> 0x12b94 <__sflush_r+200>:	addi	sp,sp,48
0x0000000000012b96 in __sflush_r ()
=> 0x12b96 <__sflush_r+202>:	ret
0x00000000000193d8 in _fclose_r.part.0 ()
=> 0x193d8 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x00000000000193da in _fclose_r.part.0 ()
=> 0x193da <_fclose_r.part.0+20>:	mv	s2,a0
0x00000000000193dc in _fclose_r.part.0 ()
=> 0x193dc <_fclose_r.part.0+22>:	beqz	a5,0x193e8 <_fclose_r.part.0+34>
0x00000000000193de in _fclose_r.part.0 ()
=> 0x193de <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x00000000000193e0 in _fclose_r.part.0 ()
=> 0x193e0 <_fclose_r.part.0+26>:	mv	a0,s1
0x00000000000193e2 in _fclose_r.part.0 ()
=> 0x193e2 <_fclose_r.part.0+28>:	jalr	a5
0x00000000000166dc in __sclose ()
=> 0x166dc <__sclose>:	lh	a1,18(a1)
0x00000000000166e0 in __sclose ()
=> 0x166e0 <__sclose+4>:	j	0x1938a <_close_r>
0x000000000001938a in _close_r ()
=> 0x1938a <_close_r>:	addi	sp,sp,-32
0x000000000001938c in _close_r ()
=> 0x1938c <_close_r+2>:	sd	s0,16(sp)
0x000000000001938e in _close_r ()
=> 0x1938e <_close_r+4>:	sd	s1,8(sp)
0x0000000000019390 in _close_r ()
=> 0x19390 <_close_r+6>:	mv	s0,a0
0x0000000000019392 in _close_r ()
=> 0x19392 <_close_r+8>:	mv	a0,a1
0x0000000000019394 in _close_r ()
=> 0x19394 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019396 in _close_r ()
=> 0x19396 <_close_r+12>:	sw	zero,1936(gp)
0x000000000001939a in _close_r ()
=> 0x1939a <_close_r+16>:	jal	ra,0x1b1ea <_close>
0x000000000001b1ea in _close ()
=> 0x1b1ea <_close>:	addi	sp,sp,-16
0x000000000001b1ec in _close ()
=> 0x1b1ec <_close+2>:	sd	ra,8(sp)
0x000000000001b1ee in _close ()
=> 0x1b1ee <_close+4>:	sd	s0,0(sp)
0x000000000001b1f0 in _close ()
=> 0x1b1f0 <_close+6>:	li	a7,57
0x000000000001b1f4 in _close ()
=> 0x1b1f4 <_close+10>:	ecall
0x000000000001b1f8 in _close ()
=> 0x1b1f8 <_close+14>:	mv	s0,a0
0x000000000001b1fa in _close ()
=> 0x1b1fa <_close+16>:	bltz	a0,0x1b208 <_close+30>
0x000000000001b1fe in _close ()
=> 0x1b1fe <_close+20>:	sext.w	a0,a0
0x000000000001b200 in _close ()
=> 0x1b200 <_close+22>:	ld	ra,8(sp)
0x000000000001b202 in _close ()
=> 0x1b202 <_close+24>:	ld	s0,0(sp)
0x000000000001b204 in _close ()
=> 0x1b204 <_close+26>:	addi	sp,sp,16
0x000000000001b206 in _close ()
=> 0x1b206 <_close+28>:	ret
0x000000000001939e in _close_r ()
=> 0x1939e <_close_r+20>:	li	a5,-1
0x00000000000193a0 in _close_r ()
=> 0x193a0 <_close_r+22>:	beq	a0,a5,0x193ae <_close_r+36>
0x00000000000193a4 in _close_r ()
=> 0x193a4 <_close_r+26>:	ld	ra,24(sp)
0x00000000000193a6 in _close_r ()
=> 0x193a6 <_close_r+28>:	ld	s0,16(sp)
0x00000000000193a8 in _close_r ()
=> 0x193a8 <_close_r+30>:	ld	s1,8(sp)
0x00000000000193aa in _close_r ()
=> 0x193aa <_close_r+32>:	addi	sp,sp,32
0x00000000000193ac in _close_r ()
=> 0x193ac <_close_r+34>:	ret
0x00000000000193e4 in _fclose_r.part.0 ()
=> 0x193e4 <_fclose_r.part.0+30>:	bltz	a0,0x19430 <_fclose_r.part.0+106>
0x00000000000193e8 in _fclose_r.part.0 ()
=> 0x193e8 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x00000000000193ec in _fclose_r.part.0 ()
=> 0x193ec <_fclose_r.part.0+38>:	andi	a5,a5,128
0x00000000000193f0 in _fclose_r.part.0 ()
=> 0x193f0 <_fclose_r.part.0+42>:	bnez	a5,0x1943c <_fclose_r.part.0+118>
0x000000000001943c in _fclose_r.part.0 ()
=> 0x1943c <_fclose_r.part.0+118>:	ld	a1,24(s0)
0x000000000001943e in _fclose_r.part.0 ()
=> 0x1943e <_fclose_r.part.0+120>:	mv	a0,s1
0x0000000000019440 in _fclose_r.part.0 ()
=> 0x19440 <_fclose_r.part.0+122>:	jal	ra,0x1306c <_free_r>
0x000000000001306c in _free_r ()
=> 0x1306c <_free_r>:	beqz	a1,0x1315c <_free_r+240>
0x000000000001306e in _free_r ()
=> 0x1306e <_free_r+2>:	addi	sp,sp,-32
0x0000000000013070 in _free_r ()
=> 0x13070 <_free_r+4>:	sd	s0,16(sp)
0x0000000000013072 in _free_r ()
=> 0x13072 <_free_r+6>:	sd	s1,8(sp)
0x0000000000013074 in _free_r ()
=> 0x13074 <_free_r+8>:	mv	s0,a1
0x0000000000013076 in _free_r ()
=> 0x13076 <_free_r+10>:	mv	s1,a0
0x0000000000013078 in _free_r ()
=> 0x13078 <_free_r+12>:	sd	ra,24(sp)
0x000000000001307a in _free_r ()
=> 0x1307a <_free_r+14>:	jal	ra,0x10c6a <__malloc_lock>
0x0000000000010c6a in __malloc_lock ()
=> 0x10c6a <__malloc_lock>:	ret
0x000000000001307e in _free_r ()
=> 0x1307e <_free_r+18>:	ld	a0,-8(s0)
0x0000000000013082 in _free_r ()
=> 0x13082 <_free_r+22>:	addi	a4,s0,-16
0x0000000000013086 in _free_r ()
=> 0x13086 <_free_r+26>:	lui	a1,0x1f
0x000000000001308a in _free_r ()
=> 0x1308a <_free_r+30>:	andi	a5,a0,-2
0x000000000001308e in _free_r ()
=> 0x1308e <_free_r+34>:	add	a2,a4,a5
0x0000000000013092 in _free_r ()
=> 0x13092 <_free_r+38>:	addi	a1,a1,-464
0x0000000000013096 in _free_r ()
=> 0x13096 <_free_r+42>:	ld	a3,8(a2)
0x0000000000013098 in _free_r ()
=> 0x13098 <_free_r+44>:	ld	a6,16(a1)
0x000000000001309c in _free_r ()
=> 0x1309c <_free_r+48>:	andi	a3,a3,-4
0x000000000001309e in _free_r ()
=> 0x1309e <_free_r+50>:	beq	a6,a2,0x131e2 <_free_r+374>
0x00000000000131e2 in _free_r ()
=> 0x131e2 <_free_r+374>:	andi	a0,a0,1
0x00000000000131e4 in _free_r ()
=> 0x131e4 <_free_r+376>:	add	a5,a5,a3
0x00000000000131e6 in _free_r ()
=> 0x131e6 <_free_r+378>:	bnez	a0,0x131f8 <_free_r+396>
0x00000000000131e8 in _free_r ()
=> 0x131e8 <_free_r+380>:	ld	a0,-16(s0)
0x00000000000131ec in _free_r ()
=> 0x131ec <_free_r+384>:	sub	a4,a4,a0
0x00000000000131ee in _free_r ()
=> 0x131ee <_free_r+386>:	ld	a3,24(a4)
0x00000000000131f0 in _free_r ()
=> 0x131f0 <_free_r+388>:	ld	a2,16(a4)
0x00000000000131f2 in _free_r ()
=> 0x131f2 <_free_r+390>:	add	a5,a5,a0
0x00000000000131f4 in _free_r ()
=> 0x131f4 <_free_r+392>:	sd	a3,24(a2)
0x00000000000131f6 in _free_r ()
=> 0x131f6 <_free_r+394>:	sd	a2,16(a3)
0x00000000000131f8 in _free_r ()
=> 0x131f8 <_free_r+396>:	ori	a2,a5,1
0x00000000000131fc in _free_r ()
=> 0x131fc <_free_r+400>:	ld	a3,1888(gp)
0x0000000000013200 in _free_r ()
=> 0x13200 <_free_r+404>:	sd	a2,8(a4)
0x0000000000013202 in _free_r ()
=> 0x13202 <_free_r+406>:	sd	a4,16(a1)
0x0000000000013204 in _free_r ()
=> 0x13204 <_free_r+408>:	bltu	a5,a3,0x1311e <_free_r+178>
0x0000000000013208 in _free_r ()
=> 0x13208 <_free_r+412>:	ld	a1,1920(gp)
0x000000000001320c in _free_r ()
=> 0x1320c <_free_r+416>:	mv	a0,s1
0x000000000001320e in _free_r ()
=> 0x1320e <_free_r+418>:	jal	ra,0x12f96 <_malloc_trim_r>
0x0000000000012f96 in _malloc_trim_r ()
=> 0x12f96 <_malloc_trim_r>:	addi	sp,sp,-48
0x0000000000012f98 in _malloc_trim_r ()
=> 0x12f98 <_malloc_trim_r+2>:	sd	s3,8(sp)
0x0000000000012f9a in _malloc_trim_r ()
=> 0x12f9a <_malloc_trim_r+4>:	lui	s3,0x1f
0x0000000000012f9e in _malloc_trim_r ()
=> 0x12f9e <_malloc_trim_r+8>:	sd	s0,32(sp)
0x0000000000012fa0 in _malloc_trim_r ()
=> 0x12fa0 <_malloc_trim_r+10>:	sd	s1,24(sp)
0x0000000000012fa2 in _malloc_trim_r ()
=> 0x12fa2 <_malloc_trim_r+12>:	sd	s2,16(sp)
0x0000000000012fa4 in _malloc_trim_r ()
=> 0x12fa4 <_malloc_trim_r+14>:	sd	s4,0(sp)
0x0000000000012fa6 in _malloc_trim_r ()
=> 0x12fa6 <_malloc_trim_r+16>:	sd	ra,40(sp)
0x0000000000012fa8 in _malloc_trim_r ()
=> 0x12fa8 <_malloc_trim_r+18>:	mv	s4,a1
0x0000000000012faa in _malloc_trim_r ()
=> 0x12faa <_malloc_trim_r+20>:	mv	s2,a0
0x0000000000012fac in _malloc_trim_r ()
=> 0x12fac <_malloc_trim_r+22>:	addi	s3,s3,-464
0x0000000000012fb0 in _malloc_trim_r ()
=> 0x12fb0 <_malloc_trim_r+26>:	jal	ra,0x10c6a <__malloc_lock>
0x0000000000010c6a in __malloc_lock ()
=> 0x10c6a <__malloc_lock>:	ret
0x0000000000012fb4 in _malloc_trim_r ()
=> 0x12fb4 <_malloc_trim_r+30>:	ld	a4,16(s3)
0x0000000000012fb8 in _malloc_trim_r ()
=> 0x12fb8 <_malloc_trim_r+34>:	lui	a5,0x1
0x0000000000012fba in _malloc_trim_r ()
=> 0x12fba <_malloc_trim_r+36>:	addi	s0,a5,-33
0x0000000000012fbe in _malloc_trim_r ()
=> 0x12fbe <_malloc_trim_r+40>:	ld	s1,8(a4)
0x0000000000012fc0 in _malloc_trim_r ()
=> 0x12fc0 <_malloc_trim_r+42>:	sub	s0,s0,s4
0x0000000000012fc4 in _malloc_trim_r ()
=> 0x12fc4 <_malloc_trim_r+46>:	andi	s1,s1,-4
0x0000000000012fc6 in _malloc_trim_r ()
=> 0x12fc6 <_malloc_trim_r+48>:	add	s0,s0,s1
0x0000000000012fc8 in _malloc_trim_r ()
=> 0x12fc8 <_malloc_trim_r+50>:	srli	s0,s0,0xc
0x0000000000012fca in _malloc_trim_r ()
=> 0x12fca <_malloc_trim_r+52>:	addi	s0,s0,-1
0x0000000000012fcc in _malloc_trim_r ()
=> 0x12fcc <_malloc_trim_r+54>:	slli	s0,s0,0xc
0x0000000000012fce in _malloc_trim_r ()
=> 0x12fce <_malloc_trim_r+56>:	blt	s0,a5,0x12fe4 <_malloc_trim_r+78>
0x0000000000012fd2 in _malloc_trim_r ()
=> 0x12fd2 <_malloc_trim_r+60>:	li	a1,0
0x0000000000012fd4 in _malloc_trim_r ()
=> 0x12fd4 <_malloc_trim_r+62>:	mv	a0,s2
0x0000000000012fd6 in _malloc_trim_r ()
=> 0x12fd6 <_malloc_trim_r+64>:	jal	ra,0x10cbc <_sbrk_r>
0x0000000000010cbc in _sbrk_r ()
=> 0x10cbc <_sbrk_r>:	addi	sp,sp,-32
0x0000000000010cbe in _sbrk_r ()
=> 0x10cbe <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000010cc0 in _sbrk_r ()
=> 0x10cc0 <_sbrk_r+4>:	sd	s1,8(sp)
0x0000000000010cc2 in _sbrk_r ()
=> 0x10cc2 <_sbrk_r+6>:	mv	s0,a0
0x0000000000010cc4 in _sbrk_r ()
=> 0x10cc4 <_sbrk_r+8>:	mv	a0,a1
0x0000000000010cc6 in _sbrk_r ()
=> 0x10cc6 <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000010cc8 in _sbrk_r ()
=> 0x10cc8 <_sbrk_r+12>:	sw	zero,1936(gp)
0x0000000000010ccc in _sbrk_r ()
=> 0x10ccc <_sbrk_r+16>:	jal	ra,0x1b30e <_sbrk>
0x000000000001b30e in _sbrk ()
=> 0x1b30e <_sbrk>:	ld	a4,1944(gp)
0x000000000001b312 in _sbrk ()
=> 0x1b312 <_sbrk+4>:	addi	sp,sp,-16
0x000000000001b314 in _sbrk ()
=> 0x1b314 <_sbrk+6>:	sd	ra,8(sp)
0x000000000001b316 in _sbrk ()
=> 0x1b316 <_sbrk+8>:	mv	a5,a0
0x000000000001b318 in _sbrk ()
=> 0x1b318 <_sbrk+10>:	bnez	a4,0x1b330 <_sbrk+34>
0x000000000001b330 in _sbrk ()
=> 0x1b330 <_sbrk+34>:	li	a7,214
0x000000000001b334 in _sbrk ()
=> 0x1b334 <_sbrk+38>:	add	a0,a5,a4
0x000000000001b338 in _sbrk ()
=> 0x1b338 <_sbrk+42>:	ecall
0x000000000001b33c in _sbrk ()
=> 0x1b33c <_sbrk+46>:	ld	a4,1944(gp)
0x000000000001b340 in _sbrk ()
=> 0x1b340 <_sbrk+50>:	add	a5,a5,a4
0x000000000001b342 in _sbrk ()
=> 0x1b342 <_sbrk+52>:	bne	a0,a5,0x1b352 <_sbrk+68>
0x000000000001b346 in _sbrk ()
=> 0x1b346 <_sbrk+56>:	ld	ra,8(sp)
0x000000000001b348 in _sbrk ()
=> 0x1b348 <_sbrk+58>:	sd	a0,1944(gp)
0x000000000001b34c in _sbrk ()
=> 0x1b34c <_sbrk+62>:	mv	a0,a4
0x000000000001b34e in _sbrk ()
=> 0x1b34e <_sbrk+64>:	addi	sp,sp,16
0x000000000001b350 in _sbrk ()
=> 0x1b350 <_sbrk+66>:	ret
0x0000000000010cd0 in _sbrk_r ()
=> 0x10cd0 <_sbrk_r+20>:	li	a5,-1
0x0000000000010cd2 in _sbrk_r ()
=> 0x10cd2 <_sbrk_r+22>:	beq	a0,a5,0x10ce0 <_sbrk_r+36>
0x0000000000010cd6 in _sbrk_r ()
=> 0x10cd6 <_sbrk_r+26>:	ld	ra,24(sp)
0x0000000000010cd8 in _sbrk_r ()
=> 0x10cd8 <_sbrk_r+28>:	ld	s0,16(sp)
0x0000000000010cda in _sbrk_r ()
=> 0x10cda <_sbrk_r+30>:	ld	s1,8(sp)
0x0000000000010cdc in _sbrk_r ()
=> 0x10cdc <_sbrk_r+32>:	addi	sp,sp,32
0x0000000000010cde in _sbrk_r ()
=> 0x10cde <_sbrk_r+34>:	ret
0x0000000000012fda in _malloc_trim_r ()
=> 0x12fda <_malloc_trim_r+68>:	ld	a5,16(s3)
0x0000000000012fde in _malloc_trim_r ()
=> 0x12fde <_malloc_trim_r+72>:	add	a5,a5,s1
0x0000000000012fe0 in _malloc_trim_r ()
=> 0x12fe0 <_malloc_trim_r+74>:	beq	a0,a5,0x12ffc <_malloc_trim_r+102>
0x0000000000012ffc in _malloc_trim_r ()
=> 0x12ffc <_malloc_trim_r+102>:	neg	a1,s0
0x0000000000013000 in _malloc_trim_r ()
=> 0x13000 <_malloc_trim_r+106>:	mv	a0,s2
0x0000000000013002 in _malloc_trim_r ()
=> 0x13002 <_malloc_trim_r+108>:	jal	ra,0x10cbc <_sbrk_r>
0x0000000000010cbc in _sbrk_r ()
=> 0x10cbc <_sbrk_r>:	addi	sp,sp,-32
0x0000000000010cbe in _sbrk_r ()
=> 0x10cbe <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000010cc0 in _sbrk_r ()
=> 0x10cc0 <_sbrk_r+4>:	sd	s1,8(sp)
0x0000000000010cc2 in _sbrk_r ()
=> 0x10cc2 <_sbrk_r+6>:	mv	s0,a0
0x0000000000010cc4 in _sbrk_r ()
=> 0x10cc4 <_sbrk_r+8>:	mv	a0,a1
0x0000000000010cc6 in _sbrk_r ()
=> 0x10cc6 <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000010cc8 in _sbrk_r ()
=> 0x10cc8 <_sbrk_r+12>:	sw	zero,1936(gp)
0x0000000000010ccc in _sbrk_r ()
=> 0x10ccc <_sbrk_r+16>:	jal	ra,0x1b30e <_sbrk>
0x000000000001b30e in _sbrk ()
=> 0x1b30e <_sbrk>:	ld	a4,1944(gp)
0x000000000001b312 in _sbrk ()
=> 0x1b312 <_sbrk+4>:	addi	sp,sp,-16
0x000000000001b314 in _sbrk ()
=> 0x1b314 <_sbrk+6>:	sd	ra,8(sp)
0x000000000001b316 in _sbrk ()
=> 0x1b316 <_sbrk+8>:	mv	a5,a0
0x000000000001b318 in _sbrk ()
=> 0x1b318 <_sbrk+10>:	bnez	a4,0x1b330 <_sbrk+34>
0x000000000001b330 in _sbrk ()
=> 0x1b330 <_sbrk+34>:	li	a7,214
0x000000000001b334 in _sbrk ()
=> 0x1b334 <_sbrk+38>:	add	a0,a5,a4
0x000000000001b338 in _sbrk ()
=> 0x1b338 <_sbrk+42>:	ecall
0x000000000001b33c in _sbrk ()
=> 0x1b33c <_sbrk+46>:	ld	a4,1944(gp)
0x000000000001b340 in _sbrk ()
=> 0x1b340 <_sbrk+50>:	add	a5,a5,a4
0x000000000001b342 in _sbrk ()
=> 0x1b342 <_sbrk+52>:	bne	a0,a5,0x1b352 <_sbrk+68>
0x000000000001b346 in _sbrk ()
=> 0x1b346 <_sbrk+56>:	ld	ra,8(sp)
0x000000000001b348 in _sbrk ()
=> 0x1b348 <_sbrk+58>:	sd	a0,1944(gp)
0x000000000001b34c in _sbrk ()
=> 0x1b34c <_sbrk+62>:	mv	a0,a4
0x000000000001b34e in _sbrk ()
=> 0x1b34e <_sbrk+64>:	addi	sp,sp,16
0x000000000001b350 in _sbrk ()
=> 0x1b350 <_sbrk+66>:	ret
0x0000000000010cd0 in _sbrk_r ()
=> 0x10cd0 <_sbrk_r+20>:	li	a5,-1
0x0000000000010cd2 in _sbrk_r ()
=> 0x10cd2 <_sbrk_r+22>:	beq	a0,a5,0x10ce0 <_sbrk_r+36>
0x0000000000010cd6 in _sbrk_r ()
=> 0x10cd6 <_sbrk_r+26>:	ld	ra,24(sp)
0x0000000000010cd8 in _sbrk_r ()
=> 0x10cd8 <_sbrk_r+28>:	ld	s0,16(sp)
0x0000000000010cda in _sbrk_r ()
=> 0x10cda <_sbrk_r+30>:	ld	s1,8(sp)
0x0000000000010cdc in _sbrk_r ()
=> 0x10cdc <_sbrk_r+32>:	addi	sp,sp,32
0x0000000000010cde in _sbrk_r ()
=> 0x10cde <_sbrk_r+34>:	ret
0x0000000000013006 in _malloc_trim_r ()
=> 0x13006 <_malloc_trim_r+112>:	li	a5,-1
0x0000000000013008 in _malloc_trim_r ()
=> 0x13008 <_malloc_trim_r+114>:	beq	a0,a5,0x13040 <_malloc_trim_r+170>
0x000000000001300c in _malloc_trim_r ()
=> 0x1300c <_malloc_trim_r+118>:	lui	a5,0x20
0x0000000000013010 in _malloc_trim_r ()
=> 0x13010 <_malloc_trim_r+122>:	addi	a5,a5,-1872
0x0000000000013014 in _malloc_trim_r ()
=> 0x13014 <_malloc_trim_r+126>:	lw	a4,0(a5)
0x0000000000013016 in _malloc_trim_r ()
=> 0x13016 <_malloc_trim_r+128>:	ld	a3,16(s3)
0x000000000001301a in _malloc_trim_r ()
=> 0x1301a <_malloc_trim_r+132>:	sub	s1,s1,s0
0x000000000001301c in _malloc_trim_r ()
=> 0x1301c <_malloc_trim_r+134>:	ori	s1,s1,1
0x0000000000013020 in _malloc_trim_r ()
=> 0x13020 <_malloc_trim_r+138>:	subw	s0,a4,s0
0x0000000000013024 in _malloc_trim_r ()
=> 0x13024 <_malloc_trim_r+142>:	mv	a0,s2
0x0000000000013026 in _malloc_trim_r ()
=> 0x13026 <_malloc_trim_r+144>:	sd	s1,8(a3)
0x0000000000013028 in _malloc_trim_r ()
=> 0x13028 <_malloc_trim_r+146>:	sw	s0,0(a5)
0x000000000001302a in _malloc_trim_r ()
=> 0x1302a <_malloc_trim_r+148>:	jal	ra,0x10c6c <__malloc_unlock>
0x0000000000010c6c in __malloc_unlock ()
=> 0x10c6c <__malloc_unlock>:	ret
0x000000000001302e in _malloc_trim_r ()
=> 0x1302e <_malloc_trim_r+152>:	ld	ra,40(sp)
0x0000000000013030 in _malloc_trim_r ()
=> 0x13030 <_malloc_trim_r+154>:	ld	s0,32(sp)
0x0000000000013032 in _malloc_trim_r ()
=> 0x13032 <_malloc_trim_r+156>:	ld	s1,24(sp)
0x0000000000013034 in _malloc_trim_r ()
=> 0x13034 <_malloc_trim_r+158>:	ld	s2,16(sp)
0x0000000000013036 in _malloc_trim_r ()
=> 0x13036 <_malloc_trim_r+160>:	ld	s3,8(sp)
0x0000000000013038 in _malloc_trim_r ()
=> 0x13038 <_malloc_trim_r+162>:	ld	s4,0(sp)
0x000000000001303a in _malloc_trim_r ()
=> 0x1303a <_malloc_trim_r+164>:	li	a0,1
0x000000000001303c in _malloc_trim_r ()
=> 0x1303c <_malloc_trim_r+166>:	addi	sp,sp,48
0x000000000001303e in _malloc_trim_r ()
=> 0x1303e <_malloc_trim_r+168>:	ret
0x0000000000013212 in _free_r ()
=> 0x13212 <_free_r+422>:	j	0x1311e <_free_r+178>
0x000000000001311e in _free_r ()
=> 0x1311e <_free_r+178>:	ld	s0,16(sp)
0x0000000000013120 in _free_r ()
=> 0x13120 <_free_r+180>:	ld	ra,24(sp)
0x0000000000013122 in _free_r ()
=> 0x13122 <_free_r+182>:	mv	a0,s1
0x0000000000013124 in _free_r ()
=> 0x13124 <_free_r+184>:	ld	s1,8(sp)
0x0000000000013126 in _free_r ()
=> 0x13126 <_free_r+186>:	addi	sp,sp,32
0x0000000000013128 in _free_r ()
=> 0x13128 <_free_r+188>:	j	0x10c6c <__malloc_unlock>
0x0000000000010c6c in __malloc_unlock ()
=> 0x10c6c <__malloc_unlock>:	ret
0x0000000000019444 in _fclose_r.part.0 ()
=> 0x19444 <_fclose_r.part.0+126>:	j	0x193f2 <_fclose_r.part.0+44>
0x00000000000193f2 in _fclose_r.part.0 ()
=> 0x193f2 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x00000000000193f4 in _fclose_r.part.0 ()
=> 0x193f4 <_fclose_r.part.0+46>:	beqz	a1,0x19408 <_fclose_r.part.0+66>
0x0000000000019408 in _fclose_r.part.0 ()
=> 0x19408 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x000000000001940a in _fclose_r.part.0 ()
=> 0x1940a <_fclose_r.part.0+68>:	beqz	a1,0x19416 <_fclose_r.part.0+80>
0x0000000000019416 in _fclose_r.part.0 ()
=> 0x19416 <_fclose_r.part.0+80>:	jal	ra,0x12f42 <__sfp_lock_acquire>
0x0000000000012f42 in __sfp_lock_acquire ()
=> 0x12f42 <__sfp_lock_acquire>:	ret
0x000000000001941a in _fclose_r.part.0 ()
=> 0x1941a <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x000000000001941e in _fclose_r.part.0 ()
=> 0x1941e <_fclose_r.part.0+88>:	jal	ra,0x12f44 <__sfp_lock_release>
0x0000000000012f44 in __sfp_lock_release ()
=> 0x12f44 <__sfp_lock_release>:	ret
0x0000000000019422 in _fclose_r.part.0 ()
=> 0x19422 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019424 in _fclose_r.part.0 ()
=> 0x19424 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019426 in _fclose_r.part.0 ()
=> 0x19426 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019428 in _fclose_r.part.0 ()
=> 0x19428 <_fclose_r.part.0+98>:	mv	a0,s2
0x000000000001942a in _fclose_r.part.0 ()
=> 0x1942a <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x000000000001942c in _fclose_r.part.0 ()
=> 0x1942c <_fclose_r.part.0+102>:	addi	sp,sp,32
0x000000000001942e in _fclose_r.part.0 ()
=> 0x1942e <_fclose_r.part.0+104>:	ret
0x000000000001339a in _fwalk_reent ()
=> 0x1339a <_fwalk_reent+90>:	or	s6,a0,s6
0x000000000001339e in _fwalk_reent ()
=> 0x1339e <_fwalk_reent+94>:	sext.w	s6,s6
0x00000000000133a0 in _fwalk_reent ()
=> 0x133a0 <_fwalk_reent+96>:	addi	s0,s0,176
0x00000000000133a4 in _fwalk_reent ()
=> 0x133a4 <_fwalk_reent+100>:	bne	s1,s0,0x13384 <_fwalk_reent+68>
0x0000000000013384 in _fwalk_reent ()
=> 0x13384 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013388 in _fwalk_reent ()
=> 0x13388 <_fwalk_reent+72>:	bgeu	s7,a5,0x133a0 <_fwalk_reent+96>
0x000000000001338c in _fwalk_reent ()
=> 0x1338c <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013390 in _fwalk_reent ()
=> 0x13390 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013392 in _fwalk_reent ()
=> 0x13392 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013394 in _fwalk_reent ()
=> 0x13394 <_fwalk_reent+84>:	beq	a5,s3,0x133a0 <_fwalk_reent+96>
0x0000000000013398 in _fwalk_reent ()
=> 0x13398 <_fwalk_reent+88>:	jalr	s4
0x0000000000019446 in _fclose_r ()
=> 0x19446 <_fclose_r>:	beqz	a1,0x19480 <_fclose_r+58>
0x0000000000019448 in _fclose_r ()
=> 0x19448 <_fclose_r+2>:	addi	sp,sp,-32
0x000000000001944a in _fclose_r ()
=> 0x1944a <_fclose_r+4>:	sd	s0,16(sp)
0x000000000001944c in _fclose_r ()
=> 0x1944c <_fclose_r+6>:	sd	ra,24(sp)
0x000000000001944e in _fclose_r ()
=> 0x1944e <_fclose_r+8>:	mv	s0,a0
0x0000000000019450 in _fclose_r ()
=> 0x19450 <_fclose_r+10>:	beqz	a0,0x19456 <_fclose_r+16>
0x0000000000019452 in _fclose_r ()
=> 0x19452 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019454 in _fclose_r ()
=> 0x19454 <_fclose_r+14>:	beqz	a5,0x19470 <_fclose_r+42>
0x0000000000019456 in _fclose_r ()
=> 0x19456 <_fclose_r+16>:	lh	a5,16(a1)
0x000000000001945a in _fclose_r ()
=> 0x1945a <_fclose_r+20>:	bnez	a5,0x19466 <_fclose_r+32>
0x0000000000019466 in _fclose_r ()
=> 0x19466 <_fclose_r+32>:	mv	a0,s0
0x0000000000019468 in _fclose_r ()
=> 0x19468 <_fclose_r+34>:	ld	s0,16(sp)
0x000000000001946a in _fclose_r ()
=> 0x1946a <_fclose_r+36>:	ld	ra,24(sp)
0x000000000001946c in _fclose_r ()
=> 0x1946c <_fclose_r+38>:	addi	sp,sp,32
0x000000000001946e in _fclose_r ()
=> 0x1946e <_fclose_r+40>:	j	0x193c6 <_fclose_r.part.0>
0x00000000000193c6 in _fclose_r.part.0 ()
=> 0x193c6 <_fclose_r.part.0>:	addi	sp,sp,-32
0x00000000000193c8 in _fclose_r.part.0 ()
=> 0x193c8 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x00000000000193ca in _fclose_r.part.0 ()
=> 0x193ca <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x00000000000193cc in _fclose_r.part.0 ()
=> 0x193cc <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x00000000000193ce in _fclose_r.part.0 ()
=> 0x193ce <_fclose_r.part.0+8>:	mv	s0,a1
0x00000000000193d0 in _fclose_r.part.0 ()
=> 0x193d0 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x00000000000193d2 in _fclose_r.part.0 ()
=> 0x193d2 <_fclose_r.part.0+12>:	mv	s1,a0
0x00000000000193d4 in _fclose_r.part.0 ()
=> 0x193d4 <_fclose_r.part.0+14>:	jal	ra,0x12acc <__sflush_r>
0x0000000000012acc in __sflush_r ()
=> 0x12acc <__sflush_r>:	lh	a5,16(a1)
0x0000000000012ad0 in __sflush_r ()
=> 0x12ad0 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000012ad2 in __sflush_r ()
=> 0x12ad2 <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000012ad4 in __sflush_r ()
=> 0x12ad4 <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000012ad6 in __sflush_r ()
=> 0x12ad6 <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000012ad8 in __sflush_r ()
=> 0x12ad8 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000012ada in __sflush_r ()
=> 0x12ada <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000012adc in __sflush_r ()
=> 0x12adc <__sflush_r+16>:	andi	a3,a5,8
0x0000000000012ae0 in __sflush_r ()
=> 0x12ae0 <__sflush_r+20>:	mv	s0,a1
0x0000000000012ae2 in __sflush_r ()
=> 0x12ae2 <__sflush_r+22>:	mv	s3,a0
0x0000000000012ae4 in __sflush_r ()
=> 0x12ae4 <__sflush_r+24>:	bnez	a3,0x12b98 <__sflush_r+204>
0x0000000000012ae6 in __sflush_r ()
=> 0x12ae6 <__sflush_r+26>:	lui	a4,0x1
0x0000000000012ae8 in __sflush_r ()
=> 0x12ae8 <__sflush_r+28>:	addi	a4,a4,-2048
0x0000000000012aec in __sflush_r ()
=> 0x12aec <__sflush_r+32>:	lw	a3,8(a1)
0x0000000000012aee in __sflush_r ()
=> 0x12aee <__sflush_r+34>:	or	a5,a5,a4
0x0000000000012af0 in __sflush_r ()
=> 0x12af0 <__sflush_r+36>:	sh	a5,16(a1)
0x0000000000012af4 in __sflush_r ()
=> 0x12af4 <__sflush_r+40>:	blez	a3,0x12bf4 <__sflush_r+296>
0x0000000000012bf4 in __sflush_r ()
=> 0x12bf4 <__sflush_r+296>:	lw	a4,112(a1)
0x0000000000012bf6 in __sflush_r ()
=> 0x12bf6 <__sflush_r+298>:	bgtz	a4,0x12af8 <__sflush_r+44>
0x0000000000012bfa in __sflush_r ()
=> 0x12bfa <__sflush_r+302>:	j	0x12b88 <__sflush_r+188>
0x0000000000012b88 in __sflush_r ()
=> 0x12b88 <__sflush_r+188>:	li	a0,0
0x0000000000012b8a in __sflush_r ()
=> 0x12b8a <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000012b8c in __sflush_r ()
=> 0x12b8c <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000012b8e in __sflush_r ()
=> 0x12b8e <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000012b90 in __sflush_r ()
=> 0x12b90 <__sflush_r+196>:	ld	s2,16(sp)
0x0000000000012b92 in __sflush_r ()
=> 0x12b92 <__sflush_r+198>:	ld	s3,8(sp)
0x0000000000012b94 in __sflush_r ()
=> 0x12b94 <__sflush_r+200>:	addi	sp,sp,48
0x0000000000012b96 in __sflush_r ()
=> 0x12b96 <__sflush_r+202>:	ret
0x00000000000193d8 in _fclose_r.part.0 ()
=> 0x193d8 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x00000000000193da in _fclose_r.part.0 ()
=> 0x193da <_fclose_r.part.0+20>:	mv	s2,a0
0x00000000000193dc in _fclose_r.part.0 ()
=> 0x193dc <_fclose_r.part.0+22>:	beqz	a5,0x193e8 <_fclose_r.part.0+34>
0x00000000000193de in _fclose_r.part.0 ()
=> 0x193de <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x00000000000193e0 in _fclose_r.part.0 ()
=> 0x193e0 <_fclose_r.part.0+26>:	mv	a0,s1
0x00000000000193e2 in _fclose_r.part.0 ()
=> 0x193e2 <_fclose_r.part.0+28>:	jalr	a5
0x00000000000166dc in __sclose ()
=> 0x166dc <__sclose>:	lh	a1,18(a1)
0x00000000000166e0 in __sclose ()
=> 0x166e0 <__sclose+4>:	j	0x1938a <_close_r>
0x000000000001938a in _close_r ()
=> 0x1938a <_close_r>:	addi	sp,sp,-32
0x000000000001938c in _close_r ()
=> 0x1938c <_close_r+2>:	sd	s0,16(sp)
0x000000000001938e in _close_r ()
=> 0x1938e <_close_r+4>:	sd	s1,8(sp)
0x0000000000019390 in _close_r ()
=> 0x19390 <_close_r+6>:	mv	s0,a0
0x0000000000019392 in _close_r ()
=> 0x19392 <_close_r+8>:	mv	a0,a1
0x0000000000019394 in _close_r ()
=> 0x19394 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019396 in _close_r ()
=> 0x19396 <_close_r+12>:	sw	zero,1936(gp)
0x000000000001939a in _close_r ()
=> 0x1939a <_close_r+16>:	jal	ra,0x1b1ea <_close>
0x000000000001b1ea in _close ()
=> 0x1b1ea <_close>:	addi	sp,sp,-16
0x000000000001b1ec in _close ()
=> 0x1b1ec <_close+2>:	sd	ra,8(sp)
0x000000000001b1ee in _close ()
=> 0x1b1ee <_close+4>:	sd	s0,0(sp)
0x000000000001b1f0 in _close ()
=> 0x1b1f0 <_close+6>:	li	a7,57
0x000000000001b1f4 in _close ()
=> 0x1b1f4 <_close+10>:	ecall
0x000000000001b1f8 in _close ()
=> 0x1b1f8 <_close+14>:	mv	s0,a0
0x000000000001b1fa in _close ()
=> 0x1b1fa <_close+16>:	bltz	a0,0x1b208 <_close+30>
0x000000000001b1fe in _close ()
=> 0x1b1fe <_close+20>:	sext.w	a0,a0
0x000000000001b200 in _close ()
=> 0x1b200 <_close+22>:	ld	ra,8(sp)
0x000000000001b202 in _close ()
=> 0x1b202 <_close+24>:	ld	s0,0(sp)
0x000000000001b204 in _close ()
=> 0x1b204 <_close+26>:	addi	sp,sp,16
0x000000000001b206 in _close ()
=> 0x1b206 <_close+28>:	ret
0x000000000001939e in _close_r ()
=> 0x1939e <_close_r+20>:	li	a5,-1
0x00000000000193a0 in _close_r ()
=> 0x193a0 <_close_r+22>:	beq	a0,a5,0x193ae <_close_r+36>
0x00000000000193a4 in _close_r ()
=> 0x193a4 <_close_r+26>:	ld	ra,24(sp)
0x00000000000193a6 in _close_r ()
=> 0x193a6 <_close_r+28>:	ld	s0,16(sp)
0x00000000000193a8 in _close_r ()
=> 0x193a8 <_close_r+30>:	ld	s1,8(sp)
0x00000000000193aa in _close_r ()
=> 0x193aa <_close_r+32>:	addi	sp,sp,32
0x00000000000193ac in _close_r ()
=> 0x193ac <_close_r+34>:	ret
0x00000000000193e4 in _fclose_r.part.0 ()
=> 0x193e4 <_fclose_r.part.0+30>:	bltz	a0,0x19430 <_fclose_r.part.0+106>
0x00000000000193e8 in _fclose_r.part.0 ()
=> 0x193e8 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x00000000000193ec in _fclose_r.part.0 ()
=> 0x193ec <_fclose_r.part.0+38>:	andi	a5,a5,128
0x00000000000193f0 in _fclose_r.part.0 ()
=> 0x193f0 <_fclose_r.part.0+42>:	bnez	a5,0x1943c <_fclose_r.part.0+118>
0x00000000000193f2 in _fclose_r.part.0 ()
=> 0x193f2 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x00000000000193f4 in _fclose_r.part.0 ()
=> 0x193f4 <_fclose_r.part.0+46>:	beqz	a1,0x19408 <_fclose_r.part.0+66>
0x0000000000019408 in _fclose_r.part.0 ()
=> 0x19408 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x000000000001940a in _fclose_r.part.0 ()
=> 0x1940a <_fclose_r.part.0+68>:	beqz	a1,0x19416 <_fclose_r.part.0+80>
0x0000000000019416 in _fclose_r.part.0 ()
=> 0x19416 <_fclose_r.part.0+80>:	jal	ra,0x12f42 <__sfp_lock_acquire>
0x0000000000012f42 in __sfp_lock_acquire ()
=> 0x12f42 <__sfp_lock_acquire>:	ret
0x000000000001941a in _fclose_r.part.0 ()
=> 0x1941a <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x000000000001941e in _fclose_r.part.0 ()
=> 0x1941e <_fclose_r.part.0+88>:	jal	ra,0x12f44 <__sfp_lock_release>
0x0000000000012f44 in __sfp_lock_release ()
=> 0x12f44 <__sfp_lock_release>:	ret
0x0000000000019422 in _fclose_r.part.0 ()
=> 0x19422 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019424 in _fclose_r.part.0 ()
=> 0x19424 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019426 in _fclose_r.part.0 ()
=> 0x19426 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019428 in _fclose_r.part.0 ()
=> 0x19428 <_fclose_r.part.0+98>:	mv	a0,s2
0x000000000001942a in _fclose_r.part.0 ()
=> 0x1942a <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x000000000001942c in _fclose_r.part.0 ()
=> 0x1942c <_fclose_r.part.0+102>:	addi	sp,sp,32
0x000000000001942e in _fclose_r.part.0 ()
=> 0x1942e <_fclose_r.part.0+104>:	ret
0x000000000001339a in _fwalk_reent ()
=> 0x1339a <_fwalk_reent+90>:	or	s6,a0,s6
0x000000000001339e in _fwalk_reent ()
=> 0x1339e <_fwalk_reent+94>:	sext.w	s6,s6
0x00000000000133a0 in _fwalk_reent ()
=> 0x133a0 <_fwalk_reent+96>:	addi	s0,s0,176
0x00000000000133a4 in _fwalk_reent ()
=> 0x133a4 <_fwalk_reent+100>:	bne	s1,s0,0x13384 <_fwalk_reent+68>
0x00000000000133a8 in _fwalk_reent ()
=> 0x133a8 <_fwalk_reent+104>:	ld	s2,0(s2)
0x00000000000133ac in _fwalk_reent ()
=> 0x133ac <_fwalk_reent+108>:	bnez	s2,0x13368 <_fwalk_reent+40>
0x00000000000133b0 in _fwalk_reent ()
=> 0x133b0 <_fwalk_reent+112>:	ld	ra,72(sp)
0x00000000000133b2 in _fwalk_reent ()
=> 0x133b2 <_fwalk_reent+114>:	ld	s0,64(sp)
0x00000000000133b4 in _fwalk_reent ()
=> 0x133b4 <_fwalk_reent+116>:	ld	s1,56(sp)
0x00000000000133b6 in _fwalk_reent ()
=> 0x133b6 <_fwalk_reent+118>:	ld	s2,48(sp)
0x00000000000133b8 in _fwalk_reent ()
=> 0x133b8 <_fwalk_reent+120>:	ld	s3,40(sp)
0x00000000000133ba in _fwalk_reent ()
=> 0x133ba <_fwalk_reent+122>:	ld	s4,32(sp)
0x00000000000133bc in _fwalk_reent ()
=> 0x133bc <_fwalk_reent+124>:	ld	s5,24(sp)
0x00000000000133be in _fwalk_reent ()
=> 0x133be <_fwalk_reent+126>:	ld	s7,8(sp)
0x00000000000133c0 in _fwalk_reent ()
=> 0x133c0 <_fwalk_reent+128>:	ld	s8,0(sp)
0x00000000000133c2 in _fwalk_reent ()
=> 0x133c2 <_fwalk_reent+130>:	mv	a0,s6
0x00000000000133c4 in _fwalk_reent ()
=> 0x133c4 <_fwalk_reent+132>:	ld	s6,16(sp)
0x00000000000133c6 in _fwalk_reent ()
=> 0x133c6 <_fwalk_reent+134>:	addi	sp,sp,80
0x00000000000133c8 in _fwalk_reent ()
=> 0x133c8 <_fwalk_reent+136>:	ret
0x000000000001051c in exit ()
=> 0x1051c <exit+24>:	mv	a0,s0
0x000000000001051e in exit ()
=> 0x1051e <exit+26>:	jal	ra,0x1b216 <_exit>
0x000000000001b216 in _exit ()
=> 0x1b216 <_exit>:	li	a7,93
0x000000000001b21a in _exit ()
=> 0x1b21a <_exit+4>:	ecall
[Inferior 1 (process 743) exited normally]
script_remote.gdb:25: Error in sourced command file:
No registers.
