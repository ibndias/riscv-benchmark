
Temporary breakpoint 1, start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102d4 <start_trigger+16>:	sd	ra,8(sp)
0x00000000000102d8	37	}
=> 0x102d8 <start_trigger+20>:	sd	s0,0(sp)
0x00000000000102dc	37	}
=> 0x102dc <start_trigger+24>:	addi	s0,sp,16
0x00000000000102e0	37	}
=> 0x102e0 <start_trigger+28>:	ld	s0,0(sp)
0x00000000000102e4 in start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102e4 <start_trigger+32>:	ld	ra,8(sp)
0x00000000000102e8	37	}
=> 0x102e8 <start_trigger+36>:	addi	sp,sp,16
0x00000000000102ec	37	}
=> 0x102ec <start_trigger+40>:	ld	ra,0(t6)
0x00000000000102f0	37	}
=> 0x102f0 <start_trigger+44>:	addi	t6,t6,16
0x00000000000102f4	37	}
=> 0x102f4 <start_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:54
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10220 <main+144>:	ld	a0,-88(s0)
0x0000000000010224	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10224 <main+148>:	sw	a0,-36(s0)
0x0000000000010228	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10228 <main+152>:	j	0x1022c <main+156>
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+156>:	lw	a0,-36(s0)
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+160>:	li	a1,0
0x0000000000010234	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10234 <main+164>:	blt	a1,a0,0x10260 <main+208>
0x0000000000010238	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10238 <main+168>:	j	0x1023c <main+172>
56	      initialise_benchmark ();
=> 0x1023c <main+172>:	jal	ra,0x10e08 <initialise_benchmark>
initialise_benchmark () at ctl.c:179
179	void initialise_benchmark() {
=> 0x10e08 <initialise_benchmark>:	addi	t6,t6,-16
0x0000000000010e0c	179	void initialise_benchmark() {
=> 0x10e0c <initialise_benchmark+4>:	sd	ra,0(t6)
0x0000000000010e10	179	void initialise_benchmark() {
=> 0x10e10 <initialise_benchmark+8>:	st	zero,0(t6)
0x0000000000010e14	179	void initialise_benchmark() {
=> 0x10e14 <initialise_benchmark+12>:	addi	sp,sp,-16
180	  init = 1;
=> 0x10e18 <initialise_benchmark+16>:	sd	ra,8(sp)
0x0000000000010e1c	180	  init = 1;
=> 0x10e1c <initialise_benchmark+20>:	sd	s0,0(sp)
0x0000000000010e20	180	  init = 1;
=> 0x10e20 <initialise_benchmark+24>:	addi	s0,sp,16
0x0000000000010e24	180	  init = 1;
=> 0x10e24 <initialise_benchmark+28>:	li	a1,1
0x0000000000010e28	180	  init = 1;
=> 0x10e28 <initialise_benchmark+32>:	sw	a1,-1948(gp)
181	  lim = 100;
=> 0x10e2c <initialise_benchmark+36>:	li	a1,100
0x0000000000010e30	181	  lim = 100;
=> 0x10e30 <initialise_benchmark+40>:	sw	a1,-1944(gp)
182	  fact = 11;
=> 0x10e34 <initialise_benchmark+44>:	li	a1,11
0x0000000000010e38	182	  fact = 11;
=> 0x10e38 <initialise_benchmark+48>:	sw	a1,-1940(gp)
183	  begin = 4;
=> 0x10e3c <initialise_benchmark+52>:	li	a1,4
0x0000000000010e40	183	  begin = 4;
=> 0x10e40 <initialise_benchmark+56>:	sw	a1,-1936(gp)
184	  end = 50;
=> 0x10e44 <initialise_benchmark+60>:	li	a1,50
0x0000000000010e48	184	  end = 50;
=> 0x10e48 <initialise_benchmark+64>:	sw	a1,-1932(gp)
185	  end2 = 8;
=> 0x10e4c <initialise_benchmark+68>:	li	a1,8
0x0000000000010e50	185	  end2 = 8;
=> 0x10e50 <initialise_benchmark+72>:	sw	a1,-1928(gp)
186	  init_heap ();
=> 0x10e54 <initialise_benchmark+76>:	jal	ra,0x10ee4 <init_heap>
init_heap () at ctl.c:46
46	{
=> 0x10ee4 <init_heap>:	addi	t6,t6,-16
0x0000000000010ee8	46	{
=> 0x10ee8 <init_heap+4>:	sd	ra,0(t6)
0x0000000000010eec	46	{
=> 0x10eec <init_heap+8>:	st	zero,0(t6)
0x0000000000010ef0	46	{
=> 0x10ef0 <init_heap+12>:	addi	sp,sp,-16
47	    heap_ptr = (void *) heap;
=> 0x10ef4 <init_heap+16>:	sd	ra,8(sp)
0x0000000000010ef8	47	    heap_ptr = (void *) heap;
=> 0x10ef8 <init_heap+20>:	sd	s0,0(sp)
0x0000000000010efc	47	    heap_ptr = (void *) heap;
=> 0x10efc <init_heap+24>:	addi	s0,sp,16
0x0000000000010f00	47	    heap_ptr = (void *) heap;
=> 0x10f00 <init_heap+28>:	lui	a0,0x20
0x0000000000010f04	47	    heap_ptr = (void *) heap;
=> 0x10f04 <init_heap+32>:	addi	a0,a0,728
0x0000000000010f08	47	    heap_ptr = (void *) heap;
=> 0x10f08 <init_heap+36>:	sd	a0,-1920(gp)
48	    heap_end = heap_ptr + HEAP_SIZE;
=> 0x10f0c <init_heap+40>:	ld	a0,-1920(gp)
0x0000000000010f10	48	    heap_end = heap_ptr + HEAP_SIZE;
=> 0x10f10 <init_heap+44>:	lui	a1,0x2
0x0000000000010f14	48	    heap_end = heap_ptr + HEAP_SIZE;
=> 0x10f14 <init_heap+48>:	add	a0,a0,a1
0x0000000000010f18	48	    heap_end = heap_ptr + HEAP_SIZE;
=> 0x10f18 <init_heap+52>:	sd	a0,-1912(gp)
49	}
=> 0x10f1c <init_heap+56>:	ld	s0,0(sp)
0x0000000000010f20 in init_heap () at ctl.c:49
49	}
=> 0x10f20 <init_heap+60>:	ld	ra,8(sp)
0x0000000000010f24	49	}
=> 0x10f24 <init_heap+64>:	addi	sp,sp,16
0x0000000000010f28	49	}
=> 0x10f28 <init_heap+68>:	ld	ra,0(t6)
0x0000000000010f2c	49	}
=> 0x10f2c <init_heap+72>:	addi	t6,t6,16
0x0000000000010f30	49	}
=> 0x10f30 <init_heap+76>:	ret
initialise_benchmark () at ctl.c:187
187	}
=> 0x10e58 <initialise_benchmark+80>:	ld	s0,0(sp)
0x0000000000010e5c in initialise_benchmark () at ctl.c:187
187	}
=> 0x10e5c <initialise_benchmark+84>:	ld	ra,8(sp)
0x0000000000010e60	187	}
=> 0x10e60 <initialise_benchmark+88>:	addi	sp,sp,16
0x0000000000010e64	187	}
=> 0x10e64 <initialise_benchmark+92>:	ld	ra,0(t6)
0x0000000000010e68	187	}
=> 0x10e68 <initialise_benchmark+96>:	addi	t6,t6,16
0x0000000000010e6c	187	}
=> 0x10e6c <initialise_benchmark+100>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:57
57	      result = benchmark ();
=> 0x10240 <main+176>:	sd	a0,-120(s0)
0x0000000000010244	57	      result = benchmark ();
=> 0x10244 <main+180>:	jal	ra,0x10c80 <benchmark>
benchmark () at ctl.c:131
131	{
=> 0x10c80 <benchmark>:	addi	t6,t6,-16
0x0000000000010c84	131	{
=> 0x10c84 <benchmark+4>:	sd	ra,0(t6)
0x0000000000010c88	131	{
=> 0x10c88 <benchmark+8>:	st	zero,0(t6)
0x0000000000010c8c	131	{
=> 0x10c8c <benchmark+12>:	addi	sp,sp,-64
0x0000000000010c90	131	{
=> 0x10c90 <benchmark+16>:	sd	ra,56(sp)
0x0000000000010c94	131	{
=> 0x10c94 <benchmark+20>:	sd	s0,48(sp)
0x0000000000010c98	131	{
=> 0x10c98 <benchmark+24>:	addi	s0,sp,64
0x0000000000010c9c	131	{
=> 0x10c9c <benchmark+28>:	li	a0,0
135	  int cnt=0, i;
=> 0x10ca0 <benchmark+32>:	sw	a0,-36(s0)
137	  v = CTL_INIT (int);
=> 0x10ca4 <benchmark+36>:	jal	ra,0x10508 <ctl_intStackInit>
ctl_intStackInit () at ctl.c:102
102	MAKE_STACK(int)
=> 0x10508 <ctl_intStackInit>:	addi	t6,t6,-16
0x000000000001050c	102	MAKE_STACK(int)
=> 0x1050c <ctl_intStackInit+4>:	sd	ra,0(t6)
0x0000000000010510	102	MAKE_STACK(int)
=> 0x10510 <ctl_intStackInit+8>:	st	zero,0(t6)
0x0000000000010514	102	MAKE_STACK(int)
=> 0x10514 <ctl_intStackInit+12>:	addi	sp,sp,-16
0x0000000000010518	102	MAKE_STACK(int)
=> 0x10518 <ctl_intStackInit+16>:	sd	ra,8(sp)
0x000000000001051c	102	MAKE_STACK(int)
=> 0x1051c <ctl_intStackInit+20>:	sd	s0,0(sp)
0x0000000000010520	102	MAKE_STACK(int)
=> 0x10520 <ctl_intStackInit+24>:	addi	s0,sp,16
0x0000000000010524	102	MAKE_STACK(int)
=> 0x10524 <ctl_intStackInit+28>:	li	a0,100
102	MAKE_STACK(int)
=> 0x10528 <ctl_intStackInit+32>:	jal	ra,0x103a8 <ctl_intStackInitSize>
ctl_intStackInitSize (BlockSize=0) at ctl.c:102
102	MAKE_STACK(int)
=> 0x103a8 <ctl_intStackInitSize>:	addi	t6,t6,-16
0x00000000000103ac	102	MAKE_STACK(int)
=> 0x103ac <ctl_intStackInitSize+4>:	sd	ra,0(t6)
0x00000000000103b0	102	MAKE_STACK(int)
=> 0x103b0 <ctl_intStackInitSize+8>:	st	zero,0(t6)
0x00000000000103b4	102	MAKE_STACK(int)
=> 0x103b4 <ctl_intStackInitSize+12>:	addi	sp,sp,-48
0x00000000000103b8	102	MAKE_STACK(int)
=> 0x103b8 <ctl_intStackInitSize+16>:	sd	ra,40(sp)
0x00000000000103bc	102	MAKE_STACK(int)
=> 0x103bc <ctl_intStackInitSize+20>:	sd	s0,32(sp)
0x00000000000103c0	102	MAKE_STACK(int)
=> 0x103c0 <ctl_intStackInitSize+24>:	addi	s0,sp,48
0x00000000000103c4	102	MAKE_STACK(int)
=> 0x103c4 <ctl_intStackInitSize+28>:	mv	a1,a0
0x00000000000103c8	102	MAKE_STACK(int)
=> 0x103c8 <ctl_intStackInitSize+32>:	sw	a0,-28(s0)
0x00000000000103cc	102	MAKE_STACK(int)
=> 0x103cc <ctl_intStackInitSize+36>:	li	a0,32
102	MAKE_STACK(int)
=> 0x103d0 <ctl_intStackInitSize+40>:	sd	a1,-48(s0)
0x00000000000103d4	102	MAKE_STACK(int)
=> 0x103d4 <ctl_intStackInitSize+44>:	jal	ra,0x10474 <malloc_beebs>
malloc_beebs (size=433791695728) at ctl.c:60
60	{
=> 0x10474 <malloc_beebs>:	addi	t6,t6,-16
0x0000000000010478	60	{
=> 0x10478 <malloc_beebs+4>:	sd	ra,0(t6)
0x000000000001047c	60	{
=> 0x1047c <malloc_beebs+8>:	st	zero,0(t6)
0x0000000000010480	60	{
=> 0x10480 <malloc_beebs+12>:	addi	sp,sp,-48
0x0000000000010484	60	{
=> 0x10484 <malloc_beebs+16>:	sd	ra,40(sp)
0x0000000000010488	60	{
=> 0x10488 <malloc_beebs+20>:	sd	s0,32(sp)
0x000000000001048c	60	{
=> 0x1048c <malloc_beebs+24>:	addi	s0,sp,48
0x0000000000010490	60	{
=> 0x10490 <malloc_beebs+28>:	sd	a0,-32(s0)
61	    void *new_ptr = heap_ptr;
=> 0x10494 <malloc_beebs+32>:	ld	a1,-1920(gp)
0x0000000000010498	61	    void *new_ptr = heap_ptr;
=> 0x10498 <malloc_beebs+36>:	sd	a1,-40(s0)
63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x1049c <malloc_beebs+40>:	ld	a0,-1920(gp)
0x00000000000104a0	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a0 <malloc_beebs+44>:	ld	a1,-32(s0)
0x00000000000104a4	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a4 <malloc_beebs+48>:	add	a0,a0,a1
0x00000000000104a8	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a8 <malloc_beebs+52>:	ld	a1,-1912(gp)
0x00000000000104ac	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104ac <malloc_beebs+56>:	bltu	a1,a0,0x104c4 <malloc_beebs+80>
0x00000000000104b0	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b0 <malloc_beebs+60>:	j	0x104b4 <malloc_beebs+64>
0x00000000000104b4	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b4 <malloc_beebs+64>:	ld	a0,-32(s0)
0x00000000000104b8	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b8 <malloc_beebs+68>:	li	a1,0
0x00000000000104bc	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104bc <malloc_beebs+72>:	bne	a0,a1,0x104d0 <malloc_beebs+92>
67		    heap_ptr += size;
=> 0x104d0 <malloc_beebs+92>:	ld	a0,-32(s0)
0x00000000000104d4	67		    heap_ptr += size;
=> 0x104d4 <malloc_beebs+96>:	ld	a2,-1920(gp)
0x00000000000104d8	67		    heap_ptr += size;
=> 0x104d8 <malloc_beebs+100>:	add	a0,a2,a0
0x00000000000104dc	67		    heap_ptr += size;
=> 0x104dc <malloc_beebs+104>:	sd	a0,-1920(gp)
68		    return new_ptr;
=> 0x104e0 <malloc_beebs+108>:	ld	a0,-40(s0)
0x00000000000104e4	68		    return new_ptr;
=> 0x104e4 <malloc_beebs+112>:	sd	a0,-24(s0)
0x00000000000104e8	68		    return new_ptr;
=> 0x104e8 <malloc_beebs+116>:	j	0x104ec <malloc_beebs+120>
70	}
=> 0x104ec <malloc_beebs+120>:	ld	a0,-24(s0)
0x00000000000104f0	70	}
=> 0x104f0 <malloc_beebs+124>:	ld	s0,32(sp)
0x00000000000104f4 in malloc_beebs (size=433791695728) at ctl.c:70
70	}
=> 0x104f4 <malloc_beebs+128>:	ld	ra,40(sp)
0x00000000000104f8	70	}
=> 0x104f8 <malloc_beebs+132>:	addi	sp,sp,48
0x00000000000104fc	70	}
=> 0x104fc <malloc_beebs+136>:	ld	ra,0(t6)
0x0000000000010500	70	}
=> 0x10500 <malloc_beebs+140>:	addi	t6,t6,16
0x0000000000010504	70	}
=> 0x10504 <malloc_beebs+144>:	ret
0x00000000000103d8 in ctl_intStackInitSize (BlockSize=100) at ctl.c:102
102	MAKE_STACK(int)
=> 0x103d8 <ctl_intStackInitSize+48>:	sd	a0,-40(s0)
0x00000000000103dc	102	MAKE_STACK(int)
=> 0x103dc <ctl_intStackInitSize+52>:	ld	a0,-40(s0)
0x00000000000103e0	102	MAKE_STACK(int)
=> 0x103e0 <ctl_intStackInitSize+56>:	li	a1,0
0x00000000000103e4	102	MAKE_STACK(int)
=> 0x103e4 <ctl_intStackInitSize+60>:	bne	a0,a1,0x103f8 <ctl_intStackInitSize+80>
0x00000000000103f8	102	MAKE_STACK(int)
=> 0x103f8 <ctl_intStackInitSize+80>:	lw	a0,-28(s0)
0x00000000000103fc	102	MAKE_STACK(int)
=> 0x103fc <ctl_intStackInitSize+84>:	ld	a1,-40(s0)
0x0000000000010400	102	MAKE_STACK(int)
=> 0x10400 <ctl_intStackInitSize+88>:	sd	a0,24(a1)
0x0000000000010404	102	MAKE_STACK(int)
=> 0x10404 <ctl_intStackInitSize+92>:	lw	a0,-28(s0)
0x0000000000010408	102	MAKE_STACK(int)
=> 0x10408 <ctl_intStackInitSize+96>:	slli	a0,a0,0x2
0x000000000001040c	102	MAKE_STACK(int)
=> 0x1040c <ctl_intStackInitSize+100>:	jal	ra,0x10474 <malloc_beebs>
malloc_beebs (size=433791695728) at ctl.c:60
60	{
=> 0x10474 <malloc_beebs>:	addi	t6,t6,-16
0x0000000000010478	60	{
=> 0x10478 <malloc_beebs+4>:	sd	ra,0(t6)
0x000000000001047c	60	{
=> 0x1047c <malloc_beebs+8>:	st	zero,0(t6)
0x0000000000010480	60	{
=> 0x10480 <malloc_beebs+12>:	addi	sp,sp,-48
0x0000000000010484	60	{
=> 0x10484 <malloc_beebs+16>:	sd	ra,40(sp)
0x0000000000010488	60	{
=> 0x10488 <malloc_beebs+20>:	sd	s0,32(sp)
0x000000000001048c	60	{
=> 0x1048c <malloc_beebs+24>:	addi	s0,sp,48
0x0000000000010490	60	{
=> 0x10490 <malloc_beebs+28>:	sd	a0,-32(s0)
61	    void *new_ptr = heap_ptr;
=> 0x10494 <malloc_beebs+32>:	ld	a1,-1920(gp)
0x0000000000010498	61	    void *new_ptr = heap_ptr;
=> 0x10498 <malloc_beebs+36>:	sd	a1,-40(s0)
63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x1049c <malloc_beebs+40>:	ld	a0,-1920(gp)
0x00000000000104a0	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a0 <malloc_beebs+44>:	ld	a1,-32(s0)
0x00000000000104a4	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a4 <malloc_beebs+48>:	add	a0,a0,a1
0x00000000000104a8	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a8 <malloc_beebs+52>:	ld	a1,-1912(gp)
0x00000000000104ac	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104ac <malloc_beebs+56>:	bltu	a1,a0,0x104c4 <malloc_beebs+80>
0x00000000000104b0	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b0 <malloc_beebs+60>:	j	0x104b4 <malloc_beebs+64>
0x00000000000104b4	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b4 <malloc_beebs+64>:	ld	a0,-32(s0)
0x00000000000104b8	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b8 <malloc_beebs+68>:	li	a1,0
0x00000000000104bc	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104bc <malloc_beebs+72>:	bne	a0,a1,0x104d0 <malloc_beebs+92>
67		    heap_ptr += size;
=> 0x104d0 <malloc_beebs+92>:	ld	a0,-32(s0)
0x00000000000104d4	67		    heap_ptr += size;
=> 0x104d4 <malloc_beebs+96>:	ld	a2,-1920(gp)
0x00000000000104d8	67		    heap_ptr += size;
=> 0x104d8 <malloc_beebs+100>:	add	a0,a2,a0
0x00000000000104dc	67		    heap_ptr += size;
=> 0x104dc <malloc_beebs+104>:	sd	a0,-1920(gp)
68		    return new_ptr;
=> 0x104e0 <malloc_beebs+108>:	ld	a0,-40(s0)
0x00000000000104e4	68		    return new_ptr;
=> 0x104e4 <malloc_beebs+112>:	sd	a0,-24(s0)
0x00000000000104e8	68		    return new_ptr;
=> 0x104e8 <malloc_beebs+116>:	j	0x104ec <malloc_beebs+120>
70	}
=> 0x104ec <malloc_beebs+120>:	ld	a0,-24(s0)
0x00000000000104f0	70	}
=> 0x104f0 <malloc_beebs+124>:	ld	s0,32(sp)
0x00000000000104f4 in malloc_beebs (size=433791695728) at ctl.c:70
70	}
=> 0x104f4 <malloc_beebs+128>:	ld	ra,40(sp)
0x00000000000104f8	70	}
=> 0x104f8 <malloc_beebs+132>:	addi	sp,sp,48
0x00000000000104fc	70	}
=> 0x104fc <malloc_beebs+136>:	ld	ra,0(t6)
0x0000000000010500	70	}
=> 0x10500 <malloc_beebs+140>:	addi	t6,t6,16
0x0000000000010504	70	}
=> 0x10504 <malloc_beebs+144>:	ret
0x0000000000010410 in ctl_intStackInitSize (BlockSize=100) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10410 <ctl_intStackInitSize+104>:	ld	a1,-40(s0)
0x0000000000010414	102	MAKE_STACK(int)
=> 0x10414 <ctl_intStackInitSize+108>:	sd	a0,0(a1)
0x0000000000010418	102	MAKE_STACK(int)
=> 0x10418 <ctl_intStackInitSize+112>:	ld	a0,-40(s0)
0x000000000001041c	102	MAKE_STACK(int)
=> 0x1041c <ctl_intStackInitSize+116>:	ld	a0,0(a0)
0x0000000000010420	102	MAKE_STACK(int)
=> 0x10420 <ctl_intStackInitSize+120>:	li	a1,0
0x0000000000010424	102	MAKE_STACK(int)
=> 0x10424 <ctl_intStackInitSize+124>:	bne	a0,a1,0x10438 <ctl_intStackInitSize+144>
0x0000000000010438	102	MAKE_STACK(int)
=> 0x10438 <ctl_intStackInitSize+144>:	ld	a0,-40(s0)
0x000000000001043c	102	MAKE_STACK(int)
=> 0x1043c <ctl_intStackInitSize+148>:	li	a1,0
0x0000000000010440	102	MAKE_STACK(int)
=> 0x10440 <ctl_intStackInitSize+152>:	sd	a1,16(a0)
0x0000000000010444	102	MAKE_STACK(int)
=> 0x10444 <ctl_intStackInitSize+156>:	ld	a0,-40(s0)
0x0000000000010448	102	MAKE_STACK(int)
=> 0x10448 <ctl_intStackInitSize+160>:	sd	a1,8(a0)
0x000000000001044c	102	MAKE_STACK(int)
=> 0x1044c <ctl_intStackInitSize+164>:	ld	a0,-40(s0)
0x0000000000010450	102	MAKE_STACK(int)
=> 0x10450 <ctl_intStackInitSize+168>:	sd	a0,-24(s0)
0x0000000000010454	102	MAKE_STACK(int)
=> 0x10454 <ctl_intStackInitSize+172>:	j	0x10458 <ctl_intStackInitSize+176>
0x0000000000010458	102	MAKE_STACK(int)
=> 0x10458 <ctl_intStackInitSize+176>:	ld	a0,-24(s0)
0x000000000001045c	102	MAKE_STACK(int)
=> 0x1045c <ctl_intStackInitSize+180>:	ld	s0,32(sp)
0x0000000000010460 in ctl_intStackInitSize (BlockSize=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10460 <ctl_intStackInitSize+184>:	ld	ra,40(sp)
0x0000000000010464	102	MAKE_STACK(int)
=> 0x10464 <ctl_intStackInitSize+188>:	addi	sp,sp,48
0x0000000000010468	102	MAKE_STACK(int)
=> 0x10468 <ctl_intStackInitSize+192>:	ld	ra,0(t6)
0x000000000001046c	102	MAKE_STACK(int)
=> 0x1046c <ctl_intStackInitSize+196>:	addi	t6,t6,16
0x0000000000010470	102	MAKE_STACK(int)
=> 0x10470 <ctl_intStackInitSize+200>:	ret
0x000000000001052c in ctl_intStackInit () at ctl.c:102
102	MAKE_STACK(int)
=> 0x1052c <ctl_intStackInit+36>:	ld	s0,0(sp)
0x0000000000010530 in ctl_intStackInit () at ctl.c:102
102	MAKE_STACK(int)
=> 0x10530 <ctl_intStackInit+40>:	ld	ra,8(sp)
0x0000000000010534	102	MAKE_STACK(int)
=> 0x10534 <ctl_intStackInit+44>:	addi	sp,sp,16
0x0000000000010538	102	MAKE_STACK(int)
=> 0x10538 <ctl_intStackInit+48>:	ld	ra,0(t6)
0x000000000001053c	102	MAKE_STACK(int)
=> 0x1053c <ctl_intStackInit+52>:	addi	t6,t6,16
0x0000000000010540	102	MAKE_STACK(int)
=> 0x10540 <ctl_intStackInit+56>:	ret
0x0000000000010ca8 in benchmark () at ctl.c:137
137	  v = CTL_INIT (int);
=> 0x10ca8 <benchmark+40>:	sd	a0,-24(s0)
139	  for (i = init; i <= lim; ++i)
=> 0x10cac <benchmark+44>:	lw	a0,-1948(gp)
0x0000000000010cb0	139	  for (i = init; i <= lim; ++i)
=> 0x10cb0 <benchmark+48>:	sw	a0,-40(s0)
0x0000000000010cb4	139	  for (i = init; i <= lim; ++i)
=> 0x10cb4 <benchmark+52>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010714	102	MAKE_STACK(int)
=> 0x10714 <ctl_intStackPush+116>:	j	0x10718 <ctl_intStackPush+120>
0x0000000000010718	102	MAKE_STACK(int)
=> 0x10718 <ctl_intStackPush+120>:	ld	a0,-24(s0)
0x000000000001071c	102	MAKE_STACK(int)
=> 0x1071c <ctl_intStackPush+124>:	li	a1,0
0x0000000000010720	102	MAKE_STACK(int)
=> 0x10720 <ctl_intStackPush+128>:	sd	a1,16(a0)
0x0000000000010724	102	MAKE_STACK(int)
=> 0x10724 <ctl_intStackPush+132>:	j	0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
0x0000000000010cc4	139	  for (i = init; i <= lim; ++i)
=> 0x10cc4 <benchmark+68>:	j	0x10cc8 <benchmark+72>
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cc8 <benchmark+72>:	ld	a0,-24(s0)
0x0000000000010ccc	140	    CTL_PUSH (int, v, i * fact);
=> 0x10ccc <benchmark+76>:	lw	a1,-40(s0)
0x0000000000010cd0	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd0 <benchmark+80>:	lw	a2,-1940(gp)
0x0000000000010cd4	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd4 <benchmark+84>:	mulw	a1,a1,a2
0x0000000000010cd8	140	    CTL_PUSH (int, v, i * fact);
=> 0x10cd8 <benchmark+88>:	jal	ra,0x106a0 <ctl_intStackPush>
ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x106a0 <ctl_intStackPush>:	addi	t6,t6,-16
0x00000000000106a4	102	MAKE_STACK(int)
=> 0x106a4 <ctl_intStackPush+4>:	sd	ra,0(t6)
0x00000000000106a8	102	MAKE_STACK(int)
=> 0x106a8 <ctl_intStackPush+8>:	st	zero,0(t6)
0x00000000000106ac	102	MAKE_STACK(int)
=> 0x106ac <ctl_intStackPush+12>:	addi	sp,sp,-32
0x00000000000106b0	102	MAKE_STACK(int)
=> 0x106b0 <ctl_intStackPush+16>:	sd	ra,24(sp)
0x00000000000106b4	102	MAKE_STACK(int)
=> 0x106b4 <ctl_intStackPush+20>:	sd	s0,16(sp)
0x00000000000106b8	102	MAKE_STACK(int)
=> 0x106b8 <ctl_intStackPush+24>:	addi	s0,sp,32
0x00000000000106bc	102	MAKE_STACK(int)
=> 0x106bc <ctl_intStackPush+28>:	mv	a2,a1
0x00000000000106c0	102	MAKE_STACK(int)
=> 0x106c0 <ctl_intStackPush+32>:	sd	a0,-24(s0)
0x00000000000106c4	102	MAKE_STACK(int)
=> 0x106c4 <ctl_intStackPush+36>:	sw	a1,-28(s0)
102	MAKE_STACK(int)
=> 0x106c8 <ctl_intStackPush+40>:	ld	a0,-24(s0)
0x00000000000106cc	102	MAKE_STACK(int)
=> 0x106cc <ctl_intStackPush+44>:	ld	a1,8(a0)
0x00000000000106d0	102	MAKE_STACK(int)
=> 0x106d0 <ctl_intStackPush+48>:	addi	a1,a1,1
0x00000000000106d4	102	MAKE_STACK(int)
=> 0x106d4 <ctl_intStackPush+52>:	sd	a1,8(a0)
0x00000000000106d8	102	MAKE_STACK(int)
=> 0x106d8 <ctl_intStackPush+56>:	ld	a0,-24(s0)
0x00000000000106dc	102	MAKE_STACK(int)
=> 0x106dc <ctl_intStackPush+60>:	ld	a0,24(a0)
0x00000000000106e0	102	MAKE_STACK(int)
=> 0x106e0 <ctl_intStackPush+64>:	bgeu	a0,a1,0x106f8 <ctl_intStackPush+88>
0x00000000000106f8	102	MAKE_STACK(int)
=> 0x106f8 <ctl_intStackPush+88>:	ld	a0,-24(s0)
0x00000000000106fc	102	MAKE_STACK(int)
=> 0x106fc <ctl_intStackPush+92>:	ld	a1,16(a0)
0x0000000000010700	102	MAKE_STACK(int)
=> 0x10700 <ctl_intStackPush+96>:	addi	a1,a1,1
0x0000000000010704	102	MAKE_STACK(int)
=> 0x10704 <ctl_intStackPush+100>:	sd	a1,16(a0)
0x0000000000010708	102	MAKE_STACK(int)
=> 0x10708 <ctl_intStackPush+104>:	ld	a0,-24(s0)
0x000000000001070c	102	MAKE_STACK(int)
=> 0x1070c <ctl_intStackPush+108>:	ld	a0,8(a0)
0x0000000000010710	102	MAKE_STACK(int)
=> 0x10710 <ctl_intStackPush+112>:	bne	a1,a0,0x10728 <ctl_intStackPush+136>
0x0000000000010728	102	MAKE_STACK(int)
=> 0x10728 <ctl_intStackPush+136>:	lw	a0,-28(s0)
0x000000000001072c	102	MAKE_STACK(int)
=> 0x1072c <ctl_intStackPush+140>:	ld	a1,-24(s0)
0x0000000000010730	102	MAKE_STACK(int)
=> 0x10730 <ctl_intStackPush+144>:	ld	a2,0(a1)
0x0000000000010734	102	MAKE_STACK(int)
=> 0x10734 <ctl_intStackPush+148>:	ld	a1,16(a1)
0x0000000000010738	102	MAKE_STACK(int)
=> 0x10738 <ctl_intStackPush+152>:	slli	a1,a1,0x2
0x000000000001073c	102	MAKE_STACK(int)
=> 0x1073c <ctl_intStackPush+156>:	add	a1,a2,a1
0x0000000000010740	102	MAKE_STACK(int)
=> 0x10740 <ctl_intStackPush+160>:	sw	a0,0(a1)
0x0000000000010744	102	MAKE_STACK(int)
=> 0x10744 <ctl_intStackPush+164>:	li	a0,0
0x0000000000010748	102	MAKE_STACK(int)
=> 0x10748 <ctl_intStackPush+168>:	ld	s0,16(sp)
0x000000000001074c in ctl_intStackPush (s=0x202d8 <heap>, value=63) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1074c <ctl_intStackPush+172>:	ld	ra,24(sp)
0x0000000000010750	102	MAKE_STACK(int)
=> 0x10750 <ctl_intStackPush+176>:	addi	sp,sp,32
0x0000000000010754	102	MAKE_STACK(int)
=> 0x10754 <ctl_intStackPush+180>:	ld	ra,0(t6)
0x0000000000010758	102	MAKE_STACK(int)
=> 0x10758 <ctl_intStackPush+184>:	addi	t6,t6,16
0x000000000001075c	102	MAKE_STACK(int)
=> 0x1075c <ctl_intStackPush+188>:	ret
0x0000000000010cdc in benchmark () at ctl.c:140
140	    CTL_PUSH (int, v, i * fact);
=> 0x10cdc <benchmark+92>:	j	0x10ce0 <benchmark+96>
139	  for (i = init; i <= lim; ++i)
=> 0x10ce0 <benchmark+96>:	lw	a0,-40(s0)
0x0000000000010ce4	139	  for (i = init; i <= lim; ++i)
=> 0x10ce4 <benchmark+100>:	addi	a0,a0,1
0x0000000000010ce8	139	  for (i = init; i <= lim; ++i)
=> 0x10ce8 <benchmark+104>:	sw	a0,-40(s0)
0x0000000000010cec	139	  for (i = init; i <= lim; ++i)
=> 0x10cec <benchmark+108>:	j	0x10cb8 <benchmark+56>
0x0000000000010cb8	139	  for (i = init; i <= lim; ++i)
=> 0x10cb8 <benchmark+56>:	lw	a0,-40(s0)
0x0000000000010cbc	139	  for (i = init; i <= lim; ++i)
=> 0x10cbc <benchmark+60>:	lw	a1,-1944(gp)
0x0000000000010cc0	139	  for (i = init; i <= lim; ++i)
=> 0x10cc0 <benchmark+64>:	blt	a1,a0,0x10cf0 <benchmark+112>
142	  CTL_DELETE (int, v, begin, end);
=> 0x10cf0 <benchmark+112>:	j	0x10cf4 <benchmark+116>
0x0000000000010cf4	142	  CTL_DELETE (int, v, begin, end);
=> 0x10cf4 <benchmark+116>:	j	0x10cf8 <benchmark+120>
144	  while(v->size > 0)
=> 0x10cf8 <benchmark+120>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x65) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x65) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x44c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x44c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x88d00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x88d00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xcc300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xcc300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x10ee00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x10ee00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x150e00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x150e00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x192300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x192300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x1d2d00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x1d2d00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x212c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x212c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x252000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x252000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x290900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x290900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x2ce700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x2ce700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x30ba00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x30ba00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x348200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x348200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x383f00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x383f00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x3bf100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x3bf100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x3f9800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x3f9800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x433400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x433400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x46c500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x46c500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x4a4b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x4a4b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x4dc600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x4dc600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x513600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x513600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x549b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x549b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x57f500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x57f500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x5b4400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x5b4400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x5e8800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x5e8800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x61c100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x61c100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x64ef00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x64ef00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x681200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x681200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x6b2a00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x6b2a00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x6e3700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x6e3700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x713900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x713900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x743000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x743000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x771c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x771c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x79fd00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x79fd00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x7cd300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x7cd300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x7f9e00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x7f9e00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x825e00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x825e00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x851300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x851300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x87bd00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x87bd00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x8a5c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x8a5c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x8cf000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x8cf000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x8f7900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x8f7900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x91f700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x91f700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x946a00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x946a00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x96d200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x96d200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x992f00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x992f00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x9b8100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x9b8100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0x9dc800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0x9dc800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xa00400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xa00400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xa23500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xa23500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xa45b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xa45b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xa67600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xa67600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xa88600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xa88600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xaa8b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xaa8b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xac8500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xac8500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xae7400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xae7400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xb05800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xb05800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xb23100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xb23100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xb3ff00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xb3ff00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xb5c200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xb5c200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xb77a00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xb77a00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xb92700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xb92700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xbac900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xbac900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xbc6000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xbc6000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xbdec00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xbdec00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xbf6d00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xbf6d00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xc0e300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xc0e300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xc24e00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xc24e00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xc3ae00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xc3ae00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xc50300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xc50300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xc64d00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xc64d00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xc78c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xc78c00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xc8c000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xc8c000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xc9e900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xc9e900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xcb0700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xcb0700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xcc1a00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xcc1a00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xcd2200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xcd2200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xce1f00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xce1f00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xcf1100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xcf1100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xcff800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xcff800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd0d400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd0d400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd1a500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd1a500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd26b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd26b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd32600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd32600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd3d600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd3d600000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd47b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd47b00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd51500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd51500000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd5a400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd5a400000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd62800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd62800000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd6a100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd6a100000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd70f00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd70f00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd77200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd77200000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd7ca00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd7ca00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd81700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd81700000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd85900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd85900000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd89000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd89000000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd8bc00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd8bc00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd8dd00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010800	102	MAKE_STACK(int)
=> 0x10800 <ctl_intStackPop+160>:	j	0x10804 <ctl_intStackPop+164>
0x0000000000010804	102	MAKE_STACK(int)
=> 0x10804 <ctl_intStackPop+164>:	ld	a0,-32(s0)
0x0000000000010808	102	MAKE_STACK(int)
=> 0x10808 <ctl_intStackPop+168>:	ld	a0,16(a0)
0x000000000001080c	102	MAKE_STACK(int)
=> 0x1080c <ctl_intStackPop+172>:	li	a1,0
0x0000000000010810	102	MAKE_STACK(int)
=> 0x10810 <ctl_intStackPop+176>:	bne	a0,a1,0x10834 <ctl_intStackPop+212>
0x0000000000010834	102	MAKE_STACK(int)
=> 0x10834 <ctl_intStackPop+212>:	ld	a0,-32(s0)
0x0000000000010838	102	MAKE_STACK(int)
=> 0x10838 <ctl_intStackPop+216>:	ld	a1,16(a0)
0x000000000001083c	102	MAKE_STACK(int)
=> 0x1083c <ctl_intStackPop+220>:	addi	a1,a1,-1
0x0000000000010840	102	MAKE_STACK(int)
=> 0x10840 <ctl_intStackPop+224>:	sd	a1,16(a0)
0x0000000000010844	102	MAKE_STACK(int)
=> 0x10844 <ctl_intStackPop+228>:	j	0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd8dd00000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
0x0000000000010d0c	144	  while(v->size > 0)
=> 0x10d0c <benchmark+140>:	j	0x10d10 <benchmark+144>
148	    CTL_POP (int, v, &k);
=> 0x10d10 <benchmark+144>:	ld	a0,-24(s0)
0x0000000000010d14	148	    CTL_POP (int, v, &k);
=> 0x10d14 <benchmark+148>:	addi	a1,s0,-44
0x0000000000010d18	148	    CTL_POP (int, v, &k);
=> 0x10d18 <benchmark+152>:	jal	ra,0x10760 <ctl_intStackPop>
ctl_intStackPop (s=0x3ffffffaf0, value=0xd8f300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10760 <ctl_intStackPop>:	addi	t6,t6,-16
0x0000000000010764	102	MAKE_STACK(int)
=> 0x10764 <ctl_intStackPop+4>:	sd	ra,0(t6)
0x0000000000010768	102	MAKE_STACK(int)
=> 0x10768 <ctl_intStackPop+8>:	st	zero,0(t6)
0x000000000001076c	102	MAKE_STACK(int)
=> 0x1076c <ctl_intStackPop+12>:	addi	sp,sp,-48
0x0000000000010770	102	MAKE_STACK(int)
=> 0x10770 <ctl_intStackPop+16>:	sd	ra,40(sp)
0x0000000000010774	102	MAKE_STACK(int)
=> 0x10774 <ctl_intStackPop+20>:	sd	s0,32(sp)
0x0000000000010778	102	MAKE_STACK(int)
=> 0x10778 <ctl_intStackPop+24>:	addi	s0,sp,48
0x000000000001077c	102	MAKE_STACK(int)
=> 0x1077c <ctl_intStackPop+28>:	sd	a0,-32(s0)
0x0000000000010780	102	MAKE_STACK(int)
=> 0x10780 <ctl_intStackPop+32>:	sd	a1,-40(s0)
102	MAKE_STACK(int)
=> 0x10784 <ctl_intStackPop+36>:	ld	a0,-32(s0)
0x0000000000010788	102	MAKE_STACK(int)
=> 0x10788 <ctl_intStackPop+40>:	ld	a0,8(a0)
0x000000000001078c	102	MAKE_STACK(int)
=> 0x1078c <ctl_intStackPop+44>:	li	a1,0
0x0000000000010790	102	MAKE_STACK(int)
=> 0x10790 <ctl_intStackPop+48>:	bne	a0,a1,0x107ac <ctl_intStackPop+76>
0x00000000000107ac	102	MAKE_STACK(int)
=> 0x107ac <ctl_intStackPop+76>:	ld	a0,-40(s0)
0x00000000000107b0	102	MAKE_STACK(int)
=> 0x107b0 <ctl_intStackPop+80>:	li	a1,0
0x00000000000107b4	102	MAKE_STACK(int)
=> 0x107b4 <ctl_intStackPop+84>:	beq	a0,a1,0x107e0 <ctl_intStackPop+128>
0x00000000000107b8	102	MAKE_STACK(int)
=> 0x107b8 <ctl_intStackPop+88>:	j	0x107bc <ctl_intStackPop+92>
0x00000000000107bc	102	MAKE_STACK(int)
=> 0x107bc <ctl_intStackPop+92>:	ld	a0,-32(s0)
0x00000000000107c0	102	MAKE_STACK(int)
=> 0x107c0 <ctl_intStackPop+96>:	ld	a1,0(a0)
0x00000000000107c4	102	MAKE_STACK(int)
=> 0x107c4 <ctl_intStackPop+100>:	ld	a0,16(a0)
0x00000000000107c8	102	MAKE_STACK(int)
=> 0x107c8 <ctl_intStackPop+104>:	slli	a0,a0,0x2
0x00000000000107cc	102	MAKE_STACK(int)
=> 0x107cc <ctl_intStackPop+108>:	add	a0,a1,a0
0x00000000000107d0	102	MAKE_STACK(int)
=> 0x107d0 <ctl_intStackPop+112>:	lw	a0,0(a0)
0x00000000000107d4	102	MAKE_STACK(int)
=> 0x107d4 <ctl_intStackPop+116>:	ld	a1,-40(s0)
0x00000000000107d8	102	MAKE_STACK(int)
=> 0x107d8 <ctl_intStackPop+120>:	sw	a0,0(a1)
0x00000000000107dc	102	MAKE_STACK(int)
=> 0x107dc <ctl_intStackPop+124>:	j	0x107e0 <ctl_intStackPop+128>
0x00000000000107e0	102	MAKE_STACK(int)
=> 0x107e0 <ctl_intStackPop+128>:	ld	a0,-32(s0)
0x00000000000107e4	102	MAKE_STACK(int)
=> 0x107e4 <ctl_intStackPop+132>:	ld	a1,8(a0)
0x00000000000107e8	102	MAKE_STACK(int)
=> 0x107e8 <ctl_intStackPop+136>:	addi	a1,a1,-1
0x00000000000107ec	102	MAKE_STACK(int)
=> 0x107ec <ctl_intStackPop+140>:	sd	a1,8(a0)
0x00000000000107f0	102	MAKE_STACK(int)
=> 0x107f0 <ctl_intStackPop+144>:	ld	a0,-32(s0)
0x00000000000107f4	102	MAKE_STACK(int)
=> 0x107f4 <ctl_intStackPop+148>:	ld	a0,8(a0)
0x00000000000107f8	102	MAKE_STACK(int)
=> 0x107f8 <ctl_intStackPop+152>:	li	a1,0
0x00000000000107fc	102	MAKE_STACK(int)
=> 0x107fc <ctl_intStackPop+156>:	beq	a0,a1,0x10848 <ctl_intStackPop+232>
0x0000000000010848	102	MAKE_STACK(int)
=> 0x10848 <ctl_intStackPop+232>:	li	a0,0
0x000000000001084c	102	MAKE_STACK(int)
=> 0x1084c <ctl_intStackPop+236>:	sw	a0,-20(s0)
0x0000000000010850	102	MAKE_STACK(int)
=> 0x10850 <ctl_intStackPop+240>:	j	0x10854 <ctl_intStackPop+244>
0x0000000000010854	102	MAKE_STACK(int)
=> 0x10854 <ctl_intStackPop+244>:	lw	a0,-20(s0)
0x0000000000010858	102	MAKE_STACK(int)
=> 0x10858 <ctl_intStackPop+248>:	ld	s0,32(sp)
0x000000000001085c in ctl_intStackPop (s=0x3ffffffaf0, value=0xd8f300000065) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1085c <ctl_intStackPop+252>:	ld	ra,40(sp)
0x0000000000010860	102	MAKE_STACK(int)
=> 0x10860 <ctl_intStackPop+256>:	addi	sp,sp,48
0x0000000000010864	102	MAKE_STACK(int)
=> 0x10864 <ctl_intStackPop+260>:	ld	ra,0(t6)
0x0000000000010868	102	MAKE_STACK(int)
=> 0x10868 <ctl_intStackPop+264>:	addi	t6,t6,16
0x000000000001086c	102	MAKE_STACK(int)
=> 0x1086c <ctl_intStackPop+268>:	ret
benchmark () at ctl.c:150
150	    cnt += k;
=> 0x10d1c <benchmark+156>:	lw	a1,-44(s0)
0x0000000000010d20	150	    cnt += k;
=> 0x10d20 <benchmark+160>:	lw	a2,-36(s0)
0x0000000000010d24	150	    cnt += k;
=> 0x10d24 <benchmark+164>:	add	a1,a2,a1
0x0000000000010d28	150	    cnt += k;
=> 0x10d28 <benchmark+168>:	sw	a1,-36(s0)
144	  while(v->size > 0)
=> 0x10d2c <benchmark+172>:	j	0x10cfc <benchmark+124>
0x0000000000010cfc	144	  while(v->size > 0)
=> 0x10cfc <benchmark+124>:	ld	a0,-24(s0)
0x0000000000010d00	144	  while(v->size > 0)
=> 0x10d00 <benchmark+128>:	ld	a0,8(a0)
0x0000000000010d04	144	  while(v->size > 0)
=> 0x10d04 <benchmark+132>:	li	a1,0
0x0000000000010d08	144	  while(v->size > 0)
=> 0x10d08 <benchmark+136>:	beq	a0,a1,0x10d30 <benchmark+176>
153	  CTL_FREE (int, v);
=> 0x10d30 <benchmark+176>:	ld	a0,-24(s0)
0x0000000000010d34	153	  CTL_FREE (int, v);
=> 0x10d34 <benchmark+180>:	jal	ra,0x1061c <ctl_intStackFree>
ctl_intStackFree (s=0x202d8 <heap>) at ctl.c:102
102	MAKE_STACK(int)
=> 0x1061c <ctl_intStackFree>:	addi	t6,t6,-16
0x0000000000010620	102	MAKE_STACK(int)
=> 0x10620 <ctl_intStackFree+4>:	sd	ra,0(t6)
0x0000000000010624	102	MAKE_STACK(int)
=> 0x10624 <ctl_intStackFree+8>:	st	zero,0(t6)
0x0000000000010628	102	MAKE_STACK(int)
=> 0x10628 <ctl_intStackFree+12>:	addi	sp,sp,-32
0x000000000001062c	102	MAKE_STACK(int)
=> 0x1062c <ctl_intStackFree+16>:	sd	ra,24(sp)
0x0000000000010630	102	MAKE_STACK(int)
=> 0x10630 <ctl_intStackFree+20>:	sd	s0,16(sp)
0x0000000000010634	102	MAKE_STACK(int)
=> 0x10634 <ctl_intStackFree+24>:	addi	s0,sp,32
0x0000000000010638	102	MAKE_STACK(int)
=> 0x10638 <ctl_intStackFree+28>:	sd	a0,-24(s0)
102	MAKE_STACK(int)
=> 0x1063c <ctl_intStackFree+32>:	ld	a0,-24(s0)
0x0000000000010640	102	MAKE_STACK(int)
=> 0x10640 <ctl_intStackFree+36>:	ld	a0,0(a0)
0x0000000000010644	102	MAKE_STACK(int)
=> 0x10644 <ctl_intStackFree+40>:	jal	ra,0x10668 <free_beebs>
free_beebs (ptr=0x202d8 <heap>) at ctl.c:78
78	{
=> 0x10668 <free_beebs>:	addi	t6,t6,-16
0x000000000001066c	78	{
=> 0x1066c <free_beebs+4>:	sd	ra,0(t6)
0x0000000000010670	78	{
=> 0x10670 <free_beebs+8>:	st	zero,0(t6)
0x0000000000010674	78	{
=> 0x10674 <free_beebs+12>:	addi	sp,sp,-32
0x0000000000010678	78	{
=> 0x10678 <free_beebs+16>:	sd	ra,24(sp)
0x000000000001067c	78	{
=> 0x1067c <free_beebs+20>:	sd	s0,16(sp)
0x0000000000010680	78	{
=> 0x10680 <free_beebs+24>:	addi	s0,sp,32
0x0000000000010684	78	{
=> 0x10684 <free_beebs+28>:	sd	a0,-24(s0)
79	}
=> 0x10688 <free_beebs+32>:	ld	s0,16(sp)
0x000000000001068c in free_beebs (ptr=0x202d8 <heap>) at ctl.c:79
79	}
=> 0x1068c <free_beebs+36>:	ld	ra,24(sp)
0x0000000000010690	79	}
=> 0x10690 <free_beebs+40>:	addi	sp,sp,32
0x0000000000010694	79	}
=> 0x10694 <free_beebs+44>:	ld	ra,0(t6)
0x0000000000010698	79	}
=> 0x10698 <free_beebs+48>:	addi	t6,t6,16
0x000000000001069c	79	}
=> 0x1069c <free_beebs+52>:	ret
0x0000000000010648 in ctl_intStackFree (s=0x202d8 <heap>) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10648 <ctl_intStackFree+44>:	ld	a0,-24(s0)
0x000000000001064c	102	MAKE_STACK(int)
=> 0x1064c <ctl_intStackFree+48>:	jal	ra,0x10668 <free_beebs>
free_beebs (ptr=0x202d8 <heap>) at ctl.c:78
78	{
=> 0x10668 <free_beebs>:	addi	t6,t6,-16
0x000000000001066c	78	{
=> 0x1066c <free_beebs+4>:	sd	ra,0(t6)
0x0000000000010670	78	{
=> 0x10670 <free_beebs+8>:	st	zero,0(t6)
0x0000000000010674	78	{
=> 0x10674 <free_beebs+12>:	addi	sp,sp,-32
0x0000000000010678	78	{
=> 0x10678 <free_beebs+16>:	sd	ra,24(sp)
0x000000000001067c	78	{
=> 0x1067c <free_beebs+20>:	sd	s0,16(sp)
0x0000000000010680	78	{
=> 0x10680 <free_beebs+24>:	addi	s0,sp,32
0x0000000000010684	78	{
=> 0x10684 <free_beebs+28>:	sd	a0,-24(s0)
79	}
=> 0x10688 <free_beebs+32>:	ld	s0,16(sp)
0x000000000001068c in free_beebs (ptr=0x202d8 <heap>) at ctl.c:79
79	}
=> 0x1068c <free_beebs+36>:	ld	ra,24(sp)
0x0000000000010690	79	}
=> 0x10690 <free_beebs+40>:	addi	sp,sp,32
0x0000000000010694	79	}
=> 0x10694 <free_beebs+44>:	ld	ra,0(t6)
0x0000000000010698	79	}
=> 0x10698 <free_beebs+48>:	addi	t6,t6,16
0x000000000001069c	79	}
=> 0x1069c <free_beebs+52>:	ret
0x0000000000010650 in ctl_intStackFree (s=0x202d8 <heap>) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10650 <ctl_intStackFree+52>:	ld	s0,16(sp)
0x0000000000010654 in ctl_intStackFree (s=0x202d8 <heap>) at ctl.c:102
102	MAKE_STACK(int)
=> 0x10654 <ctl_intStackFree+56>:	ld	ra,24(sp)
0x0000000000010658	102	MAKE_STACK(int)
=> 0x10658 <ctl_intStackFree+60>:	addi	sp,sp,32
0x000000000001065c	102	MAKE_STACK(int)
=> 0x1065c <ctl_intStackFree+64>:	ld	ra,0(t6)
0x0000000000010660	102	MAKE_STACK(int)
=> 0x10660 <ctl_intStackFree+68>:	addi	t6,t6,16
0x0000000000010664	102	MAKE_STACK(int)
=> 0x10664 <ctl_intStackFree+72>:	ret
benchmark () at ctl.c:155
155	  v2 = CTL_INIT (pair);
=> 0x10d38 <benchmark+184>:	jal	ra,0x1093c <ctl_pairStackInit>
ctl_pairStackInit () at ctl.c:103
103	MAKE_STACK(pair)
=> 0x1093c <ctl_pairStackInit>:	addi	t6,t6,-16
0x0000000000010940	103	MAKE_STACK(pair)
=> 0x10940 <ctl_pairStackInit+4>:	sd	ra,0(t6)
0x0000000000010944	103	MAKE_STACK(pair)
=> 0x10944 <ctl_pairStackInit+8>:	st	zero,0(t6)
0x0000000000010948	103	MAKE_STACK(pair)
=> 0x10948 <ctl_pairStackInit+12>:	addi	sp,sp,-16
0x000000000001094c	103	MAKE_STACK(pair)
=> 0x1094c <ctl_pairStackInit+16>:	sd	ra,8(sp)
0x0000000000010950	103	MAKE_STACK(pair)
=> 0x10950 <ctl_pairStackInit+20>:	sd	s0,0(sp)
0x0000000000010954	103	MAKE_STACK(pair)
=> 0x10954 <ctl_pairStackInit+24>:	addi	s0,sp,16
0x0000000000010958	103	MAKE_STACK(pair)
=> 0x10958 <ctl_pairStackInit+28>:	li	a0,100
103	MAKE_STACK(pair)
=> 0x1095c <ctl_pairStackInit+32>:	jal	ra,0x10870 <ctl_pairStackInitSize>
ctl_pairStackInitSize (BlockSize=0) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10870 <ctl_pairStackInitSize>:	addi	t6,t6,-16
0x0000000000010874	103	MAKE_STACK(pair)
=> 0x10874 <ctl_pairStackInitSize+4>:	sd	ra,0(t6)
0x0000000000010878	103	MAKE_STACK(pair)
=> 0x10878 <ctl_pairStackInitSize+8>:	st	zero,0(t6)
0x000000000001087c	103	MAKE_STACK(pair)
=> 0x1087c <ctl_pairStackInitSize+12>:	addi	sp,sp,-48
0x0000000000010880	103	MAKE_STACK(pair)
=> 0x10880 <ctl_pairStackInitSize+16>:	sd	ra,40(sp)
0x0000000000010884	103	MAKE_STACK(pair)
=> 0x10884 <ctl_pairStackInitSize+20>:	sd	s0,32(sp)
0x0000000000010888	103	MAKE_STACK(pair)
=> 0x10888 <ctl_pairStackInitSize+24>:	addi	s0,sp,48
0x000000000001088c	103	MAKE_STACK(pair)
=> 0x1088c <ctl_pairStackInitSize+28>:	mv	a1,a0
0x0000000000010890	103	MAKE_STACK(pair)
=> 0x10890 <ctl_pairStackInitSize+32>:	sw	a0,-28(s0)
0x0000000000010894	103	MAKE_STACK(pair)
=> 0x10894 <ctl_pairStackInitSize+36>:	li	a0,32
103	MAKE_STACK(pair)
=> 0x10898 <ctl_pairStackInitSize+40>:	sd	a1,-48(s0)
0x000000000001089c	103	MAKE_STACK(pair)
=> 0x1089c <ctl_pairStackInitSize+44>:	jal	ra,0x10474 <malloc_beebs>
malloc_beebs (size=433791695536) at ctl.c:60
60	{
=> 0x10474 <malloc_beebs>:	addi	t6,t6,-16
0x0000000000010478	60	{
=> 0x10478 <malloc_beebs+4>:	sd	ra,0(t6)
0x000000000001047c	60	{
=> 0x1047c <malloc_beebs+8>:	st	zero,0(t6)
0x0000000000010480	60	{
=> 0x10480 <malloc_beebs+12>:	addi	sp,sp,-48
0x0000000000010484	60	{
=> 0x10484 <malloc_beebs+16>:	sd	ra,40(sp)
0x0000000000010488	60	{
=> 0x10488 <malloc_beebs+20>:	sd	s0,32(sp)
0x000000000001048c	60	{
=> 0x1048c <malloc_beebs+24>:	addi	s0,sp,48
0x0000000000010490	60	{
=> 0x10490 <malloc_beebs+28>:	sd	a0,-32(s0)
61	    void *new_ptr = heap_ptr;
=> 0x10494 <malloc_beebs+32>:	ld	a1,-1920(gp)
0x0000000000010498	61	    void *new_ptr = heap_ptr;
=> 0x10498 <malloc_beebs+36>:	sd	a1,-40(s0)
63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x1049c <malloc_beebs+40>:	ld	a0,-1920(gp)
0x00000000000104a0	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a0 <malloc_beebs+44>:	ld	a1,-32(s0)
0x00000000000104a4	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a4 <malloc_beebs+48>:	add	a0,a0,a1
0x00000000000104a8	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a8 <malloc_beebs+52>:	ld	a1,-1912(gp)
0x00000000000104ac	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104ac <malloc_beebs+56>:	bltu	a1,a0,0x104c4 <malloc_beebs+80>
0x00000000000104b0	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b0 <malloc_beebs+60>:	j	0x104b4 <malloc_beebs+64>
0x00000000000104b4	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b4 <malloc_beebs+64>:	ld	a0,-32(s0)
0x00000000000104b8	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b8 <malloc_beebs+68>:	li	a1,0
0x00000000000104bc	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104bc <malloc_beebs+72>:	bne	a0,a1,0x104d0 <malloc_beebs+92>
67		    heap_ptr += size;
=> 0x104d0 <malloc_beebs+92>:	ld	a0,-32(s0)
0x00000000000104d4	67		    heap_ptr += size;
=> 0x104d4 <malloc_beebs+96>:	ld	a2,-1920(gp)
0x00000000000104d8	67		    heap_ptr += size;
=> 0x104d8 <malloc_beebs+100>:	add	a0,a2,a0
0x00000000000104dc	67		    heap_ptr += size;
=> 0x104dc <malloc_beebs+104>:	sd	a0,-1920(gp)
68		    return new_ptr;
=> 0x104e0 <malloc_beebs+108>:	ld	a0,-40(s0)
0x00000000000104e4	68		    return new_ptr;
=> 0x104e4 <malloc_beebs+112>:	sd	a0,-24(s0)
0x00000000000104e8	68		    return new_ptr;
=> 0x104e8 <malloc_beebs+116>:	j	0x104ec <malloc_beebs+120>
70	}
=> 0x104ec <malloc_beebs+120>:	ld	a0,-24(s0)
0x00000000000104f0	70	}
=> 0x104f0 <malloc_beebs+124>:	ld	s0,32(sp)
0x00000000000104f4 in malloc_beebs (size=433791695536) at ctl.c:70
70	}
=> 0x104f4 <malloc_beebs+128>:	ld	ra,40(sp)
0x00000000000104f8	70	}
=> 0x104f8 <malloc_beebs+132>:	addi	sp,sp,48
0x00000000000104fc	70	}
=> 0x104fc <malloc_beebs+136>:	ld	ra,0(t6)
0x0000000000010500	70	}
=> 0x10500 <malloc_beebs+140>:	addi	t6,t6,16
0x0000000000010504	70	}
=> 0x10504 <malloc_beebs+144>:	ret
0x00000000000108a0 in ctl_pairStackInitSize (BlockSize=100) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x108a0 <ctl_pairStackInitSize+48>:	sd	a0,-40(s0)
0x00000000000108a4	103	MAKE_STACK(pair)
=> 0x108a4 <ctl_pairStackInitSize+52>:	ld	a0,-40(s0)
0x00000000000108a8	103	MAKE_STACK(pair)
=> 0x108a8 <ctl_pairStackInitSize+56>:	li	a1,0
0x00000000000108ac	103	MAKE_STACK(pair)
=> 0x108ac <ctl_pairStackInitSize+60>:	bne	a0,a1,0x108c0 <ctl_pairStackInitSize+80>
0x00000000000108c0	103	MAKE_STACK(pair)
=> 0x108c0 <ctl_pairStackInitSize+80>:	lw	a0,-28(s0)
0x00000000000108c4	103	MAKE_STACK(pair)
=> 0x108c4 <ctl_pairStackInitSize+84>:	ld	a1,-40(s0)
0x00000000000108c8	103	MAKE_STACK(pair)
=> 0x108c8 <ctl_pairStackInitSize+88>:	sd	a0,24(a1)
0x00000000000108cc	103	MAKE_STACK(pair)
=> 0x108cc <ctl_pairStackInitSize+92>:	lw	a0,-28(s0)
0x00000000000108d0	103	MAKE_STACK(pair)
=> 0x108d0 <ctl_pairStackInitSize+96>:	slli	a0,a0,0x3
0x00000000000108d4	103	MAKE_STACK(pair)
=> 0x108d4 <ctl_pairStackInitSize+100>:	jal	ra,0x10474 <malloc_beebs>
malloc_beebs (size=433791695536) at ctl.c:60
60	{
=> 0x10474 <malloc_beebs>:	addi	t6,t6,-16
0x0000000000010478	60	{
=> 0x10478 <malloc_beebs+4>:	sd	ra,0(t6)
0x000000000001047c	60	{
=> 0x1047c <malloc_beebs+8>:	st	zero,0(t6)
0x0000000000010480	60	{
=> 0x10480 <malloc_beebs+12>:	addi	sp,sp,-48
0x0000000000010484	60	{
=> 0x10484 <malloc_beebs+16>:	sd	ra,40(sp)
0x0000000000010488	60	{
=> 0x10488 <malloc_beebs+20>:	sd	s0,32(sp)
0x000000000001048c	60	{
=> 0x1048c <malloc_beebs+24>:	addi	s0,sp,48
0x0000000000010490	60	{
=> 0x10490 <malloc_beebs+28>:	sd	a0,-32(s0)
61	    void *new_ptr = heap_ptr;
=> 0x10494 <malloc_beebs+32>:	ld	a1,-1920(gp)
0x0000000000010498	61	    void *new_ptr = heap_ptr;
=> 0x10498 <malloc_beebs+36>:	sd	a1,-40(s0)
63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x1049c <malloc_beebs+40>:	ld	a0,-1920(gp)
0x00000000000104a0	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a0 <malloc_beebs+44>:	ld	a1,-32(s0)
0x00000000000104a4	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a4 <malloc_beebs+48>:	add	a0,a0,a1
0x00000000000104a8	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104a8 <malloc_beebs+52>:	ld	a1,-1912(gp)
0x00000000000104ac	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104ac <malloc_beebs+56>:	bltu	a1,a0,0x104c4 <malloc_beebs+80>
0x00000000000104b0	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b0 <malloc_beebs+60>:	j	0x104b4 <malloc_beebs+64>
0x00000000000104b4	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b4 <malloc_beebs+64>:	ld	a0,-32(s0)
0x00000000000104b8	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104b8 <malloc_beebs+68>:	li	a1,0
0x00000000000104bc	63	    if (((heap_ptr + size) > heap_end) || (0 == size))
=> 0x104bc <malloc_beebs+72>:	bne	a0,a1,0x104d0 <malloc_beebs+92>
67		    heap_ptr += size;
=> 0x104d0 <malloc_beebs+92>:	ld	a0,-32(s0)
0x00000000000104d4	67		    heap_ptr += size;
=> 0x104d4 <malloc_beebs+96>:	ld	a2,-1920(gp)
0x00000000000104d8	67		    heap_ptr += size;
=> 0x104d8 <malloc_beebs+100>:	add	a0,a2,a0
0x00000000000104dc	67		    heap_ptr += size;
=> 0x104dc <malloc_beebs+104>:	sd	a0,-1920(gp)
68		    return new_ptr;
=> 0x104e0 <malloc_beebs+108>:	ld	a0,-40(s0)
0x00000000000104e4	68		    return new_ptr;
=> 0x104e4 <malloc_beebs+112>:	sd	a0,-24(s0)
0x00000000000104e8	68		    return new_ptr;
=> 0x104e8 <malloc_beebs+116>:	j	0x104ec <malloc_beebs+120>
70	}
=> 0x104ec <malloc_beebs+120>:	ld	a0,-24(s0)
0x00000000000104f0	70	}
=> 0x104f0 <malloc_beebs+124>:	ld	s0,32(sp)
0x00000000000104f4 in malloc_beebs (size=433791695536) at ctl.c:70
70	}
=> 0x104f4 <malloc_beebs+128>:	ld	ra,40(sp)
0x00000000000104f8	70	}
=> 0x104f8 <malloc_beebs+132>:	addi	sp,sp,48
0x00000000000104fc	70	}
=> 0x104fc <malloc_beebs+136>:	ld	ra,0(t6)
0x0000000000010500	70	}
=> 0x10500 <malloc_beebs+140>:	addi	t6,t6,16
0x0000000000010504	70	}
=> 0x10504 <malloc_beebs+144>:	ret
0x00000000000108d8 in ctl_pairStackInitSize (BlockSize=100) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x108d8 <ctl_pairStackInitSize+104>:	ld	a1,-40(s0)
0x00000000000108dc	103	MAKE_STACK(pair)
=> 0x108dc <ctl_pairStackInitSize+108>:	sd	a0,0(a1)
0x00000000000108e0	103	MAKE_STACK(pair)
=> 0x108e0 <ctl_pairStackInitSize+112>:	ld	a0,-40(s0)
0x00000000000108e4	103	MAKE_STACK(pair)
=> 0x108e4 <ctl_pairStackInitSize+116>:	ld	a0,0(a0)
0x00000000000108e8	103	MAKE_STACK(pair)
=> 0x108e8 <ctl_pairStackInitSize+120>:	li	a1,0
0x00000000000108ec	103	MAKE_STACK(pair)
=> 0x108ec <ctl_pairStackInitSize+124>:	bne	a0,a1,0x10900 <ctl_pairStackInitSize+144>
0x0000000000010900	103	MAKE_STACK(pair)
=> 0x10900 <ctl_pairStackInitSize+144>:	ld	a0,-40(s0)
0x0000000000010904	103	MAKE_STACK(pair)
=> 0x10904 <ctl_pairStackInitSize+148>:	li	a1,0
0x0000000000010908	103	MAKE_STACK(pair)
=> 0x10908 <ctl_pairStackInitSize+152>:	sd	a1,16(a0)
0x000000000001090c	103	MAKE_STACK(pair)
=> 0x1090c <ctl_pairStackInitSize+156>:	ld	a0,-40(s0)
0x0000000000010910	103	MAKE_STACK(pair)
=> 0x10910 <ctl_pairStackInitSize+160>:	sd	a1,8(a0)
0x0000000000010914	103	MAKE_STACK(pair)
=> 0x10914 <ctl_pairStackInitSize+164>:	ld	a0,-40(s0)
0x0000000000010918	103	MAKE_STACK(pair)
=> 0x10918 <ctl_pairStackInitSize+168>:	sd	a0,-24(s0)
0x000000000001091c	103	MAKE_STACK(pair)
=> 0x1091c <ctl_pairStackInitSize+172>:	j	0x10920 <ctl_pairStackInitSize+176>
0x0000000000010920	103	MAKE_STACK(pair)
=> 0x10920 <ctl_pairStackInitSize+176>:	ld	a0,-24(s0)
0x0000000000010924	103	MAKE_STACK(pair)
=> 0x10924 <ctl_pairStackInitSize+180>:	ld	s0,32(sp)
0x0000000000010928 in ctl_pairStackInitSize (BlockSize=63) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10928 <ctl_pairStackInitSize+184>:	ld	ra,40(sp)
0x000000000001092c	103	MAKE_STACK(pair)
=> 0x1092c <ctl_pairStackInitSize+188>:	addi	sp,sp,48
0x0000000000010930	103	MAKE_STACK(pair)
=> 0x10930 <ctl_pairStackInitSize+192>:	ld	ra,0(t6)
0x0000000000010934	103	MAKE_STACK(pair)
=> 0x10934 <ctl_pairStackInitSize+196>:	addi	t6,t6,16
0x0000000000010938	103	MAKE_STACK(pair)
=> 0x10938 <ctl_pairStackInitSize+200>:	ret
0x0000000000010960 in ctl_pairStackInit () at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10960 <ctl_pairStackInit+36>:	ld	s0,0(sp)
0x0000000000010964 in ctl_pairStackInit () at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10964 <ctl_pairStackInit+40>:	ld	ra,8(sp)
0x0000000000010968	103	MAKE_STACK(pair)
=> 0x10968 <ctl_pairStackInit+44>:	addi	sp,sp,16
0x000000000001096c	103	MAKE_STACK(pair)
=> 0x1096c <ctl_pairStackInit+48>:	ld	ra,0(t6)
0x0000000000010970	103	MAKE_STACK(pair)
=> 0x10970 <ctl_pairStackInit+52>:	addi	t6,t6,16
0x0000000000010974	103	MAKE_STACK(pair)
=> 0x10974 <ctl_pairStackInit+56>:	ret
0x0000000000010d3c in benchmark () at ctl.c:155
155	  v2 = CTL_INIT (pair);
=> 0x10d3c <benchmark+188>:	sd	a0,-32(s0)
157	  for (i = init; i <= lim; ++i)
=> 0x10d40 <benchmark+192>:	lw	a0,-1948(gp)
0x0000000000010d44	157	  for (i = init; i <= lim; ++i)
=> 0x10d44 <benchmark+196>:	sw	a0,-40(s0)
0x0000000000010d48	157	  for (i = init; i <= lim; ++i)
=> 0x10d48 <benchmark+200>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b14	103	MAKE_STACK(pair)
=> 0x10b14 <ctl_pairStackPush+120>:	j	0x10b18 <ctl_pairStackPush+124>
0x0000000000010b18	103	MAKE_STACK(pair)
=> 0x10b18 <ctl_pairStackPush+124>:	ld	a0,-32(s0)
0x0000000000010b1c	103	MAKE_STACK(pair)
=> 0x10b1c <ctl_pairStackPush+128>:	li	a1,0
0x0000000000010b20	103	MAKE_STACK(pair)
=> 0x10b20 <ctl_pairStackPush+132>:	sd	a1,16(a0)
0x0000000000010b24	103	MAKE_STACK(pair)
=> 0x10b24 <ctl_pairStackPush+136>:	j	0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
0x0000000000010d58	157	  for (i = init; i <= lim; ++i)
=> 0x10d58 <benchmark+216>:	j	0x10d5c <benchmark+220>
159	    pair p = {i, i*i};
=> 0x10d5c <benchmark+220>:	lw	a0,-40(s0)
0x0000000000010d60	159	    pair p = {i, i*i};
=> 0x10d60 <benchmark+224>:	sw	a0,-56(s0)
0x0000000000010d64	159	    pair p = {i, i*i};
=> 0x10d64 <benchmark+228>:	lw	a0,-40(s0)
0x0000000000010d68	159	    pair p = {i, i*i};
=> 0x10d68 <benchmark+232>:	mul	a0,a0,a0
0x0000000000010d6c	159	    pair p = {i, i*i};
=> 0x10d6c <benchmark+236>:	sw	a0,-52(s0)
160	    CTL_PUSH (pair, v2, p);
=> 0x10d70 <benchmark+240>:	ld	a0,-32(s0)
0x0000000000010d74	160	    CTL_PUSH (pair, v2, p);
=> 0x10d74 <benchmark+244>:	lwu	a1,-52(s0)
0x0000000000010d78	160	    CTL_PUSH (pair, v2, p);
=> 0x10d78 <benchmark+248>:	slli	a1,a1,0x20
0x0000000000010d7c	160	    CTL_PUSH (pair, v2, p);
=> 0x10d7c <benchmark+252>:	lwu	a2,-56(s0)
0x0000000000010d80	160	    CTL_PUSH (pair, v2, p);
=> 0x10d80 <benchmark+256>:	or	a1,a1,a2
0x0000000000010d84	160	    CTL_PUSH (pair, v2, p);
=> 0x10d84 <benchmark+260>:	jal	ra,0x10a9c <ctl_pairStackPush>
ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a9c <ctl_pairStackPush>:	addi	t6,t6,-16
0x0000000000010aa0	103	MAKE_STACK(pair)
=> 0x10aa0 <ctl_pairStackPush+4>:	sd	ra,0(t6)
0x0000000000010aa4	103	MAKE_STACK(pair)
=> 0x10aa4 <ctl_pairStackPush+8>:	st	zero,0(t6)
0x0000000000010aa8	103	MAKE_STACK(pair)
=> 0x10aa8 <ctl_pairStackPush+12>:	addi	sp,sp,-32
0x0000000000010aac	103	MAKE_STACK(pair)
=> 0x10aac <ctl_pairStackPush+16>:	sd	ra,24(sp)
0x0000000000010ab0	103	MAKE_STACK(pair)
=> 0x10ab0 <ctl_pairStackPush+20>:	sd	s0,16(sp)
0x0000000000010ab4	103	MAKE_STACK(pair)
=> 0x10ab4 <ctl_pairStackPush+24>:	addi	s0,sp,32
0x0000000000010ab8	103	MAKE_STACK(pair)
=> 0x10ab8 <ctl_pairStackPush+28>:	sw	a1,-24(s0)
0x0000000000010abc	103	MAKE_STACK(pair)
=> 0x10abc <ctl_pairStackPush+32>:	srli	a1,a1,0x20
0x0000000000010ac0	103	MAKE_STACK(pair)
=> 0x10ac0 <ctl_pairStackPush+36>:	sw	a1,-20(s0)
0x0000000000010ac4	103	MAKE_STACK(pair)
=> 0x10ac4 <ctl_pairStackPush+40>:	sd	a0,-32(s0)
103	MAKE_STACK(pair)
=> 0x10ac8 <ctl_pairStackPush+44>:	ld	a0,-32(s0)
0x0000000000010acc	103	MAKE_STACK(pair)
=> 0x10acc <ctl_pairStackPush+48>:	ld	a1,8(a0)
0x0000000000010ad0	103	MAKE_STACK(pair)
=> 0x10ad0 <ctl_pairStackPush+52>:	addi	a1,a1,1
0x0000000000010ad4	103	MAKE_STACK(pair)
=> 0x10ad4 <ctl_pairStackPush+56>:	sd	a1,8(a0)
0x0000000000010ad8	103	MAKE_STACK(pair)
=> 0x10ad8 <ctl_pairStackPush+60>:	ld	a0,-32(s0)
0x0000000000010adc	103	MAKE_STACK(pair)
=> 0x10adc <ctl_pairStackPush+64>:	ld	a0,24(a0)
0x0000000000010ae0	103	MAKE_STACK(pair)
=> 0x10ae0 <ctl_pairStackPush+68>:	bgeu	a0,a1,0x10af8 <ctl_pairStackPush+92>
0x0000000000010af8	103	MAKE_STACK(pair)
=> 0x10af8 <ctl_pairStackPush+92>:	ld	a0,-32(s0)
0x0000000000010afc	103	MAKE_STACK(pair)
=> 0x10afc <ctl_pairStackPush+96>:	ld	a1,16(a0)
0x0000000000010b00	103	MAKE_STACK(pair)
=> 0x10b00 <ctl_pairStackPush+100>:	addi	a1,a1,1
0x0000000000010b04	103	MAKE_STACK(pair)
=> 0x10b04 <ctl_pairStackPush+104>:	sd	a1,16(a0)
0x0000000000010b08	103	MAKE_STACK(pair)
=> 0x10b08 <ctl_pairStackPush+108>:	ld	a0,-32(s0)
0x0000000000010b0c	103	MAKE_STACK(pair)
=> 0x10b0c <ctl_pairStackPush+112>:	ld	a0,8(a0)
0x0000000000010b10	103	MAKE_STACK(pair)
=> 0x10b10 <ctl_pairStackPush+116>:	bne	a1,a0,0x10b28 <ctl_pairStackPush+140>
0x0000000000010b28	103	MAKE_STACK(pair)
=> 0x10b28 <ctl_pairStackPush+140>:	ld	a0,-32(s0)
0x0000000000010b2c	103	MAKE_STACK(pair)
=> 0x10b2c <ctl_pairStackPush+144>:	ld	a1,0(a0)
0x0000000000010b30	103	MAKE_STACK(pair)
=> 0x10b30 <ctl_pairStackPush+148>:	ld	a0,16(a0)
0x0000000000010b34	103	MAKE_STACK(pair)
=> 0x10b34 <ctl_pairStackPush+152>:	slli	a0,a0,0x3
0x0000000000010b38	103	MAKE_STACK(pair)
=> 0x10b38 <ctl_pairStackPush+156>:	add	a0,a1,a0
0x0000000000010b3c	103	MAKE_STACK(pair)
=> 0x10b3c <ctl_pairStackPush+160>:	lw	a1,-20(s0)
0x0000000000010b40	103	MAKE_STACK(pair)
=> 0x10b40 <ctl_pairStackPush+164>:	sw	a1,4(a0)
0x0000000000010b44	103	MAKE_STACK(pair)
=> 0x10b44 <ctl_pairStackPush+168>:	lw	a1,-24(s0)
0x0000000000010b48	103	MAKE_STACK(pair)
=> 0x10b48 <ctl_pairStackPush+172>:	sw	a1,0(a0)
0x0000000000010b4c	103	MAKE_STACK(pair)
=> 0x10b4c <ctl_pairStackPush+176>:	li	a0,0
0x0000000000010b50	103	MAKE_STACK(pair)
=> 0x10b50 <ctl_pairStackPush+180>:	ld	s0,16(sp)
0x0000000000010b54 in ctl_pairStackPush (s=0x20488 <heap+432>, value=...) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b54 <ctl_pairStackPush+184>:	ld	ra,24(sp)
0x0000000000010b58	103	MAKE_STACK(pair)
=> 0x10b58 <ctl_pairStackPush+188>:	addi	sp,sp,32
0x0000000000010b5c	103	MAKE_STACK(pair)
=> 0x10b5c <ctl_pairStackPush+192>:	ld	ra,0(t6)
0x0000000000010b60	103	MAKE_STACK(pair)
=> 0x10b60 <ctl_pairStackPush+196>:	addi	t6,t6,16
0x0000000000010b64	103	MAKE_STACK(pair)
=> 0x10b64 <ctl_pairStackPush+200>:	ret
benchmark () at ctl.c:161
161	  }
=> 0x10d88 <benchmark+264>:	j	0x10d8c <benchmark+268>
157	  for (i = init; i <= lim; ++i)
=> 0x10d8c <benchmark+268>:	lw	a0,-40(s0)
0x0000000000010d90	157	  for (i = init; i <= lim; ++i)
=> 0x10d90 <benchmark+272>:	addi	a0,a0,1
0x0000000000010d94	157	  for (i = init; i <= lim; ++i)
=> 0x10d94 <benchmark+276>:	sw	a0,-40(s0)
0x0000000000010d98	157	  for (i = init; i <= lim; ++i)
=> 0x10d98 <benchmark+280>:	j	0x10d4c <benchmark+204>
0x0000000000010d4c	157	  for (i = init; i <= lim; ++i)
=> 0x10d4c <benchmark+204>:	lw	a0,-40(s0)
0x0000000000010d50	157	  for (i = init; i <= lim; ++i)
=> 0x10d50 <benchmark+208>:	lw	a1,-1944(gp)
0x0000000000010d54	157	  for (i = init; i <= lim; ++i)
=> 0x10d54 <benchmark+212>:	blt	a1,a0,0x10d9c <benchmark+284>
163	  CTL_DELETE (pair, v2, begin, end2);
=> 0x10d9c <benchmark+284>:	j	0x10da0 <benchmark+288>
0x0000000000010da0	163	  CTL_DELETE (pair, v2, begin, end2);
=> 0x10da0 <benchmark+288>:	j	0x10da4 <benchmark+292>
165	  while(v2->size > 0)
=> 0x10da4 <benchmark+292>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xd8fe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xd8fe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x101b3e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x101b3e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1ee97900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1ee97900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x2d460100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x2d460100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x3b332200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x3b332200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x48b32200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x48b32200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x55c84100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x55c84100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x6274b900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x6274b900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x6ebabe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x6ebabe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x7a9c7e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x7a9c7e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x861c2100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x861c2100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x913bc900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x913bc900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x9bfd9200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x9bfd9200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xa6639200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xa6639200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xb06fd900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xb06fd900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xba247100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xba247100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xc3835e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xc3835e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xcc8e9e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xcc8e9e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xd5482900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xd5482900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xddb1f100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xddb1f100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xe5cde200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xe5cde200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xed9de200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xed9de200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xf523d100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xf523d100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0xfc618900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0xfc618900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x10358de00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x10358de00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x10a0b9e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x10a0b9e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1107b9100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1107b9100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x116aa7900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x116aa7900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x11c9a1200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x11c9a1200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1224c1200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1224c1200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x127c22900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x127c22900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x12cfe0100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x12cfe0100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x132013e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x132013e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x136cd7e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x136cd7e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x13b645900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x13b645900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x13fc76100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x13fc76100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x143f82200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x143f82200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x147f82200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x147f82200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x14bc8e100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x14bc8e100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x14f6bd900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x14f6bd900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x152e27e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x152e27e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1562e3e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1562e3e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x159508100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x159508100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x15c4aa900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x15c4aa900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x15f1e1200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x15f1e1200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x161cc1200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x161cc1200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x16455f900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x16455f900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x166bd1100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x166bd1100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x169029e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x169029e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x16b27de00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x16b27de00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x16d2e0900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x16d2e0900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x16f165100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x16f165100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x170e1e200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x170e1e200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17291e200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17291e200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x174277100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x174277100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x175a3a900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x175a3a900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x177079e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x177079e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x178545e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x178545e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1798af100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1798af100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17aac5900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17aac5900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17bb99200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17bb99200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17cb39200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17cb39200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17d9b4900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17d9b4900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17e71a100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17e71a100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17f377e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17f377e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17fedbe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x17fedbe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x180953900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x180953900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1812ec100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1812ec100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x181bb2200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x181bb2200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1823b2200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1823b2200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x182af8100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x182af8100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x18318f900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x18318f900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x183783e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x183783e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x183cdfe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x183cdfe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1841ae100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1841ae100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1845f8900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1845f8900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1849c9200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1849c9200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x184d29200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x184d29200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185021900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185021900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1852bb100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1852bb100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1854fde00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1854fde00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1856f1e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x1856f1e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x18589e900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x18589e900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185a0b100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185a0b100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185b3e200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185b3e200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185c3e200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185c3e200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185d11100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185d11100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185dbc900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185dbc900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185e45e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185e45e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185eb1e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185eb1e00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185f05100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185f05100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185f43900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185f43900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185f71200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185f71200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185f91200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185f91200000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fa6900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fa6900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fb4100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fb4100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fbbe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fbbe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fbfe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fbfe00000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fc1900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c10	103	MAKE_STACK(pair)
=> 0x10c10 <ctl_pairStackPop+168>:	j	0x10c14 <ctl_pairStackPop+172>
0x0000000000010c14	103	MAKE_STACK(pair)
=> 0x10c14 <ctl_pairStackPop+172>:	ld	a0,-32(s0)
0x0000000000010c18	103	MAKE_STACK(pair)
=> 0x10c18 <ctl_pairStackPop+176>:	ld	a0,16(a0)
0x0000000000010c1c	103	MAKE_STACK(pair)
=> 0x10c1c <ctl_pairStackPop+180>:	li	a1,0
0x0000000000010c20	103	MAKE_STACK(pair)
=> 0x10c20 <ctl_pairStackPop+184>:	bne	a0,a1,0x10c44 <ctl_pairStackPop+220>
0x0000000000010c44	103	MAKE_STACK(pair)
=> 0x10c44 <ctl_pairStackPop+220>:	ld	a0,-32(s0)
0x0000000000010c48	103	MAKE_STACK(pair)
=> 0x10c48 <ctl_pairStackPop+224>:	ld	a1,16(a0)
0x0000000000010c4c	103	MAKE_STACK(pair)
=> 0x10c4c <ctl_pairStackPop+228>:	addi	a1,a1,-1
0x0000000000010c50	103	MAKE_STACK(pair)
=> 0x10c50 <ctl_pairStackPop+232>:	sd	a1,16(a0)
0x0000000000010c54	103	MAKE_STACK(pair)
=> 0x10c54 <ctl_pairStackPop+236>:	j	0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fc1900000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
0x0000000000010db8	165	  while(v2->size > 0)
=> 0x10db8 <benchmark+312>:	j	0x10dbc <benchmark+316>
169	    CTL_POP (pair, v2, &k);
=> 0x10dbc <benchmark+316>:	ld	a0,-32(s0)
0x0000000000010dc0	169	    CTL_POP (pair, v2, &k);
=> 0x10dc0 <benchmark+320>:	addi	a1,s0,-64
0x0000000000010dc4	169	    CTL_POP (pair, v2, &k);
=> 0x10dc4 <benchmark+324>:	jal	ra,0x10b68 <ctl_pairStackPop>
ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fc2100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10b68 <ctl_pairStackPop>:	addi	t6,t6,-16
0x0000000000010b6c	103	MAKE_STACK(pair)
=> 0x10b6c <ctl_pairStackPop+4>:	sd	ra,0(t6)
0x0000000000010b70	103	MAKE_STACK(pair)
=> 0x10b70 <ctl_pairStackPop+8>:	st	zero,0(t6)
0x0000000000010b74	103	MAKE_STACK(pair)
=> 0x10b74 <ctl_pairStackPop+12>:	addi	sp,sp,-48
0x0000000000010b78	103	MAKE_STACK(pair)
=> 0x10b78 <ctl_pairStackPop+16>:	sd	ra,40(sp)
0x0000000000010b7c	103	MAKE_STACK(pair)
=> 0x10b7c <ctl_pairStackPop+20>:	sd	s0,32(sp)
0x0000000000010b80	103	MAKE_STACK(pair)
=> 0x10b80 <ctl_pairStackPop+24>:	addi	s0,sp,48
0x0000000000010b84	103	MAKE_STACK(pair)
=> 0x10b84 <ctl_pairStackPop+28>:	sd	a0,-32(s0)
0x0000000000010b88	103	MAKE_STACK(pair)
=> 0x10b88 <ctl_pairStackPop+32>:	sd	a1,-40(s0)
103	MAKE_STACK(pair)
=> 0x10b8c <ctl_pairStackPop+36>:	ld	a0,-32(s0)
0x0000000000010b90	103	MAKE_STACK(pair)
=> 0x10b90 <ctl_pairStackPop+40>:	ld	a0,8(a0)
0x0000000000010b94	103	MAKE_STACK(pair)
=> 0x10b94 <ctl_pairStackPop+44>:	li	a1,0
0x0000000000010b98	103	MAKE_STACK(pair)
=> 0x10b98 <ctl_pairStackPop+48>:	bne	a0,a1,0x10bb4 <ctl_pairStackPop+76>
0x0000000000010bb4	103	MAKE_STACK(pair)
=> 0x10bb4 <ctl_pairStackPop+76>:	ld	a0,-40(s0)
0x0000000000010bb8	103	MAKE_STACK(pair)
=> 0x10bb8 <ctl_pairStackPop+80>:	li	a1,0
0x0000000000010bbc	103	MAKE_STACK(pair)
=> 0x10bbc <ctl_pairStackPop+84>:	beq	a0,a1,0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bc0	103	MAKE_STACK(pair)
=> 0x10bc0 <ctl_pairStackPop+88>:	j	0x10bc4 <ctl_pairStackPop+92>
0x0000000000010bc4	103	MAKE_STACK(pair)
=> 0x10bc4 <ctl_pairStackPop+92>:	ld	a0,-40(s0)
0x0000000000010bc8	103	MAKE_STACK(pair)
=> 0x10bc8 <ctl_pairStackPop+96>:	ld	a1,-32(s0)
0x0000000000010bcc	103	MAKE_STACK(pair)
=> 0x10bcc <ctl_pairStackPop+100>:	ld	a2,0(a1)
0x0000000000010bd0	103	MAKE_STACK(pair)
=> 0x10bd0 <ctl_pairStackPop+104>:	ld	a1,16(a1)
0x0000000000010bd4	103	MAKE_STACK(pair)
=> 0x10bd4 <ctl_pairStackPop+108>:	slli	a1,a1,0x3
0x0000000000010bd8	103	MAKE_STACK(pair)
=> 0x10bd8 <ctl_pairStackPop+112>:	add	a1,a2,a1
0x0000000000010bdc	103	MAKE_STACK(pair)
=> 0x10bdc <ctl_pairStackPop+116>:	lw	a2,4(a1)
0x0000000000010be0	103	MAKE_STACK(pair)
=> 0x10be0 <ctl_pairStackPop+120>:	sw	a2,4(a0)
0x0000000000010be4	103	MAKE_STACK(pair)
=> 0x10be4 <ctl_pairStackPop+124>:	lw	a1,0(a1)
0x0000000000010be8	103	MAKE_STACK(pair)
=> 0x10be8 <ctl_pairStackPop+128>:	sw	a1,0(a0)
0x0000000000010bec	103	MAKE_STACK(pair)
=> 0x10bec <ctl_pairStackPop+132>:	j	0x10bf0 <ctl_pairStackPop+136>
0x0000000000010bf0	103	MAKE_STACK(pair)
=> 0x10bf0 <ctl_pairStackPop+136>:	ld	a0,-32(s0)
0x0000000000010bf4	103	MAKE_STACK(pair)
=> 0x10bf4 <ctl_pairStackPop+140>:	ld	a1,8(a0)
0x0000000000010bf8	103	MAKE_STACK(pair)
=> 0x10bf8 <ctl_pairStackPop+144>:	addi	a1,a1,-1
0x0000000000010bfc	103	MAKE_STACK(pair)
=> 0x10bfc <ctl_pairStackPop+148>:	sd	a1,8(a0)
0x0000000000010c00	103	MAKE_STACK(pair)
=> 0x10c00 <ctl_pairStackPop+152>:	ld	a0,-32(s0)
0x0000000000010c04	103	MAKE_STACK(pair)
=> 0x10c04 <ctl_pairStackPop+156>:	ld	a0,8(a0)
0x0000000000010c08	103	MAKE_STACK(pair)
=> 0x10c08 <ctl_pairStackPop+160>:	li	a1,0
0x0000000000010c0c	103	MAKE_STACK(pair)
=> 0x10c0c <ctl_pairStackPop+164>:	beq	a0,a1,0x10c58 <ctl_pairStackPop+240>
0x0000000000010c58	103	MAKE_STACK(pair)
=> 0x10c58 <ctl_pairStackPop+240>:	li	a0,0
0x0000000000010c5c	103	MAKE_STACK(pair)
=> 0x10c5c <ctl_pairStackPop+244>:	sw	a0,-20(s0)
0x0000000000010c60	103	MAKE_STACK(pair)
=> 0x10c60 <ctl_pairStackPop+248>:	j	0x10c64 <ctl_pairStackPop+252>
0x0000000000010c64	103	MAKE_STACK(pair)
=> 0x10c64 <ctl_pairStackPop+252>:	lw	a0,-20(s0)
0x0000000000010c68	103	MAKE_STACK(pair)
=> 0x10c68 <ctl_pairStackPop+256>:	ld	s0,32(sp)
0x0000000000010c6c in ctl_pairStackPop (s=0x20488 <heap+432>, value=0x185fc2100000065) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10c6c <ctl_pairStackPop+260>:	ld	ra,40(sp)
0x0000000000010c70	103	MAKE_STACK(pair)
=> 0x10c70 <ctl_pairStackPop+264>:	addi	sp,sp,48
0x0000000000010c74	103	MAKE_STACK(pair)
=> 0x10c74 <ctl_pairStackPop+268>:	ld	ra,0(t6)
0x0000000000010c78	103	MAKE_STACK(pair)
=> 0x10c78 <ctl_pairStackPop+272>:	addi	t6,t6,16
0x0000000000010c7c	103	MAKE_STACK(pair)
=> 0x10c7c <ctl_pairStackPop+276>:	ret
benchmark () at ctl.c:171
171	    cnt += k.a*k.b;
=> 0x10dc8 <benchmark+328>:	lw	a1,-64(s0)
0x0000000000010dcc	171	    cnt += k.a*k.b;
=> 0x10dcc <benchmark+332>:	lw	a2,-60(s0)
0x0000000000010dd0	171	    cnt += k.a*k.b;
=> 0x10dd0 <benchmark+336>:	mul	a1,a1,a2
0x0000000000010dd4	171	    cnt += k.a*k.b;
=> 0x10dd4 <benchmark+340>:	lw	a2,-36(s0)
0x0000000000010dd8	171	    cnt += k.a*k.b;
=> 0x10dd8 <benchmark+344>:	add	a1,a2,a1
0x0000000000010ddc	171	    cnt += k.a*k.b;
=> 0x10ddc <benchmark+348>:	sw	a1,-36(s0)
165	  while(v2->size > 0)
=> 0x10de0 <benchmark+352>:	j	0x10da8 <benchmark+296>
0x0000000000010da8	165	  while(v2->size > 0)
=> 0x10da8 <benchmark+296>:	ld	a0,-32(s0)
0x0000000000010dac	165	  while(v2->size > 0)
=> 0x10dac <benchmark+300>:	ld	a0,8(a0)
0x0000000000010db0	165	  while(v2->size > 0)
=> 0x10db0 <benchmark+304>:	li	a1,0
0x0000000000010db4	165	  while(v2->size > 0)
=> 0x10db4 <benchmark+308>:	beq	a0,a1,0x10de4 <benchmark+356>
174	  CTL_FREE (pair, v2);
=> 0x10de4 <benchmark+356>:	ld	a0,-32(s0)
0x0000000000010de8	174	  CTL_FREE (pair, v2);
=> 0x10de8 <benchmark+360>:	jal	ra,0x10a50 <ctl_pairStackFree>
ctl_pairStackFree (s=0x202d8 <heap>) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a50 <ctl_pairStackFree>:	addi	t6,t6,-16
0x0000000000010a54	103	MAKE_STACK(pair)
=> 0x10a54 <ctl_pairStackFree+4>:	sd	ra,0(t6)
0x0000000000010a58	103	MAKE_STACK(pair)
=> 0x10a58 <ctl_pairStackFree+8>:	st	zero,0(t6)
0x0000000000010a5c	103	MAKE_STACK(pair)
=> 0x10a5c <ctl_pairStackFree+12>:	addi	sp,sp,-32
0x0000000000010a60	103	MAKE_STACK(pair)
=> 0x10a60 <ctl_pairStackFree+16>:	sd	ra,24(sp)
0x0000000000010a64	103	MAKE_STACK(pair)
=> 0x10a64 <ctl_pairStackFree+20>:	sd	s0,16(sp)
0x0000000000010a68	103	MAKE_STACK(pair)
=> 0x10a68 <ctl_pairStackFree+24>:	addi	s0,sp,32
0x0000000000010a6c	103	MAKE_STACK(pair)
=> 0x10a6c <ctl_pairStackFree+28>:	sd	a0,-24(s0)
103	MAKE_STACK(pair)
=> 0x10a70 <ctl_pairStackFree+32>:	ld	a0,-24(s0)
0x0000000000010a74	103	MAKE_STACK(pair)
=> 0x10a74 <ctl_pairStackFree+36>:	ld	a0,0(a0)
0x0000000000010a78	103	MAKE_STACK(pair)
=> 0x10a78 <ctl_pairStackFree+40>:	jal	ra,0x10668 <free_beebs>
free_beebs (ptr=0x20488 <heap+432>) at ctl.c:78
78	{
=> 0x10668 <free_beebs>:	addi	t6,t6,-16
0x000000000001066c	78	{
=> 0x1066c <free_beebs+4>:	sd	ra,0(t6)
0x0000000000010670	78	{
=> 0x10670 <free_beebs+8>:	st	zero,0(t6)
0x0000000000010674	78	{
=> 0x10674 <free_beebs+12>:	addi	sp,sp,-32
0x0000000000010678	78	{
=> 0x10678 <free_beebs+16>:	sd	ra,24(sp)
0x000000000001067c	78	{
=> 0x1067c <free_beebs+20>:	sd	s0,16(sp)
0x0000000000010680	78	{
=> 0x10680 <free_beebs+24>:	addi	s0,sp,32
0x0000000000010684	78	{
=> 0x10684 <free_beebs+28>:	sd	a0,-24(s0)
79	}
=> 0x10688 <free_beebs+32>:	ld	s0,16(sp)
0x000000000001068c in free_beebs (ptr=0x20488 <heap+432>) at ctl.c:79
79	}
=> 0x1068c <free_beebs+36>:	ld	ra,24(sp)
0x0000000000010690	79	}
=> 0x10690 <free_beebs+40>:	addi	sp,sp,32
0x0000000000010694	79	}
=> 0x10694 <free_beebs+44>:	ld	ra,0(t6)
0x0000000000010698	79	}
=> 0x10698 <free_beebs+48>:	addi	t6,t6,16
0x000000000001069c	79	}
=> 0x1069c <free_beebs+52>:	ret
0x0000000000010a7c in ctl_pairStackFree (s=0x20488 <heap+432>) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a7c <ctl_pairStackFree+44>:	ld	a0,-24(s0)
0x0000000000010a80	103	MAKE_STACK(pair)
=> 0x10a80 <ctl_pairStackFree+48>:	jal	ra,0x10668 <free_beebs>
free_beebs (ptr=0x20488 <heap+432>) at ctl.c:78
78	{
=> 0x10668 <free_beebs>:	addi	t6,t6,-16
0x000000000001066c	78	{
=> 0x1066c <free_beebs+4>:	sd	ra,0(t6)
0x0000000000010670	78	{
=> 0x10670 <free_beebs+8>:	st	zero,0(t6)
0x0000000000010674	78	{
=> 0x10674 <free_beebs+12>:	addi	sp,sp,-32
0x0000000000010678	78	{
=> 0x10678 <free_beebs+16>:	sd	ra,24(sp)
0x000000000001067c	78	{
=> 0x1067c <free_beebs+20>:	sd	s0,16(sp)
0x0000000000010680	78	{
=> 0x10680 <free_beebs+24>:	addi	s0,sp,32
0x0000000000010684	78	{
=> 0x10684 <free_beebs+28>:	sd	a0,-24(s0)
79	}
=> 0x10688 <free_beebs+32>:	ld	s0,16(sp)
0x000000000001068c in free_beebs (ptr=0x20488 <heap+432>) at ctl.c:79
79	}
=> 0x1068c <free_beebs+36>:	ld	ra,24(sp)
0x0000000000010690	79	}
=> 0x10690 <free_beebs+40>:	addi	sp,sp,32
0x0000000000010694	79	}
=> 0x10694 <free_beebs+44>:	ld	ra,0(t6)
0x0000000000010698	79	}
=> 0x10698 <free_beebs+48>:	addi	t6,t6,16
0x000000000001069c	79	}
=> 0x1069c <free_beebs+52>:	ret
0x0000000000010a84 in ctl_pairStackFree (s=0x20488 <heap+432>) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a84 <ctl_pairStackFree+52>:	ld	s0,16(sp)
0x0000000000010a88 in ctl_pairStackFree (s=0x202d8 <heap>) at ctl.c:103
103	MAKE_STACK(pair)
=> 0x10a88 <ctl_pairStackFree+56>:	ld	ra,24(sp)
0x0000000000010a8c	103	MAKE_STACK(pair)
=> 0x10a8c <ctl_pairStackFree+60>:	addi	sp,sp,32
0x0000000000010a90	103	MAKE_STACK(pair)
=> 0x10a90 <ctl_pairStackFree+64>:	ld	ra,0(t6)
0x0000000000010a94	103	MAKE_STACK(pair)
=> 0x10a94 <ctl_pairStackFree+68>:	addi	t6,t6,16
0x0000000000010a98	103	MAKE_STACK(pair)
=> 0x10a98 <ctl_pairStackFree+72>:	ret
benchmark () at ctl.c:176
176	  return cnt;
=> 0x10dec <benchmark+364>:	lw	a0,-36(s0)
0x0000000000010df0	176	  return cnt;
=> 0x10df0 <benchmark+368>:	ld	s0,48(sp)
0x0000000000010df4 in benchmark () at ctl.c:176
176	  return cnt;
=> 0x10df4 <benchmark+372>:	ld	ra,56(sp)
0x0000000000010df8	176	  return cnt;
=> 0x10df8 <benchmark+376>:	addi	sp,sp,64
0x0000000000010dfc	176	  return cnt;
=> 0x10dfc <benchmark+380>:	ld	ra,0(t6)
0x0000000000010e00	176	  return cnt;
=> 0x10e00 <benchmark+384>:	addi	t6,t6,16
0x0000000000010e04	176	  return cnt;
=> 0x10e04 <benchmark+388>:	ret
0x0000000000010248 in main (argc=1, argv=0x3ffffffb78) at main.c:57
57	      result = benchmark ();
=> 0x10248 <main+184>:	sw	a0,-40(s0)
58	    }
=> 0x1024c <main+188>:	j	0x10250 <main+192>
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10250 <main+192>:	lw	a0,-36(s0)
0x0000000000010254	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10254 <main+196>:	addi	a0,a0,1
0x0000000000010258	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10258 <main+200>:	sw	a0,-36(s0)
0x000000000001025c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1025c <main+204>:	j	0x1022c <main+156>
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+156>:	lw	a0,-36(s0)
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+160>:	li	a1,0
0x0000000000010234	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10234 <main+164>:	blt	a1,a0,0x10260 <main+208>
60	  stop_trigger ();
=> 0x10260 <main+208>:	jal	ra,0x102f8 <stop_trigger>
stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:40
40	{
=> 0x102f8 <stop_trigger>:	addi	t6,t6,-16
0x00000000000102fc	40	{
=> 0x102fc <stop_trigger+4>:	sd	ra,0(t6)
0x0000000000010300	40	{
=> 0x10300 <stop_trigger+8>:	st	zero,0(t6)
0x0000000000010304	40	{
=> 0x10304 <stop_trigger+12>:	addi	sp,sp,-16
47	}
=> 0x10308 <stop_trigger+16>:	sd	ra,8(sp)
0x000000000001030c	47	}
=> 0x1030c <stop_trigger+20>:	sd	s0,0(sp)
0x0000000000010310	47	}
=> 0x10310 <stop_trigger+24>:	addi	s0,sp,16
0x0000000000010314	47	}
=> 0x10314 <stop_trigger+28>:	ld	s0,0(sp)
0x0000000000010318 in stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:47
47	}
=> 0x10318 <stop_trigger+32>:	ld	ra,8(sp)
0x000000000001031c	47	}
=> 0x1031c <stop_trigger+36>:	addi	sp,sp,16
0x0000000000010320	47	}
=> 0x10320 <stop_trigger+40>:	ld	ra,0(t6)
0x0000000000010324	47	}
=> 0x10324 <stop_trigger+44>:	addi	t6,t6,16
0x0000000000010328	47	}
=> 0x10328 <stop_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x10264 <main+212>:	lw	a0,-40(s0)
0x0000000000010268	64	  correct = verify_benchmark (result);
=> 0x10268 <main+216>:	jal	ra,0x10e70 <verify_benchmark>
verify_benchmark (r=1) at ctl.c:190
190	{
=> 0x10e70 <verify_benchmark>:	addi	t6,t6,-16
0x0000000000010e74	190	{
=> 0x10e74 <verify_benchmark+4>:	sd	ra,0(t6)
0x0000000000010e78	190	{
=> 0x10e78 <verify_benchmark+8>:	st	zero,0(t6)
0x0000000000010e7c	190	{
=> 0x10e7c <verify_benchmark+12>:	addi	sp,sp,-32
0x0000000000010e80	190	{
=> 0x10e80 <verify_benchmark+16>:	sd	ra,24(sp)
0x0000000000010e84	190	{
=> 0x10e84 <verify_benchmark+20>:	sd	s0,16(sp)
0x0000000000010e88	190	{
=> 0x10e88 <verify_benchmark+24>:	addi	s0,sp,32
0x0000000000010e8c	190	{
=> 0x10e8c <verify_benchmark+28>:	mv	a1,a0
0x0000000000010e90	190	{
=> 0x10e90 <verify_benchmark+32>:	sw	a0,-24(s0)
0x0000000000010e94	190	{
=> 0x10e94 <verify_benchmark+36>:	lui	a0,0x1860
0x0000000000010e98	190	{
=> 0x10e98 <verify_benchmark+40>:	addiw	a0,a0,-990
194	  int expected = 25558050;
=> 0x10e9c <verify_benchmark+44>:	sw	a0,-28(s0)
198	  if (r != expected)
=> 0x10ea0 <verify_benchmark+48>:	lw	a0,-24(s0)
0x0000000000010ea4	198	  if (r != expected)
=> 0x10ea4 <verify_benchmark+52>:	lw	a2,-28(s0)
0x0000000000010ea8	198	  if (r != expected)
=> 0x10ea8 <verify_benchmark+56>:	beq	a0,a2,0x10ebc <verify_benchmark+76>
0x0000000000010ebc	199	    return 0;
=> 0x10ebc <verify_benchmark+76>:	li	a0,1
200	  return 1;
=> 0x10ec0 <verify_benchmark+80>:	sw	a0,-20(s0)
0x0000000000010ec4	200	  return 1;
=> 0x10ec4 <verify_benchmark+84>:	j	0x10ec8 <verify_benchmark+88>
201	}
=> 0x10ec8 <verify_benchmark+88>:	lw	a0,-20(s0)
0x0000000000010ecc	201	}
=> 0x10ecc <verify_benchmark+92>:	ld	s0,16(sp)
0x0000000000010ed0 in verify_benchmark (r=1) at ctl.c:201
201	}
=> 0x10ed0 <verify_benchmark+96>:	ld	ra,24(sp)
0x0000000000010ed4	201	}
=> 0x10ed4 <verify_benchmark+100>:	addi	sp,sp,32
0x0000000000010ed8	201	}
=> 0x10ed8 <verify_benchmark+104>:	ld	ra,0(t6)
0x0000000000010edc	201	}
=> 0x10edc <verify_benchmark+108>:	addi	t6,t6,16
0x0000000000010ee0	201	}
=> 0x10ee0 <verify_benchmark+112>:	ret
0x000000000001026c in main (argc=1, argv=0x3ffffffb78) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x1026c <main+220>:	sw	a0,-44(s0)
66	  free(a);
=> 0x10270 <main+224>:	ld	a0,-56(s0)
0x0000000000010274	66	  free(a);
=> 0x10274 <main+228>:	jal	ra,0x10fcc <free>
0x0000000000010fcc in free ()
=> 0x10fcc <free>:	mv	a1,a0
0x0000000000010fce in free ()
=> 0x10fce <free+2>:	ld	a0,-1984(gp)
0x0000000000010fd2 in free ()
=> 0x10fd2 <free+6>:	j	0x13ab0 <_free_r>
0x0000000000013ab0 in _free_r ()
=> 0x13ab0 <_free_r>:	beqz	a1,0x13ba0 <_free_r+240>
0x0000000000013ab2 in _free_r ()
=> 0x13ab2 <_free_r+2>:	addi	sp,sp,-32
0x0000000000013ab4 in _free_r ()
=> 0x13ab4 <_free_r+4>:	sd	s0,16(sp)
0x0000000000013ab6 in _free_r ()
=> 0x13ab6 <_free_r+6>:	sd	s1,8(sp)
0x0000000000013ab8 in _free_r ()
=> 0x13ab8 <_free_r+8>:	mv	s0,a1
0x0000000000013aba in _free_r ()
=> 0x13aba <_free_r+10>:	mv	s1,a0
0x0000000000013abc in _free_r ()
=> 0x13abc <_free_r+12>:	sd	ra,24(sp)
0x0000000000013abe in _free_r ()
=> 0x13abe <_free_r+14>:	jal	ra,0x116aa <__malloc_lock>
0x00000000000116aa in __malloc_lock ()
=> 0x116aa <__malloc_lock>:	ret
0x0000000000013ac2 in _free_r ()
=> 0x13ac2 <_free_r+18>:	ld	a0,-8(s0)
0x0000000000013ac6 in _free_r ()
=> 0x13ac6 <_free_r+22>:	addi	a4,s0,-16
0x0000000000013aca in _free_r ()
=> 0x13aca <_free_r+26>:	lui	a1,0x20
0x0000000000013ace in _free_r ()
=> 0x13ace <_free_r+30>:	andi	a5,a0,-2
0x0000000000013ad2 in _free_r ()
=> 0x13ad2 <_free_r+34>:	add	a2,a4,a5
0x0000000000013ad6 in _free_r ()
=> 0x13ad6 <_free_r+38>:	addi	a1,a1,-2008
0x0000000000013ada in _free_r ()
=> 0x13ada <_free_r+42>:	ld	a3,8(a2)
0x0000000000013adc in _free_r ()
=> 0x13adc <_free_r+44>:	ld	a6,16(a1)
0x0000000000013ae0 in _free_r ()
=> 0x13ae0 <_free_r+48>:	andi	a3,a3,-4
0x0000000000013ae2 in _free_r ()
=> 0x13ae2 <_free_r+50>:	beq	a6,a2,0x13c26 <_free_r+374>
0x0000000000013ae6 in _free_r ()
=> 0x13ae6 <_free_r+54>:	sd	a3,8(a2)
0x0000000000013ae8 in _free_r ()
=> 0x13ae8 <_free_r+56>:	andi	a0,a0,1
0x0000000000013aea in _free_r ()
=> 0x13aea <_free_r+58>:	add	a6,a2,a3
0x0000000000013aee in _free_r ()
=> 0x13aee <_free_r+62>:	bnez	a0,0x13b70 <_free_r+192>
0x0000000000013b70 in _free_r ()
=> 0x13b70 <_free_r+192>:	ld	a0,8(a6)
0x0000000000013b74 in _free_r ()
=> 0x13b74 <_free_r+196>:	andi	a0,a0,1
0x0000000000013b76 in _free_r ()
=> 0x13b76 <_free_r+198>:	bnez	a0,0x13ba2 <_free_r+242>
0x0000000000013ba2 in _free_r ()
=> 0x13ba2 <_free_r+242>:	ori	a3,a5,1
0x0000000000013ba6 in _free_r ()
=> 0x13ba6 <_free_r+246>:	sd	a3,-8(s0)
0x0000000000013baa in _free_r ()
=> 0x13baa <_free_r+250>:	sd	a5,0(a2)
0x0000000000013bac in _free_r ()
=> 0x13bac <_free_r+252>:	li	a3,511
0x0000000000013bb0 in _free_r ()
=> 0x13bb0 <_free_r+256>:	bgeu	a3,a5,0x13b32 <_free_r+130>
0x0000000000013bb4 in _free_r ()
=> 0x13bb4 <_free_r+260>:	srli	a3,a5,0x9
0x0000000000013bb8 in _free_r ()
=> 0x13bb8 <_free_r+264>:	li	a2,4
0x0000000000013bba in _free_r ()
=> 0x13bba <_free_r+266>:	bltu	a2,a3,0x13c58 <_free_r+424>
0x0000000000013c58 in _free_r ()
=> 0x13c58 <_free_r+424>:	li	a2,20
0x0000000000013c5a in _free_r ()
=> 0x13c5a <_free_r+426>:	bgeu	a2,a3,0x13c7e <_free_r+462>
0x0000000000013c5e in _free_r ()
=> 0x13c5e <_free_r+430>:	li	a2,84
0x0000000000013c62 in _free_r ()
=> 0x13c62 <_free_r+434>:	bltu	a2,a3,0x13cb6 <_free_r+518>
0x0000000000013cb6 in _free_r ()
=> 0x13cb6 <_free_r+518>:	li	a2,340
0x0000000000013cba in _free_r ()
=> 0x13cba <_free_r+522>:	bltu	a2,a3,0x13cd2 <_free_r+546>
0x0000000000013cd2 in _free_r ()
=> 0x13cd2 <_free_r+546>:	li	a2,1364
0x0000000000013cd6 in _free_r ()
=> 0x13cd6 <_free_r+550>:	bltu	a2,a3,0x13cee <_free_r+574>
0x0000000000013cee in _free_r ()
=> 0x13cee <_free_r+574>:	li	a0,2032
0x0000000000013cf2 in _free_r ()
=> 0x13cf2 <_free_r+578>:	li	a2,126
0x0000000000013cf6 in _free_r ()
=> 0x13cf6 <_free_r+582>:	j	0x13bd0 <_free_r+288>
0x0000000000013bd0 in _free_r ()
=> 0x13bd0 <_free_r+288>:	add	a0,a0,a1
0x0000000000013bd2 in _free_r ()
=> 0x13bd2 <_free_r+290>:	ld	a3,0(a0)
0x0000000000013bd4 in _free_r ()
=> 0x13bd4 <_free_r+292>:	addi	a0,a0,-16
0x0000000000013bd6 in _free_r ()
=> 0x13bd6 <_free_r+294>:	beq	a0,a3,0x13ca0 <_free_r+496>
0x0000000000013ca0 in _free_r ()
=> 0x13ca0 <_free_r+496>:	ld	a6,8(a1)
0x0000000000013ca4 in _free_r ()
=> 0x13ca4 <_free_r+500>:	sraiw	a2,a2,0x2
0x0000000000013ca8 in _free_r ()
=> 0x13ca8 <_free_r+504>:	li	a5,1
0x0000000000013caa in _free_r ()
=> 0x13caa <_free_r+506>:	sll	a2,a5,a2
0x0000000000013cae in _free_r ()
=> 0x13cae <_free_r+510>:	or	a2,a2,a6
0x0000000000013cb2 in _free_r ()
=> 0x13cb2 <_free_r+514>:	sd	a2,8(a1)
0x0000000000013cb4 in _free_r ()
=> 0x13cb4 <_free_r+516>:	j	0x13bea <_free_r+314>
0x0000000000013bea in _free_r ()
=> 0x13bea <_free_r+314>:	sd	a0,24(a4)
0x0000000000013bec in _free_r ()
=> 0x13bec <_free_r+316>:	sd	a3,16(a4)
0x0000000000013bee in _free_r ()
=> 0x13bee <_free_r+318>:	ld	s0,16(sp)
0x0000000000013bf0 in _free_r ()
=> 0x13bf0 <_free_r+320>:	sd	a4,16(a0)
0x0000000000013bf2 in _free_r ()
=> 0x13bf2 <_free_r+322>:	ld	ra,24(sp)
0x0000000000013bf4 in _free_r ()
=> 0x13bf4 <_free_r+324>:	mv	a0,s1
0x0000000000013bf6 in _free_r ()
=> 0x13bf6 <_free_r+326>:	ld	s1,8(sp)
0x0000000000013bf8 in _free_r ()
=> 0x13bf8 <_free_r+328>:	sd	a4,24(a3)
0x0000000000013bfa in _free_r ()
=> 0x13bfa <_free_r+330>:	addi	sp,sp,32
0x0000000000013bfc in _free_r ()
=> 0x13bfc <_free_r+332>:	j	0x116ac <__malloc_unlock>
0x00000000000116ac in __malloc_unlock ()
=> 0x116ac <__malloc_unlock>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:68
68	  return (!correct);
=> 0x10278 <main+232>:	lw	a0,-44(s0)
0x000000000001027c	68	  return (!correct);
=> 0x1027c <main+236>:	seqz	a0,a0
0x0000000000010280	68	  return (!correct);
=> 0x10280 <main+240>:	ld	s0,112(sp)
0x0000000000010284 in main (argc=<error reading variable: Cannot access memory at address 0x2aaabbdd08>, argv=<error reading variable: Cannot access memory at address 0x2aaabbdd00>) at main.c:68
68	  return (!correct);
=> 0x10284 <main+244>:	ld	ra,120(sp)
0x0000000000010288	68	  return (!correct);
=> 0x10288 <main+248>:	addi	sp,sp,128
0x000000000001028c	68	  return (!correct);
=> 0x1028c <main+252>:	ret
0x000000000001013a in _start ()
=> 0x1013a <_start+64>:	j	0x10f34 <exit>
0x0000000000010f34 in exit ()
=> 0x10f34 <exit>:	addi	sp,sp,-16
0x0000000000010f36 in exit ()
=> 0x10f36 <exit+2>:	li	a1,0
0x0000000000010f38 in exit ()
=> 0x10f38 <exit+4>:	sd	s0,0(sp)
0x0000000000010f3a in exit ()
=> 0x10f3a <exit+6>:	sd	ra,8(sp)
0x0000000000010f3c in exit ()
=> 0x10f3c <exit+8>:	mv	s0,a0
0x0000000000010f3e in exit ()
=> 0x10f3e <exit+10>:	jal	ra,0x1344a <__call_exitprocs>
0x000000000001344a in __call_exitprocs ()
=> 0x1344a <__call_exitprocs>:	addi	sp,sp,-80
0x000000000001344c in __call_exitprocs ()
=> 0x1344c <__call_exitprocs+2>:	sd	s4,32(sp)
0x000000000001344e in __call_exitprocs ()
=> 0x1344e <__call_exitprocs+4>:	ld	s4,-2000(gp)
0x0000000000013452 in __call_exitprocs ()
=> 0x13452 <__call_exitprocs+8>:	sd	s2,48(sp)
0x0000000000013454 in __call_exitprocs ()
=> 0x13454 <__call_exitprocs+10>:	sd	ra,72(sp)
0x0000000000013456 in __call_exitprocs ()
=> 0x13456 <__call_exitprocs+12>:	ld	s2,504(s4)
0x000000000001345a in __call_exitprocs ()
=> 0x1345a <__call_exitprocs+16>:	sd	s0,64(sp)
0x000000000001345c in __call_exitprocs ()
=> 0x1345c <__call_exitprocs+18>:	sd	s1,56(sp)
0x000000000001345e in __call_exitprocs ()
=> 0x1345e <__call_exitprocs+20>:	sd	s3,40(sp)
0x0000000000013460 in __call_exitprocs ()
=> 0x13460 <__call_exitprocs+22>:	sd	s5,24(sp)
0x0000000000013462 in __call_exitprocs ()
=> 0x13462 <__call_exitprocs+24>:	sd	s6,16(sp)
0x0000000000013464 in __call_exitprocs ()
=> 0x13464 <__call_exitprocs+26>:	sd	s7,8(sp)
0x0000000000013466 in __call_exitprocs ()
=> 0x13466 <__call_exitprocs+28>:	sd	s8,0(sp)
0x0000000000013468 in __call_exitprocs ()
=> 0x13468 <__call_exitprocs+30>:	beqz	s2,0x13498 <__call_exitprocs+78>
0x000000000001346c in __call_exitprocs ()
=> 0x1346c <__call_exitprocs+34>:	mv	s6,a0
0x000000000001346e in __call_exitprocs ()
=> 0x1346e <__call_exitprocs+36>:	mv	s7,a1
0x0000000000013470 in __call_exitprocs ()
=> 0x13470 <__call_exitprocs+38>:	li	s5,1
0x0000000000013472 in __call_exitprocs ()
=> 0x13472 <__call_exitprocs+40>:	li	s3,-1
0x0000000000013474 in __call_exitprocs ()
=> 0x13474 <__call_exitprocs+42>:	lw	s1,8(s2)
0x0000000000013478 in __call_exitprocs ()
=> 0x13478 <__call_exitprocs+46>:	addiw	s0,s1,-1
0x000000000001347c in __call_exitprocs ()
=> 0x1347c <__call_exitprocs+50>:	bltz	s0,0x13498 <__call_exitprocs+78>
0x0000000000013480 in __call_exitprocs ()
=> 0x13480 <__call_exitprocs+54>:	slli	s1,s1,0x3
0x0000000000013482 in __call_exitprocs ()
=> 0x13482 <__call_exitprocs+56>:	add	s1,s1,s2
0x0000000000013484 in __call_exitprocs ()
=> 0x13484 <__call_exitprocs+58>:	beqz	s7,0x134b0 <__call_exitprocs+102>
0x00000000000134b0 in __call_exitprocs ()
=> 0x134b0 <__call_exitprocs+102>:	lw	a5,8(s2)
0x00000000000134b4 in __call_exitprocs ()
=> 0x134b4 <__call_exitprocs+106>:	ld	a4,8(s1)
0x00000000000134b6 in __call_exitprocs ()
=> 0x134b6 <__call_exitprocs+108>:	addiw	a5,a5,-1
0x00000000000134b8 in __call_exitprocs ()
=> 0x134b8 <__call_exitprocs+110>:	beq	a5,s0,0x13500 <__call_exitprocs+182>
0x0000000000013500 in __call_exitprocs ()
=> 0x13500 <__call_exitprocs+182>:	sw	s0,8(s2)
0x0000000000013504 in __call_exitprocs ()
=> 0x13504 <__call_exitprocs+186>:	j	0x134c0 <__call_exitprocs+118>
0x00000000000134c0 in __call_exitprocs ()
=> 0x134c0 <__call_exitprocs+118>:	beqz	a4,0x13490 <__call_exitprocs+70>
0x00000000000134c2 in __call_exitprocs ()
=> 0x134c2 <__call_exitprocs+120>:	lw	a5,784(s2)
0x00000000000134c6 in __call_exitprocs ()
=> 0x134c6 <__call_exitprocs+124>:	sllw	a3,s5,s0
0x00000000000134ca in __call_exitprocs ()
=> 0x134ca <__call_exitprocs+128>:	lw	s8,8(s2)
0x00000000000134ce in __call_exitprocs ()
=> 0x134ce <__call_exitprocs+132>:	and	a5,a5,a3
0x00000000000134d0 in __call_exitprocs ()
=> 0x134d0 <__call_exitprocs+134>:	sext.w	a5,a5
0x00000000000134d2 in __call_exitprocs ()
=> 0x134d2 <__call_exitprocs+136>:	bnez	a5,0x134ec <__call_exitprocs+162>
0x00000000000134d4 in __call_exitprocs ()
=> 0x134d4 <__call_exitprocs+138>:	jalr	a4
0x00000000000139a2 in __libc_fini_array ()
=> 0x139a2 <__libc_fini_array>:	addi	sp,sp,-32
0x00000000000139a4 in __libc_fini_array ()
=> 0x139a4 <__libc_fini_array+2>:	sd	s0,16(sp)
0x00000000000139a6 in __libc_fini_array ()
=> 0x139a6 <__libc_fini_array+4>:	lui	a5,0x1f
0x00000000000139aa in __libc_fini_array ()
=> 0x139aa <__libc_fini_array+8>:	lui	s0,0x1f
0x00000000000139ae in __libc_fini_array ()
=> 0x139ae <__libc_fini_array+12>:	addi	s0,s0,216
0x00000000000139b2 in __libc_fini_array ()
=> 0x139b2 <__libc_fini_array+16>:	addi	a5,a5,224
0x00000000000139b6 in __libc_fini_array ()
=> 0x139b6 <__libc_fini_array+20>:	sub	a5,a5,s0
0x00000000000139b8 in __libc_fini_array ()
=> 0x139b8 <__libc_fini_array+22>:	sd	s1,8(sp)
0x00000000000139ba in __libc_fini_array ()
=> 0x139ba <__libc_fini_array+24>:	sd	ra,24(sp)
0x00000000000139bc in __libc_fini_array ()
=> 0x139bc <__libc_fini_array+26>:	srai	s1,a5,0x3
0x00000000000139c0 in __libc_fini_array ()
=> 0x139c0 <__libc_fini_array+30>:	beqz	s1,0x139d0 <__libc_fini_array+46>
0x00000000000139c2 in __libc_fini_array ()
=> 0x139c2 <__libc_fini_array+32>:	addi	a5,a5,-8
0x00000000000139c4 in __libc_fini_array ()
=> 0x139c4 <__libc_fini_array+34>:	add	s0,s0,a5
0x00000000000139c6 in __libc_fini_array ()
=> 0x139c6 <__libc_fini_array+36>:	ld	a5,0(s0)
0x00000000000139c8 in __libc_fini_array ()
=> 0x139c8 <__libc_fini_array+38>:	addi	s1,s1,-1
0x00000000000139ca in __libc_fini_array ()
=> 0x139ca <__libc_fini_array+40>:	addi	s0,s0,-8
0x00000000000139cc in __libc_fini_array ()
=> 0x139cc <__libc_fini_array+42>:	jalr	a5
0x000000000001013e in __do_global_dtors_aux ()
=> 0x1013e <__do_global_dtors_aux>:	lbu	a4,-1856(gp)
0x0000000000010142 in __do_global_dtors_aux ()
=> 0x10142 <__do_global_dtors_aux+4>:	bnez	a4,0x10170 <__do_global_dtors_aux+50>
0x0000000000010144 in __do_global_dtors_aux ()
=> 0x10144 <__do_global_dtors_aux+6>:	addi	sp,sp,-16
0x0000000000010146 in __do_global_dtors_aux ()
=> 0x10146 <__do_global_dtors_aux+8>:	sd	s0,0(sp)
0x0000000000010148 in __do_global_dtors_aux ()
=> 0x10148 <__do_global_dtors_aux+10>:	mv	s0,a5
0x000000000001014a in __do_global_dtors_aux ()
=> 0x1014a <__do_global_dtors_aux+12>:	sd	ra,8(sp)
0x000000000001014c in __do_global_dtors_aux ()
=> 0x1014c <__do_global_dtors_aux+14>:	li	a5,0
0x0000000000010150 in __do_global_dtors_aux ()
=> 0x10150 <__do_global_dtors_aux+18>:	beqz	a5,0x10162 <__do_global_dtors_aux+36>
0x0000000000010162 in __do_global_dtors_aux ()
=> 0x10162 <__do_global_dtors_aux+36>:	li	a5,1
0x0000000000010164 in __do_global_dtors_aux ()
=> 0x10164 <__do_global_dtors_aux+38>:	ld	ra,8(sp)
0x0000000000010166 in __do_global_dtors_aux ()
=> 0x10166 <__do_global_dtors_aux+40>:	sb	a5,-1856(gp)
0x000000000001016a in __do_global_dtors_aux ()
=> 0x1016a <__do_global_dtors_aux+44>:	ld	s0,0(sp)
0x000000000001016c in __do_global_dtors_aux ()
=> 0x1016c <__do_global_dtors_aux+46>:	addi	sp,sp,16
0x000000000001016e in __do_global_dtors_aux ()
=> 0x1016e <__do_global_dtors_aux+48>:	ret
0x00000000000139ce in __libc_fini_array ()
=> 0x139ce <__libc_fini_array+44>:	bnez	s1,0x139c6 <__libc_fini_array+36>
0x00000000000139d0 in __libc_fini_array ()
=> 0x139d0 <__libc_fini_array+46>:	ld	ra,24(sp)
0x00000000000139d2 in __libc_fini_array ()
=> 0x139d2 <__libc_fini_array+48>:	ld	s0,16(sp)
0x00000000000139d4 in __libc_fini_array ()
=> 0x139d4 <__libc_fini_array+50>:	ld	s1,8(sp)
0x00000000000139d6 in __libc_fini_array ()
=> 0x139d6 <__libc_fini_array+52>:	addi	sp,sp,32
0x00000000000139d8 in __libc_fini_array ()
=> 0x139d8 <__libc_fini_array+54>:	ret
0x00000000000134d6 in __call_exitprocs ()
=> 0x134d6 <__call_exitprocs+140>:	lw	a4,8(s2)
0x00000000000134da in __call_exitprocs ()
=> 0x134da <__call_exitprocs+144>:	ld	a5,504(s4)
0x00000000000134de in __call_exitprocs ()
=> 0x134de <__call_exitprocs+148>:	bne	a4,s8,0x134e6 <__call_exitprocs+156>
0x00000000000134e2 in __call_exitprocs ()
=> 0x134e2 <__call_exitprocs+152>:	beq	a5,s2,0x13490 <__call_exitprocs+70>
0x0000000000013490 in __call_exitprocs ()
=> 0x13490 <__call_exitprocs+70>:	addiw	s0,s0,-1
0x0000000000013492 in __call_exitprocs ()
=> 0x13492 <__call_exitprocs+72>:	addi	s1,s1,-8
0x0000000000013494 in __call_exitprocs ()
=> 0x13494 <__call_exitprocs+74>:	bne	s0,s3,0x13484 <__call_exitprocs+58>
0x0000000000013498 in __call_exitprocs ()
=> 0x13498 <__call_exitprocs+78>:	ld	ra,72(sp)
0x000000000001349a in __call_exitprocs ()
=> 0x1349a <__call_exitprocs+80>:	ld	s0,64(sp)
0x000000000001349c in __call_exitprocs ()
=> 0x1349c <__call_exitprocs+82>:	ld	s1,56(sp)
0x000000000001349e in __call_exitprocs ()
=> 0x1349e <__call_exitprocs+84>:	ld	s2,48(sp)
0x00000000000134a0 in __call_exitprocs ()
=> 0x134a0 <__call_exitprocs+86>:	ld	s3,40(sp)
0x00000000000134a2 in __call_exitprocs ()
=> 0x134a2 <__call_exitprocs+88>:	ld	s4,32(sp)
0x00000000000134a4 in __call_exitprocs ()
=> 0x134a4 <__call_exitprocs+90>:	ld	s5,24(sp)
0x00000000000134a6 in __call_exitprocs ()
=> 0x134a6 <__call_exitprocs+92>:	ld	s6,16(sp)
0x00000000000134a8 in __call_exitprocs ()
=> 0x134a8 <__call_exitprocs+94>:	ld	s7,8(sp)
0x00000000000134aa in __call_exitprocs ()
=> 0x134aa <__call_exitprocs+96>:	ld	s8,0(sp)
0x00000000000134ac in __call_exitprocs ()
=> 0x134ac <__call_exitprocs+98>:	addi	sp,sp,80
0x00000000000134ae in __call_exitprocs ()
=> 0x134ae <__call_exitprocs+100>:	ret
0x0000000000010f42 in exit ()
=> 0x10f42 <exit+14>:	ld	a0,-2000(gp)
0x0000000000010f46 in exit ()
=> 0x10f46 <exit+18>:	ld	a5,88(a0)
0x0000000000010f48 in exit ()
=> 0x10f48 <exit+20>:	beqz	a5,0x10f4c <exit+24>
0x0000000000010f4a in exit ()
=> 0x10f4a <exit+22>:	jalr	a5
0x0000000000013722 in _cleanup_r ()
=> 0x13722 <_cleanup_r>:	lui	a1,0x1a
0x0000000000013724 in _cleanup_r ()
=> 0x13724 <_cleanup_r+2>:	addi	a1,a1,-338
0x0000000000013728 in _cleanup_r ()
=> 0x13728 <_cleanup_r+6>:	j	0x13d84 <_fwalk_reent>
0x0000000000013d84 in _fwalk_reent ()
=> 0x13d84 <_fwalk_reent>:	addi	sp,sp,-80
0x0000000000013d86 in _fwalk_reent ()
=> 0x13d86 <_fwalk_reent+2>:	sd	s2,48(sp)
0x0000000000013d88 in _fwalk_reent ()
=> 0x13d88 <_fwalk_reent+4>:	sd	s3,40(sp)
0x0000000000013d8a in _fwalk_reent ()
=> 0x13d8a <_fwalk_reent+6>:	sd	s4,32(sp)
0x0000000000013d8c in _fwalk_reent ()
=> 0x13d8c <_fwalk_reent+8>:	sd	s5,24(sp)
0x0000000000013d8e in _fwalk_reent ()
=> 0x13d8e <_fwalk_reent+10>:	sd	s6,16(sp)
0x0000000000013d90 in _fwalk_reent ()
=> 0x13d90 <_fwalk_reent+12>:	sd	s7,8(sp)
0x0000000000013d92 in _fwalk_reent ()
=> 0x13d92 <_fwalk_reent+14>:	sd	s8,0(sp)
0x0000000000013d94 in _fwalk_reent ()
=> 0x13d94 <_fwalk_reent+16>:	sd	ra,72(sp)
0x0000000000013d96 in _fwalk_reent ()
=> 0x13d96 <_fwalk_reent+18>:	sd	s0,64(sp)
0x0000000000013d98 in _fwalk_reent ()
=> 0x13d98 <_fwalk_reent+20>:	sd	s1,56(sp)
0x0000000000013d9a in _fwalk_reent ()
=> 0x13d9a <_fwalk_reent+22>:	mv	s8,a0
0x0000000000013d9c in _fwalk_reent ()
=> 0x13d9c <_fwalk_reent+24>:	mv	s4,a1
0x0000000000013d9e in _fwalk_reent ()
=> 0x13d9e <_fwalk_reent+26>:	addi	s2,a0,1312
0x0000000000013da2 in _fwalk_reent ()
=> 0x13da2 <_fwalk_reent+30>:	li	s6,0
0x0000000000013da4 in _fwalk_reent ()
=> 0x13da4 <_fwalk_reent+32>:	li	s5,176
0x0000000000013da8 in _fwalk_reent ()
=> 0x13da8 <_fwalk_reent+36>:	li	s7,1
0x0000000000013daa in _fwalk_reent ()
=> 0x13daa <_fwalk_reent+38>:	li	s3,-1
0x0000000000013dac in _fwalk_reent ()
=> 0x13dac <_fwalk_reent+40>:	lw	a5,8(s2)
0x0000000000013db0 in _fwalk_reent ()
=> 0x13db0 <_fwalk_reent+44>:	ld	s0,16(s2)
0x0000000000013db4 in _fwalk_reent ()
=> 0x13db4 <_fwalk_reent+48>:	blez	a5,0x13dec <_fwalk_reent+104>
0x0000000000013db8 in _fwalk_reent ()
=> 0x13db8 <_fwalk_reent+52>:	addiw	s1,a5,-1
0x0000000000013dbc in _fwalk_reent ()
=> 0x13dbc <_fwalk_reent+56>:	slli	s1,s1,0x20
0x0000000000013dbe in _fwalk_reent ()
=> 0x13dbe <_fwalk_reent+58>:	srli	s1,s1,0x20
0x0000000000013dc0 in _fwalk_reent ()
=> 0x13dc0 <_fwalk_reent+60>:	addi	s1,s1,1
0x0000000000013dc2 in _fwalk_reent ()
=> 0x13dc2 <_fwalk_reent+62>:	mul	s1,s1,s5
0x0000000000013dc6 in _fwalk_reent ()
=> 0x13dc6 <_fwalk_reent+66>:	add	s1,s1,s0
0x0000000000013dc8 in _fwalk_reent ()
=> 0x13dc8 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013dcc in _fwalk_reent ()
=> 0x13dcc <_fwalk_reent+72>:	bgeu	s7,a5,0x13de4 <_fwalk_reent+96>
0x0000000000013dd0 in _fwalk_reent ()
=> 0x13dd0 <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013dd4 in _fwalk_reent ()
=> 0x13dd4 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013dd6 in _fwalk_reent ()
=> 0x13dd6 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013dd8 in _fwalk_reent ()
=> 0x13dd8 <_fwalk_reent+84>:	beq	a5,s3,0x13de4 <_fwalk_reent+96>
0x0000000000013ddc in _fwalk_reent ()
=> 0x13ddc <_fwalk_reent+88>:	jalr	s4
0x0000000000019eae in _fclose_r ()
=> 0x19eae <_fclose_r>:	beqz	a1,0x19ee8 <_fclose_r+58>
0x0000000000019eb0 in _fclose_r ()
=> 0x19eb0 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019eb2 in _fclose_r ()
=> 0x19eb2 <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019eb4 in _fclose_r ()
=> 0x19eb4 <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019eb6 in _fclose_r ()
=> 0x19eb6 <_fclose_r+8>:	mv	s0,a0
0x0000000000019eb8 in _fclose_r ()
=> 0x19eb8 <_fclose_r+10>:	beqz	a0,0x19ebe <_fclose_r+16>
0x0000000000019eba in _fclose_r ()
=> 0x19eba <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019ebc in _fclose_r ()
=> 0x19ebc <_fclose_r+14>:	beqz	a5,0x19ed8 <_fclose_r+42>
0x0000000000019ebe in _fclose_r ()
=> 0x19ebe <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019ec2 in _fclose_r ()
=> 0x19ec2 <_fclose_r+20>:	bnez	a5,0x19ece <_fclose_r+32>
0x0000000000019ece in _fclose_r ()
=> 0x19ece <_fclose_r+32>:	mv	a0,s0
0x0000000000019ed0 in _fclose_r ()
=> 0x19ed0 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019ed2 in _fclose_r ()
=> 0x19ed2 <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019ed4 in _fclose_r ()
=> 0x19ed4 <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019ed6 in _fclose_r ()
=> 0x19ed6 <_fclose_r+40>:	j	0x19e2e <_fclose_r.part.0>
0x0000000000019e2e in _fclose_r.part.0 ()
=> 0x19e2e <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019e30 in _fclose_r.part.0 ()
=> 0x19e30 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019e32 in _fclose_r.part.0 ()
=> 0x19e32 <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019e34 in _fclose_r.part.0 ()
=> 0x19e34 <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019e36 in _fclose_r.part.0 ()
=> 0x19e36 <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019e38 in _fclose_r.part.0 ()
=> 0x19e38 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019e3a in _fclose_r.part.0 ()
=> 0x19e3a <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019e3c in _fclose_r.part.0 ()
=> 0x19e3c <_fclose_r.part.0+14>:	jal	ra,0x1350c <__sflush_r>
0x000000000001350c in __sflush_r ()
=> 0x1350c <__sflush_r>:	lh	a5,16(a1)
0x0000000000013510 in __sflush_r ()
=> 0x13510 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000013512 in __sflush_r ()
=> 0x13512 <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000013514 in __sflush_r ()
=> 0x13514 <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000013516 in __sflush_r ()
=> 0x13516 <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000013518 in __sflush_r ()
=> 0x13518 <__sflush_r+12>:	sd	s1,24(sp)
0x000000000001351a in __sflush_r ()
=> 0x1351a <__sflush_r+14>:	sd	s2,16(sp)
0x000000000001351c in __sflush_r ()
=> 0x1351c <__sflush_r+16>:	andi	a3,a5,8
0x0000000000013520 in __sflush_r ()
=> 0x13520 <__sflush_r+20>:	mv	s0,a1
0x0000000000013522 in __sflush_r ()
=> 0x13522 <__sflush_r+22>:	mv	s3,a0
0x0000000000013524 in __sflush_r ()
=> 0x13524 <__sflush_r+24>:	bnez	a3,0x135d8 <__sflush_r+204>
0x0000000000013526 in __sflush_r ()
=> 0x13526 <__sflush_r+26>:	lui	a4,0x1
0x0000000000013528 in __sflush_r ()
=> 0x13528 <__sflush_r+28>:	addi	a4,a4,-2048
0x000000000001352c in __sflush_r ()
=> 0x1352c <__sflush_r+32>:	lw	a3,8(a1)
0x000000000001352e in __sflush_r ()
=> 0x1352e <__sflush_r+34>:	or	a5,a5,a4
0x0000000000013530 in __sflush_r ()
=> 0x13530 <__sflush_r+36>:	sh	a5,16(a1)
0x0000000000013534 in __sflush_r ()
=> 0x13534 <__sflush_r+40>:	blez	a3,0x13634 <__sflush_r+296>
0x0000000000013634 in __sflush_r ()
=> 0x13634 <__sflush_r+296>:	lw	a4,112(a1)
0x0000000000013636 in __sflush_r ()
=> 0x13636 <__sflush_r+298>:	bgtz	a4,0x13538 <__sflush_r+44>
0x000000000001363a in __sflush_r ()
=> 0x1363a <__sflush_r+302>:	j	0x135c8 <__sflush_r+188>
0x00000000000135c8 in __sflush_r ()
=> 0x135c8 <__sflush_r+188>:	li	a0,0
0x00000000000135ca in __sflush_r ()
=> 0x135ca <__sflush_r+190>:	ld	ra,40(sp)
0x00000000000135cc in __sflush_r ()
=> 0x135cc <__sflush_r+192>:	ld	s0,32(sp)
0x00000000000135ce in __sflush_r ()
=> 0x135ce <__sflush_r+194>:	ld	s1,24(sp)
0x00000000000135d0 in __sflush_r ()
=> 0x135d0 <__sflush_r+196>:	ld	s2,16(sp)
0x00000000000135d2 in __sflush_r ()
=> 0x135d2 <__sflush_r+198>:	ld	s3,8(sp)
0x00000000000135d4 in __sflush_r ()
=> 0x135d4 <__sflush_r+200>:	addi	sp,sp,48
0x00000000000135d6 in __sflush_r ()
=> 0x135d6 <__sflush_r+202>:	ret
0x0000000000019e40 in _fclose_r.part.0 ()
=> 0x19e40 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019e42 in _fclose_r.part.0 ()
=> 0x19e42 <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019e44 in _fclose_r.part.0 ()
=> 0x19e44 <_fclose_r.part.0+22>:	beqz	a5,0x19e50 <_fclose_r.part.0+34>
0x0000000000019e46 in _fclose_r.part.0 ()
=> 0x19e46 <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019e48 in _fclose_r.part.0 ()
=> 0x19e48 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019e4a in _fclose_r.part.0 ()
=> 0x19e4a <_fclose_r.part.0+28>:	jalr	a5
0x0000000000017138 in __sclose ()
=> 0x17138 <__sclose>:	lh	a1,18(a1)
0x000000000001713c in __sclose ()
=> 0x1713c <__sclose+4>:	j	0x19df2 <_close_r>
0x0000000000019df2 in _close_r ()
=> 0x19df2 <_close_r>:	addi	sp,sp,-32
0x0000000000019df4 in _close_r ()
=> 0x19df4 <_close_r+2>:	sd	s0,16(sp)
0x0000000000019df6 in _close_r ()
=> 0x19df6 <_close_r+4>:	sd	s1,8(sp)
0x0000000000019df8 in _close_r ()
=> 0x19df8 <_close_r+6>:	mv	s0,a0
0x0000000000019dfa in _close_r ()
=> 0x19dfa <_close_r+8>:	mv	a0,a1
0x0000000000019dfc in _close_r ()
=> 0x19dfc <_close_r+10>:	sd	ra,24(sp)
0x0000000000019dfe in _close_r ()
=> 0x19dfe <_close_r+12>:	sw	zero,-1872(gp)
0x0000000000019e02 in _close_r ()
=> 0x19e02 <_close_r+16>:	jal	ra,0x1bc5a <_close>
0x000000000001bc5a in _close ()
=> 0x1bc5a <_close>:	addi	sp,sp,-16
0x000000000001bc5c in _close ()
=> 0x1bc5c <_close+2>:	sd	ra,8(sp)
0x000000000001bc5e in _close ()
=> 0x1bc5e <_close+4>:	sd	s0,0(sp)
0x000000000001bc60 in _close ()
=> 0x1bc60 <_close+6>:	li	a7,57
0x000000000001bc64 in _close ()
=> 0x1bc64 <_close+10>:	ecall
0x000000000001bc68 in _close ()
=> 0x1bc68 <_close+14>:	mv	s0,a0
0x000000000001bc6a in _close ()
=> 0x1bc6a <_close+16>:	bltz	a0,0x1bc78 <_close+30>
0x000000000001bc6e in _close ()
=> 0x1bc6e <_close+20>:	sext.w	a0,a0
0x000000000001bc70 in _close ()
=> 0x1bc70 <_close+22>:	ld	ra,8(sp)
0x000000000001bc72 in _close ()
=> 0x1bc72 <_close+24>:	ld	s0,0(sp)
0x000000000001bc74 in _close ()
=> 0x1bc74 <_close+26>:	addi	sp,sp,16
0x000000000001bc76 in _close ()
=> 0x1bc76 <_close+28>:	ret
0x0000000000019e06 in _close_r ()
=> 0x19e06 <_close_r+20>:	li	a5,-1
0x0000000000019e08 in _close_r ()
=> 0x19e08 <_close_r+22>:	beq	a0,a5,0x19e16 <_close_r+36>
0x0000000000019e0c in _close_r ()
=> 0x19e0c <_close_r+26>:	ld	ra,24(sp)
0x0000000000019e0e in _close_r ()
=> 0x19e0e <_close_r+28>:	ld	s0,16(sp)
0x0000000000019e10 in _close_r ()
=> 0x19e10 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019e12 in _close_r ()
=> 0x19e12 <_close_r+32>:	addi	sp,sp,32
0x0000000000019e14 in _close_r ()
=> 0x19e14 <_close_r+34>:	ret
0x0000000000019e4c in _fclose_r.part.0 ()
=> 0x19e4c <_fclose_r.part.0+30>:	bltz	a0,0x19e98 <_fclose_r.part.0+106>
0x0000000000019e50 in _fclose_r.part.0 ()
=> 0x19e50 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019e54 in _fclose_r.part.0 ()
=> 0x19e54 <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019e58 in _fclose_r.part.0 ()
=> 0x19e58 <_fclose_r.part.0+42>:	bnez	a5,0x19ea4 <_fclose_r.part.0+118>
0x0000000000019e5a in _fclose_r.part.0 ()
=> 0x19e5a <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019e5c in _fclose_r.part.0 ()
=> 0x19e5c <_fclose_r.part.0+46>:	beqz	a1,0x19e70 <_fclose_r.part.0+66>
0x0000000000019e70 in _fclose_r.part.0 ()
=> 0x19e70 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019e72 in _fclose_r.part.0 ()
=> 0x19e72 <_fclose_r.part.0+68>:	beqz	a1,0x19e7e <_fclose_r.part.0+80>
0x0000000000019e7e in _fclose_r.part.0 ()
=> 0x19e7e <_fclose_r.part.0+80>:	jal	ra,0x13982 <__sfp_lock_acquire>
0x0000000000013982 in __sfp_lock_acquire ()
=> 0x13982 <__sfp_lock_acquire>:	ret
0x0000000000019e82 in _fclose_r.part.0 ()
=> 0x19e82 <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019e86 in _fclose_r.part.0 ()
=> 0x19e86 <_fclose_r.part.0+88>:	jal	ra,0x13984 <__sfp_lock_release>
0x0000000000013984 in __sfp_lock_release ()
=> 0x13984 <__sfp_lock_release>:	ret
0x0000000000019e8a in _fclose_r.part.0 ()
=> 0x19e8a <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019e8c in _fclose_r.part.0 ()
=> 0x19e8c <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019e8e in _fclose_r.part.0 ()
=> 0x19e8e <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019e90 in _fclose_r.part.0 ()
=> 0x19e90 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019e92 in _fclose_r.part.0 ()
=> 0x19e92 <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019e94 in _fclose_r.part.0 ()
=> 0x19e94 <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019e96 in _fclose_r.part.0 ()
=> 0x19e96 <_fclose_r.part.0+104>:	ret
0x0000000000013dde in _fwalk_reent ()
=> 0x13dde <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013de2 in _fwalk_reent ()
=> 0x13de2 <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013de4 in _fwalk_reent ()
=> 0x13de4 <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013de8 in _fwalk_reent ()
=> 0x13de8 <_fwalk_reent+100>:	bne	s1,s0,0x13dc8 <_fwalk_reent+68>
0x0000000000013dc8 in _fwalk_reent ()
=> 0x13dc8 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013dcc in _fwalk_reent ()
=> 0x13dcc <_fwalk_reent+72>:	bgeu	s7,a5,0x13de4 <_fwalk_reent+96>
0x0000000000013dd0 in _fwalk_reent ()
=> 0x13dd0 <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013dd4 in _fwalk_reent ()
=> 0x13dd4 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013dd6 in _fwalk_reent ()
=> 0x13dd6 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013dd8 in _fwalk_reent ()
=> 0x13dd8 <_fwalk_reent+84>:	beq	a5,s3,0x13de4 <_fwalk_reent+96>
0x0000000000013ddc in _fwalk_reent ()
=> 0x13ddc <_fwalk_reent+88>:	jalr	s4
0x0000000000019eae in _fclose_r ()
=> 0x19eae <_fclose_r>:	beqz	a1,0x19ee8 <_fclose_r+58>
0x0000000000019eb0 in _fclose_r ()
=> 0x19eb0 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019eb2 in _fclose_r ()
=> 0x19eb2 <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019eb4 in _fclose_r ()
=> 0x19eb4 <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019eb6 in _fclose_r ()
=> 0x19eb6 <_fclose_r+8>:	mv	s0,a0
0x0000000000019eb8 in _fclose_r ()
=> 0x19eb8 <_fclose_r+10>:	beqz	a0,0x19ebe <_fclose_r+16>
0x0000000000019eba in _fclose_r ()
=> 0x19eba <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019ebc in _fclose_r ()
=> 0x19ebc <_fclose_r+14>:	beqz	a5,0x19ed8 <_fclose_r+42>
0x0000000000019ebe in _fclose_r ()
=> 0x19ebe <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019ec2 in _fclose_r ()
=> 0x19ec2 <_fclose_r+20>:	bnez	a5,0x19ece <_fclose_r+32>
0x0000000000019ece in _fclose_r ()
=> 0x19ece <_fclose_r+32>:	mv	a0,s0
0x0000000000019ed0 in _fclose_r ()
=> 0x19ed0 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019ed2 in _fclose_r ()
=> 0x19ed2 <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019ed4 in _fclose_r ()
=> 0x19ed4 <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019ed6 in _fclose_r ()
=> 0x19ed6 <_fclose_r+40>:	j	0x19e2e <_fclose_r.part.0>
0x0000000000019e2e in _fclose_r.part.0 ()
=> 0x19e2e <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019e30 in _fclose_r.part.0 ()
=> 0x19e30 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019e32 in _fclose_r.part.0 ()
=> 0x19e32 <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019e34 in _fclose_r.part.0 ()
=> 0x19e34 <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019e36 in _fclose_r.part.0 ()
=> 0x19e36 <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019e38 in _fclose_r.part.0 ()
=> 0x19e38 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019e3a in _fclose_r.part.0 ()
=> 0x19e3a <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019e3c in _fclose_r.part.0 ()
=> 0x19e3c <_fclose_r.part.0+14>:	jal	ra,0x1350c <__sflush_r>
0x000000000001350c in __sflush_r ()
=> 0x1350c <__sflush_r>:	lh	a5,16(a1)
0x0000000000013510 in __sflush_r ()
=> 0x13510 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000013512 in __sflush_r ()
=> 0x13512 <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000013514 in __sflush_r ()
=> 0x13514 <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000013516 in __sflush_r ()
=> 0x13516 <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000013518 in __sflush_r ()
=> 0x13518 <__sflush_r+12>:	sd	s1,24(sp)
0x000000000001351a in __sflush_r ()
=> 0x1351a <__sflush_r+14>:	sd	s2,16(sp)
0x000000000001351c in __sflush_r ()
=> 0x1351c <__sflush_r+16>:	andi	a3,a5,8
0x0000000000013520 in __sflush_r ()
=> 0x13520 <__sflush_r+20>:	mv	s0,a1
0x0000000000013522 in __sflush_r ()
=> 0x13522 <__sflush_r+22>:	mv	s3,a0
0x0000000000013524 in __sflush_r ()
=> 0x13524 <__sflush_r+24>:	bnez	a3,0x135d8 <__sflush_r+204>
0x00000000000135d8 in __sflush_r ()
=> 0x135d8 <__sflush_r+204>:	ld	s2,24(a1)
0x00000000000135dc in __sflush_r ()
=> 0x135dc <__sflush_r+208>:	beqz	s2,0x135c8 <__sflush_r+188>
0x00000000000135e0 in __sflush_r ()
=> 0x135e0 <__sflush_r+212>:	ld	s1,0(a1)
0x00000000000135e2 in __sflush_r ()
=> 0x135e2 <__sflush_r+214>:	slli	a4,a5,0x30
0x00000000000135e6 in __sflush_r ()
=> 0x135e6 <__sflush_r+218>:	srli	a4,a4,0x30
0x00000000000135e8 in __sflush_r ()
=> 0x135e8 <__sflush_r+220>:	andi	a4,a4,3
0x00000000000135ea in __sflush_r ()
=> 0x135ea <__sflush_r+222>:	sd	s2,0(a1)
0x00000000000135ee in __sflush_r ()
=> 0x135ee <__sflush_r+226>:	subw	s1,s1,s2
0x00000000000135f2 in __sflush_r ()
=> 0x135f2 <__sflush_r+230>:	li	a5,0
0x00000000000135f4 in __sflush_r ()
=> 0x135f4 <__sflush_r+232>:	bnez	a4,0x135f8 <__sflush_r+236>
0x00000000000135f8 in __sflush_r ()
=> 0x135f8 <__sflush_r+236>:	sw	a5,12(s0)
0x00000000000135fa in __sflush_r ()
=> 0x135fa <__sflush_r+238>:	bgtz	s1,0x13606 <__sflush_r+250>
0x00000000000135fe in __sflush_r ()
=> 0x135fe <__sflush_r+242>:	j	0x135c8 <__sflush_r+188>
0x00000000000135c8 in __sflush_r ()
=> 0x135c8 <__sflush_r+188>:	li	a0,0
0x00000000000135ca in __sflush_r ()
=> 0x135ca <__sflush_r+190>:	ld	ra,40(sp)
0x00000000000135cc in __sflush_r ()
=> 0x135cc <__sflush_r+192>:	ld	s0,32(sp)
0x00000000000135ce in __sflush_r ()
=> 0x135ce <__sflush_r+194>:	ld	s1,24(sp)
0x00000000000135d0 in __sflush_r ()
=> 0x135d0 <__sflush_r+196>:	ld	s2,16(sp)
0x00000000000135d2 in __sflush_r ()
=> 0x135d2 <__sflush_r+198>:	ld	s3,8(sp)
0x00000000000135d4 in __sflush_r ()
=> 0x135d4 <__sflush_r+200>:	addi	sp,sp,48
0x00000000000135d6 in __sflush_r ()
=> 0x135d6 <__sflush_r+202>:	ret
0x0000000000019e40 in _fclose_r.part.0 ()
=> 0x19e40 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019e42 in _fclose_r.part.0 ()
=> 0x19e42 <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019e44 in _fclose_r.part.0 ()
=> 0x19e44 <_fclose_r.part.0+22>:	beqz	a5,0x19e50 <_fclose_r.part.0+34>
0x0000000000019e46 in _fclose_r.part.0 ()
=> 0x19e46 <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019e48 in _fclose_r.part.0 ()
=> 0x19e48 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019e4a in _fclose_r.part.0 ()
=> 0x19e4a <_fclose_r.part.0+28>:	jalr	a5
0x0000000000017138 in __sclose ()
=> 0x17138 <__sclose>:	lh	a1,18(a1)
0x000000000001713c in __sclose ()
=> 0x1713c <__sclose+4>:	j	0x19df2 <_close_r>
0x0000000000019df2 in _close_r ()
=> 0x19df2 <_close_r>:	addi	sp,sp,-32
0x0000000000019df4 in _close_r ()
=> 0x19df4 <_close_r+2>:	sd	s0,16(sp)
0x0000000000019df6 in _close_r ()
=> 0x19df6 <_close_r+4>:	sd	s1,8(sp)
0x0000000000019df8 in _close_r ()
=> 0x19df8 <_close_r+6>:	mv	s0,a0
0x0000000000019dfa in _close_r ()
=> 0x19dfa <_close_r+8>:	mv	a0,a1
0x0000000000019dfc in _close_r ()
=> 0x19dfc <_close_r+10>:	sd	ra,24(sp)
0x0000000000019dfe in _close_r ()
=> 0x19dfe <_close_r+12>:	sw	zero,-1872(gp)
0x0000000000019e02 in _close_r ()
=> 0x19e02 <_close_r+16>:	jal	ra,0x1bc5a <_close>
0x000000000001bc5a in _close ()
=> 0x1bc5a <_close>:	addi	sp,sp,-16
0x000000000001bc5c in _close ()
=> 0x1bc5c <_close+2>:	sd	ra,8(sp)
0x000000000001bc5e in _close ()
=> 0x1bc5e <_close+4>:	sd	s0,0(sp)
0x000000000001bc60 in _close ()
=> 0x1bc60 <_close+6>:	li	a7,57
0x000000000001bc64 in _close ()
=> 0x1bc64 <_close+10>:	ecall
0x000000000001bc68 in _close ()
=> 0x1bc68 <_close+14>:	mv	s0,a0
0x000000000001bc6a in _close ()
=> 0x1bc6a <_close+16>:	bltz	a0,0x1bc78 <_close+30>
0x000000000001bc6e in _close ()
=> 0x1bc6e <_close+20>:	sext.w	a0,a0
0x000000000001bc70 in _close ()
=> 0x1bc70 <_close+22>:	ld	ra,8(sp)
0x000000000001bc72 in _close ()
=> 0x1bc72 <_close+24>:	ld	s0,0(sp)
0x000000000001bc74 in _close ()
=> 0x1bc74 <_close+26>:	addi	sp,sp,16
0x000000000001bc76 in _close ()
=> 0x1bc76 <_close+28>:	ret
0x0000000000019e06 in _close_r ()
=> 0x19e06 <_close_r+20>:	li	a5,-1
0x0000000000019e08 in _close_r ()
=> 0x19e08 <_close_r+22>:	beq	a0,a5,0x19e16 <_close_r+36>
0x0000000000019e0c in _close_r ()
=> 0x19e0c <_close_r+26>:	ld	ra,24(sp)
0x0000000000019e0e in _close_r ()
=> 0x19e0e <_close_r+28>:	ld	s0,16(sp)
0x0000000000019e10 in _close_r ()
=> 0x19e10 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019e12 in _close_r ()
=> 0x19e12 <_close_r+32>:	addi	sp,sp,32
0x0000000000019e14 in _close_r ()
=> 0x19e14 <_close_r+34>:	ret
0x0000000000019e4c in _fclose_r.part.0 ()
=> 0x19e4c <_fclose_r.part.0+30>:	bltz	a0,0x19e98 <_fclose_r.part.0+106>
0x0000000000019e50 in _fclose_r.part.0 ()
=> 0x19e50 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019e54 in _fclose_r.part.0 ()
=> 0x19e54 <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019e58 in _fclose_r.part.0 ()
=> 0x19e58 <_fclose_r.part.0+42>:	bnez	a5,0x19ea4 <_fclose_r.part.0+118>
0x0000000000019ea4 in _fclose_r.part.0 ()
=> 0x19ea4 <_fclose_r.part.0+118>:	ld	a1,24(s0)
0x0000000000019ea6 in _fclose_r.part.0 ()
=> 0x19ea6 <_fclose_r.part.0+120>:	mv	a0,s1
0x0000000000019ea8 in _fclose_r.part.0 ()
=> 0x19ea8 <_fclose_r.part.0+122>:	jal	ra,0x13ab0 <_free_r>
0x0000000000013ab0 in _free_r ()
=> 0x13ab0 <_free_r>:	beqz	a1,0x13ba0 <_free_r+240>
0x0000000000013ab2 in _free_r ()
=> 0x13ab2 <_free_r+2>:	addi	sp,sp,-32
0x0000000000013ab4 in _free_r ()
=> 0x13ab4 <_free_r+4>:	sd	s0,16(sp)
0x0000000000013ab6 in _free_r ()
=> 0x13ab6 <_free_r+6>:	sd	s1,8(sp)
0x0000000000013ab8 in _free_r ()
=> 0x13ab8 <_free_r+8>:	mv	s0,a1
0x0000000000013aba in _free_r ()
=> 0x13aba <_free_r+10>:	mv	s1,a0
0x0000000000013abc in _free_r ()
=> 0x13abc <_free_r+12>:	sd	ra,24(sp)
0x0000000000013abe in _free_r ()
=> 0x13abe <_free_r+14>:	jal	ra,0x116aa <__malloc_lock>
0x00000000000116aa in __malloc_lock ()
=> 0x116aa <__malloc_lock>:	ret
0x0000000000013ac2 in _free_r ()
=> 0x13ac2 <_free_r+18>:	ld	a0,-8(s0)
0x0000000000013ac6 in _free_r ()
=> 0x13ac6 <_free_r+22>:	addi	a4,s0,-16
0x0000000000013aca in _free_r ()
=> 0x13aca <_free_r+26>:	lui	a1,0x20
0x0000000000013ace in _free_r ()
=> 0x13ace <_free_r+30>:	andi	a5,a0,-2
0x0000000000013ad2 in _free_r ()
=> 0x13ad2 <_free_r+34>:	add	a2,a4,a5
0x0000000000013ad6 in _free_r ()
=> 0x13ad6 <_free_r+38>:	addi	a1,a1,-2008
0x0000000000013ada in _free_r ()
=> 0x13ada <_free_r+42>:	ld	a3,8(a2)
0x0000000000013adc in _free_r ()
=> 0x13adc <_free_r+44>:	ld	a6,16(a1)
0x0000000000013ae0 in _free_r ()
=> 0x13ae0 <_free_r+48>:	andi	a3,a3,-4
0x0000000000013ae2 in _free_r ()
=> 0x13ae2 <_free_r+50>:	beq	a6,a2,0x13c26 <_free_r+374>
0x0000000000013c26 in _free_r ()
=> 0x13c26 <_free_r+374>:	andi	a0,a0,1
0x0000000000013c28 in _free_r ()
=> 0x13c28 <_free_r+376>:	add	a5,a5,a3
0x0000000000013c2a in _free_r ()
=> 0x13c2a <_free_r+378>:	bnez	a0,0x13c3c <_free_r+396>
0x0000000000013c2c in _free_r ()
=> 0x13c2c <_free_r+380>:	ld	a0,-16(s0)
0x0000000000013c30 in _free_r ()
=> 0x13c30 <_free_r+384>:	sub	a4,a4,a0
0x0000000000013c32 in _free_r ()
=> 0x13c32 <_free_r+386>:	ld	a3,24(a4)
0x0000000000013c34 in _free_r ()
=> 0x13c34 <_free_r+388>:	ld	a2,16(a4)
0x0000000000013c36 in _free_r ()
=> 0x13c36 <_free_r+390>:	add	a5,a5,a0
0x0000000000013c38 in _free_r ()
=> 0x13c38 <_free_r+392>:	sd	a3,24(a2)
0x0000000000013c3a in _free_r ()
=> 0x13c3a <_free_r+394>:	sd	a2,16(a3)
0x0000000000013c3c in _free_r ()
=> 0x13c3c <_free_r+396>:	ori	a2,a5,1
0x0000000000013c40 in _free_r ()
=> 0x13c40 <_free_r+400>:	ld	a3,-1968(gp)
0x0000000000013c44 in _free_r ()
=> 0x13c44 <_free_r+404>:	sd	a2,8(a4)
0x0000000000013c46 in _free_r ()
=> 0x13c46 <_free_r+406>:	sd	a4,16(a1)
0x0000000000013c48 in _free_r ()
=> 0x13c48 <_free_r+408>:	bltu	a5,a3,0x13b62 <_free_r+178>
0x0000000000013c4c in _free_r ()
=> 0x13c4c <_free_r+412>:	ld	a1,-1888(gp)
0x0000000000013c50 in _free_r ()
=> 0x13c50 <_free_r+416>:	mv	a0,s1
0x0000000000013c52 in _free_r ()
=> 0x13c52 <_free_r+418>:	jal	ra,0x139da <_malloc_trim_r>
0x00000000000139da in _malloc_trim_r ()
=> 0x139da <_malloc_trim_r>:	addi	sp,sp,-48
0x00000000000139dc in _malloc_trim_r ()
=> 0x139dc <_malloc_trim_r+2>:	sd	s3,8(sp)
0x00000000000139de in _malloc_trim_r ()
=> 0x139de <_malloc_trim_r+4>:	lui	s3,0x20
0x00000000000139e2 in _malloc_trim_r ()
=> 0x139e2 <_malloc_trim_r+8>:	sd	s0,32(sp)
0x00000000000139e4 in _malloc_trim_r ()
=> 0x139e4 <_malloc_trim_r+10>:	sd	s1,24(sp)
0x00000000000139e6 in _malloc_trim_r ()
=> 0x139e6 <_malloc_trim_r+12>:	sd	s2,16(sp)
0x00000000000139e8 in _malloc_trim_r ()
=> 0x139e8 <_malloc_trim_r+14>:	sd	s4,0(sp)
0x00000000000139ea in _malloc_trim_r ()
=> 0x139ea <_malloc_trim_r+16>:	sd	ra,40(sp)
0x00000000000139ec in _malloc_trim_r ()
=> 0x139ec <_malloc_trim_r+18>:	mv	s4,a1
0x00000000000139ee in _malloc_trim_r ()
=> 0x139ee <_malloc_trim_r+20>:	mv	s2,a0
0x00000000000139f0 in _malloc_trim_r ()
=> 0x139f0 <_malloc_trim_r+22>:	addi	s3,s3,-2008
0x00000000000139f4 in _malloc_trim_r ()
=> 0x139f4 <_malloc_trim_r+26>:	jal	ra,0x116aa <__malloc_lock>
0x00000000000116aa in __malloc_lock ()
=> 0x116aa <__malloc_lock>:	ret
0x00000000000139f8 in _malloc_trim_r ()
=> 0x139f8 <_malloc_trim_r+30>:	ld	a4,16(s3)
0x00000000000139fc in _malloc_trim_r ()
=> 0x139fc <_malloc_trim_r+34>:	lui	a5,0x1
0x00000000000139fe in _malloc_trim_r ()
=> 0x139fe <_malloc_trim_r+36>:	addi	s0,a5,-33
0x0000000000013a02 in _malloc_trim_r ()
=> 0x13a02 <_malloc_trim_r+40>:	ld	s1,8(a4)
0x0000000000013a04 in _malloc_trim_r ()
=> 0x13a04 <_malloc_trim_r+42>:	sub	s0,s0,s4
0x0000000000013a08 in _malloc_trim_r ()
=> 0x13a08 <_malloc_trim_r+46>:	andi	s1,s1,-4
0x0000000000013a0a in _malloc_trim_r ()
=> 0x13a0a <_malloc_trim_r+48>:	add	s0,s0,s1
0x0000000000013a0c in _malloc_trim_r ()
=> 0x13a0c <_malloc_trim_r+50>:	srli	s0,s0,0xc
0x0000000000013a0e in _malloc_trim_r ()
=> 0x13a0e <_malloc_trim_r+52>:	addi	s0,s0,-1
0x0000000000013a10 in _malloc_trim_r ()
=> 0x13a10 <_malloc_trim_r+54>:	slli	s0,s0,0xc
0x0000000000013a12 in _malloc_trim_r ()
=> 0x13a12 <_malloc_trim_r+56>:	blt	s0,a5,0x13a28 <_malloc_trim_r+78>
0x0000000000013a16 in _malloc_trim_r ()
=> 0x13a16 <_malloc_trim_r+60>:	li	a1,0
0x0000000000013a18 in _malloc_trim_r ()
=> 0x13a18 <_malloc_trim_r+62>:	mv	a0,s2
0x0000000000013a1a in _malloc_trim_r ()
=> 0x13a1a <_malloc_trim_r+64>:	jal	ra,0x116fc <_sbrk_r>
0x00000000000116fc in _sbrk_r ()
=> 0x116fc <_sbrk_r>:	addi	sp,sp,-32
0x00000000000116fe in _sbrk_r ()
=> 0x116fe <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000011700 in _sbrk_r ()
=> 0x11700 <_sbrk_r+4>:	sd	s1,8(sp)
0x0000000000011702 in _sbrk_r ()
=> 0x11702 <_sbrk_r+6>:	mv	s0,a0
0x0000000000011704 in _sbrk_r ()
=> 0x11704 <_sbrk_r+8>:	mv	a0,a1
0x0000000000011706 in _sbrk_r ()
=> 0x11706 <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000011708 in _sbrk_r ()
=> 0x11708 <_sbrk_r+12>:	sw	zero,-1872(gp)
0x000000000001170c in _sbrk_r ()
=> 0x1170c <_sbrk_r+16>:	jal	ra,0x1bd7e <_sbrk>
0x000000000001bd7e in _sbrk ()
=> 0x1bd7e <_sbrk>:	ld	a4,-1864(gp)
0x000000000001bd82 in _sbrk ()
=> 0x1bd82 <_sbrk+4>:	addi	sp,sp,-16
0x000000000001bd84 in _sbrk ()
=> 0x1bd84 <_sbrk+6>:	sd	ra,8(sp)
0x000000000001bd86 in _sbrk ()
=> 0x1bd86 <_sbrk+8>:	mv	a5,a0
0x000000000001bd88 in _sbrk ()
=> 0x1bd88 <_sbrk+10>:	bnez	a4,0x1bda0 <_sbrk+34>
0x000000000001bda0 in _sbrk ()
=> 0x1bda0 <_sbrk+34>:	li	a7,214
0x000000000001bda4 in _sbrk ()
=> 0x1bda4 <_sbrk+38>:	add	a0,a5,a4
0x000000000001bda8 in _sbrk ()
=> 0x1bda8 <_sbrk+42>:	ecall
0x000000000001bdac in _sbrk ()
=> 0x1bdac <_sbrk+46>:	ld	a4,-1864(gp)
0x000000000001bdb0 in _sbrk ()
=> 0x1bdb0 <_sbrk+50>:	add	a5,a5,a4
0x000000000001bdb2 in _sbrk ()
=> 0x1bdb2 <_sbrk+52>:	bne	a0,a5,0x1bdc2 <_sbrk+68>
0x000000000001bdb6 in _sbrk ()
=> 0x1bdb6 <_sbrk+56>:	ld	ra,8(sp)
0x000000000001bdb8 in _sbrk ()
=> 0x1bdb8 <_sbrk+58>:	sd	a0,-1864(gp)
0x000000000001bdbc in _sbrk ()
=> 0x1bdbc <_sbrk+62>:	mv	a0,a4
0x000000000001bdbe in _sbrk ()
=> 0x1bdbe <_sbrk+64>:	addi	sp,sp,16
0x000000000001bdc0 in _sbrk ()
=> 0x1bdc0 <_sbrk+66>:	ret
0x0000000000011710 in _sbrk_r ()
=> 0x11710 <_sbrk_r+20>:	li	a5,-1
0x0000000000011712 in _sbrk_r ()
=> 0x11712 <_sbrk_r+22>:	beq	a0,a5,0x11720 <_sbrk_r+36>
0x0000000000011716 in _sbrk_r ()
=> 0x11716 <_sbrk_r+26>:	ld	ra,24(sp)
0x0000000000011718 in _sbrk_r ()
=> 0x11718 <_sbrk_r+28>:	ld	s0,16(sp)
0x000000000001171a in _sbrk_r ()
=> 0x1171a <_sbrk_r+30>:	ld	s1,8(sp)
0x000000000001171c in _sbrk_r ()
=> 0x1171c <_sbrk_r+32>:	addi	sp,sp,32
0x000000000001171e in _sbrk_r ()
=> 0x1171e <_sbrk_r+34>:	ret
0x0000000000013a1e in _malloc_trim_r ()
=> 0x13a1e <_malloc_trim_r+68>:	ld	a5,16(s3)
0x0000000000013a22 in _malloc_trim_r ()
=> 0x13a22 <_malloc_trim_r+72>:	add	a5,a5,s1
0x0000000000013a24 in _malloc_trim_r ()
=> 0x13a24 <_malloc_trim_r+74>:	beq	a0,a5,0x13a40 <_malloc_trim_r+102>
0x0000000000013a40 in _malloc_trim_r ()
=> 0x13a40 <_malloc_trim_r+102>:	neg	a1,s0
0x0000000000013a44 in _malloc_trim_r ()
=> 0x13a44 <_malloc_trim_r+106>:	mv	a0,s2
0x0000000000013a46 in _malloc_trim_r ()
=> 0x13a46 <_malloc_trim_r+108>:	jal	ra,0x116fc <_sbrk_r>
0x00000000000116fc in _sbrk_r ()
=> 0x116fc <_sbrk_r>:	addi	sp,sp,-32
0x00000000000116fe in _sbrk_r ()
=> 0x116fe <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000011700 in _sbrk_r ()
=> 0x11700 <_sbrk_r+4>:	sd	s1,8(sp)
0x0000000000011702 in _sbrk_r ()
=> 0x11702 <_sbrk_r+6>:	mv	s0,a0
0x0000000000011704 in _sbrk_r ()
=> 0x11704 <_sbrk_r+8>:	mv	a0,a1
0x0000000000011706 in _sbrk_r ()
=> 0x11706 <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000011708 in _sbrk_r ()
=> 0x11708 <_sbrk_r+12>:	sw	zero,-1872(gp)
0x000000000001170c in _sbrk_r ()
=> 0x1170c <_sbrk_r+16>:	jal	ra,0x1bd7e <_sbrk>
0x000000000001bd7e in _sbrk ()
=> 0x1bd7e <_sbrk>:	ld	a4,-1864(gp)
0x000000000001bd82 in _sbrk ()
=> 0x1bd82 <_sbrk+4>:	addi	sp,sp,-16
0x000000000001bd84 in _sbrk ()
=> 0x1bd84 <_sbrk+6>:	sd	ra,8(sp)
0x000000000001bd86 in _sbrk ()
=> 0x1bd86 <_sbrk+8>:	mv	a5,a0
0x000000000001bd88 in _sbrk ()
=> 0x1bd88 <_sbrk+10>:	bnez	a4,0x1bda0 <_sbrk+34>
0x000000000001bda0 in _sbrk ()
=> 0x1bda0 <_sbrk+34>:	li	a7,214
0x000000000001bda4 in _sbrk ()
=> 0x1bda4 <_sbrk+38>:	add	a0,a5,a4
0x000000000001bda8 in _sbrk ()
=> 0x1bda8 <_sbrk+42>:	ecall
0x000000000001bdac in _sbrk ()
=> 0x1bdac <_sbrk+46>:	ld	a4,-1864(gp)
0x000000000001bdb0 in _sbrk ()
=> 0x1bdb0 <_sbrk+50>:	add	a5,a5,a4
0x000000000001bdb2 in _sbrk ()
=> 0x1bdb2 <_sbrk+52>:	bne	a0,a5,0x1bdc2 <_sbrk+68>
0x000000000001bdb6 in _sbrk ()
=> 0x1bdb6 <_sbrk+56>:	ld	ra,8(sp)
0x000000000001bdb8 in _sbrk ()
=> 0x1bdb8 <_sbrk+58>:	sd	a0,-1864(gp)
0x000000000001bdbc in _sbrk ()
=> 0x1bdbc <_sbrk+62>:	mv	a0,a4
0x000000000001bdbe in _sbrk ()
=> 0x1bdbe <_sbrk+64>:	addi	sp,sp,16
0x000000000001bdc0 in _sbrk ()
=> 0x1bdc0 <_sbrk+66>:	ret
0x0000000000011710 in _sbrk_r ()
=> 0x11710 <_sbrk_r+20>:	li	a5,-1
0x0000000000011712 in _sbrk_r ()
=> 0x11712 <_sbrk_r+22>:	beq	a0,a5,0x11720 <_sbrk_r+36>
0x0000000000011716 in _sbrk_r ()
=> 0x11716 <_sbrk_r+26>:	ld	ra,24(sp)
0x0000000000011718 in _sbrk_r ()
=> 0x11718 <_sbrk_r+28>:	ld	s0,16(sp)
0x000000000001171a in _sbrk_r ()
=> 0x1171a <_sbrk_r+30>:	ld	s1,8(sp)
0x000000000001171c in _sbrk_r ()
=> 0x1171c <_sbrk_r+32>:	addi	sp,sp,32
0x000000000001171e in _sbrk_r ()
=> 0x1171e <_sbrk_r+34>:	ret
0x0000000000013a4a in _malloc_trim_r ()
=> 0x13a4a <_malloc_trim_r+112>:	li	a5,-1
0x0000000000013a4c in _malloc_trim_r ()
=> 0x13a4c <_malloc_trim_r+114>:	beq	a0,a5,0x13a84 <_malloc_trim_r+170>
0x0000000000013a50 in _malloc_trim_r ()
=> 0x13a50 <_malloc_trim_r+118>:	lui	a5,0x22
0x0000000000013a54 in _malloc_trim_r ()
=> 0x13a54 <_malloc_trim_r+122>:	addi	a5,a5,728
0x0000000000013a58 in _malloc_trim_r ()
=> 0x13a58 <_malloc_trim_r+126>:	lw	a4,0(a5)
0x0000000000013a5a in _malloc_trim_r ()
=> 0x13a5a <_malloc_trim_r+128>:	ld	a3,16(s3)
0x0000000000013a5e in _malloc_trim_r ()
=> 0x13a5e <_malloc_trim_r+132>:	sub	s1,s1,s0
0x0000000000013a60 in _malloc_trim_r ()
=> 0x13a60 <_malloc_trim_r+134>:	ori	s1,s1,1
0x0000000000013a64 in _malloc_trim_r ()
=> 0x13a64 <_malloc_trim_r+138>:	subw	s0,a4,s0
0x0000000000013a68 in _malloc_trim_r ()
=> 0x13a68 <_malloc_trim_r+142>:	mv	a0,s2
0x0000000000013a6a in _malloc_trim_r ()
=> 0x13a6a <_malloc_trim_r+144>:	sd	s1,8(a3)
0x0000000000013a6c in _malloc_trim_r ()
=> 0x13a6c <_malloc_trim_r+146>:	sw	s0,0(a5)
0x0000000000013a6e in _malloc_trim_r ()
=> 0x13a6e <_malloc_trim_r+148>:	jal	ra,0x116ac <__malloc_unlock>
0x00000000000116ac in __malloc_unlock ()
=> 0x116ac <__malloc_unlock>:	ret
0x0000000000013a72 in _malloc_trim_r ()
=> 0x13a72 <_malloc_trim_r+152>:	ld	ra,40(sp)
0x0000000000013a74 in _malloc_trim_r ()
=> 0x13a74 <_malloc_trim_r+154>:	ld	s0,32(sp)
0x0000000000013a76 in _malloc_trim_r ()
=> 0x13a76 <_malloc_trim_r+156>:	ld	s1,24(sp)
0x0000000000013a78 in _malloc_trim_r ()
=> 0x13a78 <_malloc_trim_r+158>:	ld	s2,16(sp)
0x0000000000013a7a in _malloc_trim_r ()
=> 0x13a7a <_malloc_trim_r+160>:	ld	s3,8(sp)
0x0000000000013a7c in _malloc_trim_r ()
=> 0x13a7c <_malloc_trim_r+162>:	ld	s4,0(sp)
0x0000000000013a7e in _malloc_trim_r ()
=> 0x13a7e <_malloc_trim_r+164>:	li	a0,1
0x0000000000013a80 in _malloc_trim_r ()
=> 0x13a80 <_malloc_trim_r+166>:	addi	sp,sp,48
0x0000000000013a82 in _malloc_trim_r ()
=> 0x13a82 <_malloc_trim_r+168>:	ret
0x0000000000013c56 in _free_r ()
=> 0x13c56 <_free_r+422>:	j	0x13b62 <_free_r+178>
0x0000000000013b62 in _free_r ()
=> 0x13b62 <_free_r+178>:	ld	s0,16(sp)
0x0000000000013b64 in _free_r ()
=> 0x13b64 <_free_r+180>:	ld	ra,24(sp)
0x0000000000013b66 in _free_r ()
=> 0x13b66 <_free_r+182>:	mv	a0,s1
0x0000000000013b68 in _free_r ()
=> 0x13b68 <_free_r+184>:	ld	s1,8(sp)
0x0000000000013b6a in _free_r ()
=> 0x13b6a <_free_r+186>:	addi	sp,sp,32
0x0000000000013b6c in _free_r ()
=> 0x13b6c <_free_r+188>:	j	0x116ac <__malloc_unlock>
0x00000000000116ac in __malloc_unlock ()
=> 0x116ac <__malloc_unlock>:	ret
0x0000000000019eac in _fclose_r.part.0 ()
=> 0x19eac <_fclose_r.part.0+126>:	j	0x19e5a <_fclose_r.part.0+44>
0x0000000000019e5a in _fclose_r.part.0 ()
=> 0x19e5a <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019e5c in _fclose_r.part.0 ()
=> 0x19e5c <_fclose_r.part.0+46>:	beqz	a1,0x19e70 <_fclose_r.part.0+66>
0x0000000000019e70 in _fclose_r.part.0 ()
=> 0x19e70 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019e72 in _fclose_r.part.0 ()
=> 0x19e72 <_fclose_r.part.0+68>:	beqz	a1,0x19e7e <_fclose_r.part.0+80>
0x0000000000019e7e in _fclose_r.part.0 ()
=> 0x19e7e <_fclose_r.part.0+80>:	jal	ra,0x13982 <__sfp_lock_acquire>
0x0000000000013982 in __sfp_lock_acquire ()
=> 0x13982 <__sfp_lock_acquire>:	ret
0x0000000000019e82 in _fclose_r.part.0 ()
=> 0x19e82 <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019e86 in _fclose_r.part.0 ()
=> 0x19e86 <_fclose_r.part.0+88>:	jal	ra,0x13984 <__sfp_lock_release>
0x0000000000013984 in __sfp_lock_release ()
=> 0x13984 <__sfp_lock_release>:	ret
0x0000000000019e8a in _fclose_r.part.0 ()
=> 0x19e8a <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019e8c in _fclose_r.part.0 ()
=> 0x19e8c <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019e8e in _fclose_r.part.0 ()
=> 0x19e8e <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019e90 in _fclose_r.part.0 ()
=> 0x19e90 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019e92 in _fclose_r.part.0 ()
=> 0x19e92 <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019e94 in _fclose_r.part.0 ()
=> 0x19e94 <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019e96 in _fclose_r.part.0 ()
=> 0x19e96 <_fclose_r.part.0+104>:	ret
0x0000000000013dde in _fwalk_reent ()
=> 0x13dde <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013de2 in _fwalk_reent ()
=> 0x13de2 <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013de4 in _fwalk_reent ()
=> 0x13de4 <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013de8 in _fwalk_reent ()
=> 0x13de8 <_fwalk_reent+100>:	bne	s1,s0,0x13dc8 <_fwalk_reent+68>
0x0000000000013dc8 in _fwalk_reent ()
=> 0x13dc8 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013dcc in _fwalk_reent ()
=> 0x13dcc <_fwalk_reent+72>:	bgeu	s7,a5,0x13de4 <_fwalk_reent+96>
0x0000000000013dd0 in _fwalk_reent ()
=> 0x13dd0 <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013dd4 in _fwalk_reent ()
=> 0x13dd4 <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013dd6 in _fwalk_reent ()
=> 0x13dd6 <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013dd8 in _fwalk_reent ()
=> 0x13dd8 <_fwalk_reent+84>:	beq	a5,s3,0x13de4 <_fwalk_reent+96>
0x0000000000013ddc in _fwalk_reent ()
=> 0x13ddc <_fwalk_reent+88>:	jalr	s4
0x0000000000019eae in _fclose_r ()
=> 0x19eae <_fclose_r>:	beqz	a1,0x19ee8 <_fclose_r+58>
0x0000000000019eb0 in _fclose_r ()
=> 0x19eb0 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019eb2 in _fclose_r ()
=> 0x19eb2 <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019eb4 in _fclose_r ()
=> 0x19eb4 <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019eb6 in _fclose_r ()
=> 0x19eb6 <_fclose_r+8>:	mv	s0,a0
0x0000000000019eb8 in _fclose_r ()
=> 0x19eb8 <_fclose_r+10>:	beqz	a0,0x19ebe <_fclose_r+16>
0x0000000000019eba in _fclose_r ()
=> 0x19eba <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019ebc in _fclose_r ()
=> 0x19ebc <_fclose_r+14>:	beqz	a5,0x19ed8 <_fclose_r+42>
0x0000000000019ebe in _fclose_r ()
=> 0x19ebe <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019ec2 in _fclose_r ()
=> 0x19ec2 <_fclose_r+20>:	bnez	a5,0x19ece <_fclose_r+32>
0x0000000000019ece in _fclose_r ()
=> 0x19ece <_fclose_r+32>:	mv	a0,s0
0x0000000000019ed0 in _fclose_r ()
=> 0x19ed0 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019ed2 in _fclose_r ()
=> 0x19ed2 <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019ed4 in _fclose_r ()
=> 0x19ed4 <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019ed6 in _fclose_r ()
=> 0x19ed6 <_fclose_r+40>:	j	0x19e2e <_fclose_r.part.0>
0x0000000000019e2e in _fclose_r.part.0 ()
=> 0x19e2e <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019e30 in _fclose_r.part.0 ()
=> 0x19e30 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019e32 in _fclose_r.part.0 ()
=> 0x19e32 <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019e34 in _fclose_r.part.0 ()
=> 0x19e34 <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019e36 in _fclose_r.part.0 ()
=> 0x19e36 <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019e38 in _fclose_r.part.0 ()
=> 0x19e38 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019e3a in _fclose_r.part.0 ()
=> 0x19e3a <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019e3c in _fclose_r.part.0 ()
=> 0x19e3c <_fclose_r.part.0+14>:	jal	ra,0x1350c <__sflush_r>
0x000000000001350c in __sflush_r ()
=> 0x1350c <__sflush_r>:	lh	a5,16(a1)
0x0000000000013510 in __sflush_r ()
=> 0x13510 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000013512 in __sflush_r ()
=> 0x13512 <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000013514 in __sflush_r ()
=> 0x13514 <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000013516 in __sflush_r ()
=> 0x13516 <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000013518 in __sflush_r ()
=> 0x13518 <__sflush_r+12>:	sd	s1,24(sp)
0x000000000001351a in __sflush_r ()
=> 0x1351a <__sflush_r+14>:	sd	s2,16(sp)
0x000000000001351c in __sflush_r ()
=> 0x1351c <__sflush_r+16>:	andi	a3,a5,8
0x0000000000013520 in __sflush_r ()
=> 0x13520 <__sflush_r+20>:	mv	s0,a1
0x0000000000013522 in __sflush_r ()
=> 0x13522 <__sflush_r+22>:	mv	s3,a0
0x0000000000013524 in __sflush_r ()
=> 0x13524 <__sflush_r+24>:	bnez	a3,0x135d8 <__sflush_r+204>
0x0000000000013526 in __sflush_r ()
=> 0x13526 <__sflush_r+26>:	lui	a4,0x1
0x0000000000013528 in __sflush_r ()
=> 0x13528 <__sflush_r+28>:	addi	a4,a4,-2048
0x000000000001352c in __sflush_r ()
=> 0x1352c <__sflush_r+32>:	lw	a3,8(a1)
0x000000000001352e in __sflush_r ()
=> 0x1352e <__sflush_r+34>:	or	a5,a5,a4
0x0000000000013530 in __sflush_r ()
=> 0x13530 <__sflush_r+36>:	sh	a5,16(a1)
0x0000000000013534 in __sflush_r ()
=> 0x13534 <__sflush_r+40>:	blez	a3,0x13634 <__sflush_r+296>
0x0000000000013634 in __sflush_r ()
=> 0x13634 <__sflush_r+296>:	lw	a4,112(a1)
0x0000000000013636 in __sflush_r ()
=> 0x13636 <__sflush_r+298>:	bgtz	a4,0x13538 <__sflush_r+44>
0x000000000001363a in __sflush_r ()
=> 0x1363a <__sflush_r+302>:	j	0x135c8 <__sflush_r+188>
0x00000000000135c8 in __sflush_r ()
=> 0x135c8 <__sflush_r+188>:	li	a0,0
0x00000000000135ca in __sflush_r ()
=> 0x135ca <__sflush_r+190>:	ld	ra,40(sp)
0x00000000000135cc in __sflush_r ()
=> 0x135cc <__sflush_r+192>:	ld	s0,32(sp)
0x00000000000135ce in __sflush_r ()
=> 0x135ce <__sflush_r+194>:	ld	s1,24(sp)
0x00000000000135d0 in __sflush_r ()
=> 0x135d0 <__sflush_r+196>:	ld	s2,16(sp)
0x00000000000135d2 in __sflush_r ()
=> 0x135d2 <__sflush_r+198>:	ld	s3,8(sp)
0x00000000000135d4 in __sflush_r ()
=> 0x135d4 <__sflush_r+200>:	addi	sp,sp,48
0x00000000000135d6 in __sflush_r ()
=> 0x135d6 <__sflush_r+202>:	ret
0x0000000000019e40 in _fclose_r.part.0 ()
=> 0x19e40 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019e42 in _fclose_r.part.0 ()
=> 0x19e42 <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019e44 in _fclose_r.part.0 ()
=> 0x19e44 <_fclose_r.part.0+22>:	beqz	a5,0x19e50 <_fclose_r.part.0+34>
0x0000000000019e46 in _fclose_r.part.0 ()
=> 0x19e46 <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019e48 in _fclose_r.part.0 ()
=> 0x19e48 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019e4a in _fclose_r.part.0 ()
=> 0x19e4a <_fclose_r.part.0+28>:	jalr	a5
0x0000000000017138 in __sclose ()
=> 0x17138 <__sclose>:	lh	a1,18(a1)
0x000000000001713c in __sclose ()
=> 0x1713c <__sclose+4>:	j	0x19df2 <_close_r>
0x0000000000019df2 in _close_r ()
=> 0x19df2 <_close_r>:	addi	sp,sp,-32
0x0000000000019df4 in _close_r ()
=> 0x19df4 <_close_r+2>:	sd	s0,16(sp)
0x0000000000019df6 in _close_r ()
=> 0x19df6 <_close_r+4>:	sd	s1,8(sp)
0x0000000000019df8 in _close_r ()
=> 0x19df8 <_close_r+6>:	mv	s0,a0
0x0000000000019dfa in _close_r ()
=> 0x19dfa <_close_r+8>:	mv	a0,a1
0x0000000000019dfc in _close_r ()
=> 0x19dfc <_close_r+10>:	sd	ra,24(sp)
0x0000000000019dfe in _close_r ()
=> 0x19dfe <_close_r+12>:	sw	zero,-1872(gp)
0x0000000000019e02 in _close_r ()
=> 0x19e02 <_close_r+16>:	jal	ra,0x1bc5a <_close>
0x000000000001bc5a in _close ()
=> 0x1bc5a <_close>:	addi	sp,sp,-16
0x000000000001bc5c in _close ()
=> 0x1bc5c <_close+2>:	sd	ra,8(sp)
0x000000000001bc5e in _close ()
=> 0x1bc5e <_close+4>:	sd	s0,0(sp)
0x000000000001bc60 in _close ()
=> 0x1bc60 <_close+6>:	li	a7,57
0x000000000001bc64 in _close ()
=> 0x1bc64 <_close+10>:	ecall
0x000000000001bc68 in _close ()
=> 0x1bc68 <_close+14>:	mv	s0,a0
0x000000000001bc6a in _close ()
=> 0x1bc6a <_close+16>:	bltz	a0,0x1bc78 <_close+30>
0x000000000001bc6e in _close ()
=> 0x1bc6e <_close+20>:	sext.w	a0,a0
0x000000000001bc70 in _close ()
=> 0x1bc70 <_close+22>:	ld	ra,8(sp)
0x000000000001bc72 in _close ()
=> 0x1bc72 <_close+24>:	ld	s0,0(sp)
0x000000000001bc74 in _close ()
=> 0x1bc74 <_close+26>:	addi	sp,sp,16
0x000000000001bc76 in _close ()
=> 0x1bc76 <_close+28>:	ret
0x0000000000019e06 in _close_r ()
=> 0x19e06 <_close_r+20>:	li	a5,-1
0x0000000000019e08 in _close_r ()
=> 0x19e08 <_close_r+22>:	beq	a0,a5,0x19e16 <_close_r+36>
0x0000000000019e0c in _close_r ()
=> 0x19e0c <_close_r+26>:	ld	ra,24(sp)
0x0000000000019e0e in _close_r ()
=> 0x19e0e <_close_r+28>:	ld	s0,16(sp)
0x0000000000019e10 in _close_r ()
=> 0x19e10 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019e12 in _close_r ()
=> 0x19e12 <_close_r+32>:	addi	sp,sp,32
0x0000000000019e14 in _close_r ()
=> 0x19e14 <_close_r+34>:	ret
0x0000000000019e4c in _fclose_r.part.0 ()
=> 0x19e4c <_fclose_r.part.0+30>:	bltz	a0,0x19e98 <_fclose_r.part.0+106>
0x0000000000019e50 in _fclose_r.part.0 ()
=> 0x19e50 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019e54 in _fclose_r.part.0 ()
=> 0x19e54 <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019e58 in _fclose_r.part.0 ()
=> 0x19e58 <_fclose_r.part.0+42>:	bnez	a5,0x19ea4 <_fclose_r.part.0+118>
0x0000000000019e5a in _fclose_r.part.0 ()
=> 0x19e5a <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019e5c in _fclose_r.part.0 ()
=> 0x19e5c <_fclose_r.part.0+46>:	beqz	a1,0x19e70 <_fclose_r.part.0+66>
0x0000000000019e70 in _fclose_r.part.0 ()
=> 0x19e70 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019e72 in _fclose_r.part.0 ()
=> 0x19e72 <_fclose_r.part.0+68>:	beqz	a1,0x19e7e <_fclose_r.part.0+80>
0x0000000000019e7e in _fclose_r.part.0 ()
=> 0x19e7e <_fclose_r.part.0+80>:	jal	ra,0x13982 <__sfp_lock_acquire>
0x0000000000013982 in __sfp_lock_acquire ()
=> 0x13982 <__sfp_lock_acquire>:	ret
0x0000000000019e82 in _fclose_r.part.0 ()
=> 0x19e82 <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019e86 in _fclose_r.part.0 ()
=> 0x19e86 <_fclose_r.part.0+88>:	jal	ra,0x13984 <__sfp_lock_release>
0x0000000000013984 in __sfp_lock_release ()
=> 0x13984 <__sfp_lock_release>:	ret
0x0000000000019e8a in _fclose_r.part.0 ()
=> 0x19e8a <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019e8c in _fclose_r.part.0 ()
=> 0x19e8c <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019e8e in _fclose_r.part.0 ()
=> 0x19e8e <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019e90 in _fclose_r.part.0 ()
=> 0x19e90 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019e92 in _fclose_r.part.0 ()
=> 0x19e92 <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019e94 in _fclose_r.part.0 ()
=> 0x19e94 <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019e96 in _fclose_r.part.0 ()
=> 0x19e96 <_fclose_r.part.0+104>:	ret
0x0000000000013dde in _fwalk_reent ()
=> 0x13dde <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013de2 in _fwalk_reent ()
=> 0x13de2 <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013de4 in _fwalk_reent ()
=> 0x13de4 <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013de8 in _fwalk_reent ()
=> 0x13de8 <_fwalk_reent+100>:	bne	s1,s0,0x13dc8 <_fwalk_reent+68>
0x0000000000013dec in _fwalk_reent ()
=> 0x13dec <_fwalk_reent+104>:	ld	s2,0(s2)
0x0000000000013df0 in _fwalk_reent ()
=> 0x13df0 <_fwalk_reent+108>:	bnez	s2,0x13dac <_fwalk_reent+40>
0x0000000000013df4 in _fwalk_reent ()
=> 0x13df4 <_fwalk_reent+112>:	ld	ra,72(sp)
0x0000000000013df6 in _fwalk_reent ()
=> 0x13df6 <_fwalk_reent+114>:	ld	s0,64(sp)
0x0000000000013df8 in _fwalk_reent ()
=> 0x13df8 <_fwalk_reent+116>:	ld	s1,56(sp)
0x0000000000013dfa in _fwalk_reent ()
=> 0x13dfa <_fwalk_reent+118>:	ld	s2,48(sp)
0x0000000000013dfc in _fwalk_reent ()
=> 0x13dfc <_fwalk_reent+120>:	ld	s3,40(sp)
0x0000000000013dfe in _fwalk_reent ()
=> 0x13dfe <_fwalk_reent+122>:	ld	s4,32(sp)
0x0000000000013e00 in _fwalk_reent ()
=> 0x13e00 <_fwalk_reent+124>:	ld	s5,24(sp)
0x0000000000013e02 in _fwalk_reent ()
=> 0x13e02 <_fwalk_reent+126>:	ld	s7,8(sp)
0x0000000000013e04 in _fwalk_reent ()
=> 0x13e04 <_fwalk_reent+128>:	ld	s8,0(sp)
0x0000000000013e06 in _fwalk_reent ()
=> 0x13e06 <_fwalk_reent+130>:	mv	a0,s6
0x0000000000013e08 in _fwalk_reent ()
=> 0x13e08 <_fwalk_reent+132>:	ld	s6,16(sp)
0x0000000000013e0a in _fwalk_reent ()
=> 0x13e0a <_fwalk_reent+134>:	addi	sp,sp,80
0x0000000000013e0c in _fwalk_reent ()
=> 0x13e0c <_fwalk_reent+136>:	ret
0x0000000000010f4c in exit ()
=> 0x10f4c <exit+24>:	mv	a0,s0
0x0000000000010f4e in exit ()
=> 0x10f4e <exit+26>:	jal	ra,0x1bc86 <_exit>
0x000000000001bc86 in _exit ()
=> 0x1bc86 <_exit>:	li	a7,93
0x000000000001bc8a in _exit ()
=> 0x1bc8a <_exit+4>:	ecall
[Inferior 1 (process 784) exited normally]
script_remote.gdb:25: Error in sourced command file:
No registers.
