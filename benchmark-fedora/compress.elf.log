
Temporary breakpoint 1, start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102d4 <start_trigger+16>:	sd	ra,8(sp)
0x00000000000102d8	37	}
=> 0x102d8 <start_trigger+20>:	sd	s0,0(sp)
0x00000000000102dc	37	}
=> 0x102dc <start_trigger+24>:	addi	s0,sp,16
0x00000000000102e0	37	}
=> 0x102e0 <start_trigger+28>:	ld	s0,0(sp)
0x00000000000102e4 in start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102e4 <start_trigger+32>:	ld	ra,8(sp)
0x00000000000102e8	37	}
=> 0x102e8 <start_trigger+36>:	addi	sp,sp,16
0x00000000000102ec	37	}
=> 0x102ec <start_trigger+40>:	ld	ra,0(t6)
0x00000000000102f0	37	}
=> 0x102f0 <start_trigger+44>:	addi	t6,t6,16
0x00000000000102f4	37	}
=> 0x102f4 <start_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:54
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10220 <main+144>:	ld	a0,-88(s0)
0x0000000000010224	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10224 <main+148>:	sw	a0,-36(s0)
0x0000000000010228	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10228 <main+152>:	j	0x1022c <main+156>
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+156>:	lw	a0,-36(s0)
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+160>:	li	a1,0
0x0000000000010234	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10234 <main+164>:	blt	a1,a0,0x10260 <main+208>
0x0000000000010238	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10238 <main+168>:	j	0x1023c <main+172>
56	      initialise_benchmark ();
=> 0x1023c <main+172>:	jal	ra,0x1036c <initialise_benchmark>
initialise_benchmark () at libcompress.c:240
240	{
=> 0x1036c <initialise_benchmark>:	addi	t6,t6,-16
0x0000000000010370	240	{
=> 0x10370 <initialise_benchmark+4>:	sd	ra,0(t6)
0x0000000000010374	240	{
=> 0x10374 <initialise_benchmark+8>:	st	zero,0(t6)
0x0000000000010378	240	{
=> 0x10378 <initialise_benchmark+12>:	addi	sp,sp,-16
241	}
=> 0x1037c <initialise_benchmark+16>:	sd	ra,8(sp)
0x0000000000010380	241	}
=> 0x10380 <initialise_benchmark+20>:	sd	s0,0(sp)
0x0000000000010384	241	}
=> 0x10384 <initialise_benchmark+24>:	addi	s0,sp,16
0x0000000000010388	241	}
=> 0x10388 <initialise_benchmark+28>:	ld	s0,0(sp)
0x000000000001038c in initialise_benchmark () at libcompress.c:241
241	}
=> 0x1038c <initialise_benchmark+32>:	ld	ra,8(sp)
0x0000000000010390	241	}
=> 0x10390 <initialise_benchmark+36>:	addi	sp,sp,16
0x0000000000010394	241	}
=> 0x10394 <initialise_benchmark+40>:	ld	ra,0(t6)
0x0000000000010398	241	}
=> 0x10398 <initialise_benchmark+44>:	addi	t6,t6,16
0x000000000001039c	241	}
=> 0x1039c <initialise_benchmark+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:57
57	      result = benchmark ();
=> 0x10240 <main+176>:	sd	a0,-120(s0)
0x0000000000010244	57	      result = benchmark ();
=> 0x10244 <main+180>:	jal	ra,0x103a0 <benchmark>
benchmark () at libcompress.c:246
246	{
=> 0x103a0 <benchmark>:	addi	t6,t6,-16
0x00000000000103a4	246	{
=> 0x103a4 <benchmark+4>:	sd	ra,0(t6)
0x00000000000103a8	246	{
=> 0x103a8 <benchmark+8>:	st	zero,0(t6)
0x00000000000103ac	246	{
=> 0x103ac <benchmark+12>:	addi	sp,sp,-32
0x00000000000103b0	246	{
=> 0x103b0 <benchmark+16>:	sd	ra,24(sp)
0x00000000000103b4	246	{
=> 0x103b4 <benchmark+20>:	sd	s0,16(sp)
0x00000000000103b8	246	{
=> 0x103b8 <benchmark+24>:	addi	s0,sp,32
0x00000000000103bc	246	{
=> 0x103bc <benchmark+28>:	li	a0,50
247	   int count = IN_COUNT;
=> 0x103c0 <benchmark+32>:	sw	a0,-20(s0)
249	   maxbits = BITS;
=> 0x103c4 <benchmark+36>:	li	a1,16
0x00000000000103c8	249	   maxbits = BITS;
=> 0x103c8 <benchmark+40>:	sw	a1,-1984(gp)
250	   maxmaxcode = 1 << maxbits;
=> 0x103cc <benchmark+44>:	lwu	a0,-1984(gp)
0x00000000000103d0	250	   maxmaxcode = 1 << maxbits;
=> 0x103d0 <benchmark+48>:	li	a1,1
0x00000000000103d4	250	   maxmaxcode = 1 << maxbits;
=> 0x103d4 <benchmark+52>:	sllw	a0,a1,a0
0x00000000000103d8	250	   maxmaxcode = 1 << maxbits;
=> 0x103d8 <benchmark+56>:	sd	a0,-1976(gp)
252	   InCnt = count;
=> 0x103dc <benchmark+60>:	lw	a0,-20(s0)
0x00000000000103e0	252	   InCnt = count;
=> 0x103e0 <benchmark+64>:	sw	a0,-1860(gp)
253	   apsim_InCnt = IN_COUNT + 3;
=> 0x103e4 <benchmark+68>:	li	a1,53
0x00000000000103e8	253	   apsim_InCnt = IN_COUNT + 3;
=> 0x103e8 <benchmark+72>:	sw	a1,-1856(gp)
254	   InBuff = (unsigned char *)orig_text_buffer;
=> 0x103ec <benchmark+76>:	lui	a0,0x1d
0x00000000000103f0	254	   InBuff = (unsigned char *)orig_text_buffer;
=> 0x103f0 <benchmark+80>:	addi	a0,a0,676
0x00000000000103f4	254	   InBuff = (unsigned char *)orig_text_buffer;
=> 0x103f4 <benchmark+84>:	sd	a0,-1848(gp)
255	   OutBuff = (unsigned char *)comp_text_buffer;
=> 0x103f8 <benchmark+88>:	addi	a0,gp,-1680
0x00000000000103fc	255	   OutBuff = (unsigned char *)comp_text_buffer;
=> 0x103fc <benchmark+92>:	sd	a0,-1840(gp)
257	   compress();
=> 0x10400 <benchmark+96>:	jal	ra,0x10420 <compress>
compress () at libcompress.c:270
270	{
=> 0x10420 <compress>:	addi	t6,t6,-16
0x0000000000010424	270	{
=> 0x10424 <compress+4>:	sd	ra,0(t6)
0x0000000000010428	270	{
=> 0x10428 <compress+8>:	st	zero,0(t6)
0x000000000001042c	270	{
=> 0x1042c <compress+12>:	addi	sp,sp,-80
0x0000000000010430	270	{
=> 0x10430 <compress+16>:	sd	ra,72(sp)
0x0000000000010434	270	{
=> 0x10434 <compress+20>:	sd	s0,64(sp)
0x0000000000010438	270	{
=> 0x10438 <compress+24>:	addi	s0,sp,80
0x000000000001043c	270	{
=> 0x1043c <compress+28>:	li	a0,0
272	   register code_int i = 0;
=> 0x10440 <compress+32>:	sd	a0,-32(s0)
280	   offset = 0;
=> 0x10444 <compress+36>:	sw	a0,-1824(gp)
281	   bytes_out = 3;		/* includes 3-byte header mojo */
=> 0x10448 <compress+40>:	li	a2,3
0x000000000001044c	281	   bytes_out = 3;		/* includes 3-byte header mojo */
=> 0x1044c <compress+44>:	sd	a2,-1816(gp)
282	   out_count = 0;
=> 0x10450 <compress+48>:	sd	a0,-1832(gp)
283	   clear_flg = 0;
=> 0x10454 <compress+52>:	sw	a0,-1880(gp)
284	   ratio = 0;
=> 0x10458 <compress+56>:	sd	a0,-1872(gp)
285	   in_count = 1;
=> 0x1045c <compress+60>:	li	a2,1
0x0000000000010460	285	   in_count = 1;
=> 0x10460 <compress+64>:	sd	a2,-1936(gp)
286	   checkpoint = CHECK_GAP;
=> 0x10464 <compress+68>:	lui	a2,0x2
0x0000000000010468	286	   checkpoint = CHECK_GAP;
=> 0x10468 <compress+72>:	addiw	a2,a2,1808
0x000000000001046c	286	   checkpoint = CHECK_GAP;
=> 0x1046c <compress+76>:	sd	a2,-1944(gp)
287	   maxcode = MAXCODE(n_bits = INIT_BITS);
=> 0x10470 <compress+80>:	li	a2,9
0x0000000000010474	287	   maxcode = MAXCODE(n_bits = INIT_BITS);
=> 0x10474 <compress+84>:	sw	a2,-1808(gp)
0x0000000000010478	287	   maxcode = MAXCODE(n_bits = INIT_BITS);
=> 0x10478 <compress+88>:	li	a2,511
0x000000000001047c	287	   maxcode = MAXCODE(n_bits = INIT_BITS);
=> 0x1047c <compress+92>:	sd	a2,-1800(gp)
288	   free_ent = ((block_compress) ? (FIRST) : (256) );
=> 0x10480 <compress+96>:	lw	a1,-1952(gp)
0x0000000000010484	288	   free_ent = ((block_compress) ? (FIRST) : (256) );
=> 0x10484 <compress+100>:	snez	a1,a1
0x0000000000010488	288	   free_ent = ((block_compress) ? (FIRST) : (256) );
=> 0x10488 <compress+104>:	ori	a1,a1,256
0x000000000001048c	288	   free_ent = ((block_compress) ? (FIRST) : (256) );
=> 0x1048c <compress+108>:	sd	a1,-1896(gp)
290	   ent = getbyte ();
=> 0x10490 <compress+112>:	sd	a0,-80(s0)
0x0000000000010494	290	   ent = getbyte ();
=> 0x10494 <compress+116>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x0000000000010498 in compress () at libcompress.c:290
290	   ent = getbyte ();
=> 0x10498 <compress+120>:	slli	a0,a0,0x20
0x000000000001049c	290	   ent = getbyte ();
=> 0x1049c <compress+124>:	srli	a0,a0,0x20
0x00000000000104a0	290	   ent = getbyte ();
=> 0x104a0 <compress+128>:	sd	a0,-48(s0)
292	   hshift = 0;
=> 0x104a4 <compress+132>:	ld	a0,-80(s0)
0x00000000000104a8	292	   hshift = 0;
=> 0x104a8 <compress+136>:	sw	a0,-68(s0)
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104ac <compress+140>:	ld	a1,-1968(gp)
0x00000000000104b0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b0 <compress+144>:	sd	a1,-24(s0)
0x00000000000104b4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b4 <compress+148>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
0x00000000000104c8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c8 <compress+168>:	j	0x104cc <compress+172>
295	      hshift++;
=> 0x104cc <compress+172>:	lw	a0,-68(s0)
0x00000000000104d0	295	      hshift++;
=> 0x104d0 <compress+176>:	addi	a0,a0,1
0x00000000000104d4	295	      hshift++;
=> 0x104d4 <compress+180>:	sw	a0,-68(s0)
296	   }
=> 0x104d8 <compress+184>:	j	0x104dc <compress+188>
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104dc <compress+188>:	ld	a0,-24(s0)
0x00000000000104e0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e0 <compress+192>:	slli	a0,a0,0x1
0x00000000000104e4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e4 <compress+196>:	sd	a0,-24(s0)
0x00000000000104e8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e8 <compress+200>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
0x00000000000104c8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c8 <compress+168>:	j	0x104cc <compress+172>
295	      hshift++;
=> 0x104cc <compress+172>:	lw	a0,-68(s0)
0x00000000000104d0	295	      hshift++;
=> 0x104d0 <compress+176>:	addi	a0,a0,1
0x00000000000104d4	295	      hshift++;
=> 0x104d4 <compress+180>:	sw	a0,-68(s0)
296	   }
=> 0x104d8 <compress+184>:	j	0x104dc <compress+188>
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104dc <compress+188>:	ld	a0,-24(s0)
0x00000000000104e0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e0 <compress+192>:	slli	a0,a0,0x1
0x00000000000104e4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e4 <compress+196>:	sd	a0,-24(s0)
0x00000000000104e8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e8 <compress+200>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
0x00000000000104c8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c8 <compress+168>:	j	0x104cc <compress+172>
295	      hshift++;
=> 0x104cc <compress+172>:	lw	a0,-68(s0)
0x00000000000104d0	295	      hshift++;
=> 0x104d0 <compress+176>:	addi	a0,a0,1
0x00000000000104d4	295	      hshift++;
=> 0x104d4 <compress+180>:	sw	a0,-68(s0)
296	   }
=> 0x104d8 <compress+184>:	j	0x104dc <compress+188>
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104dc <compress+188>:	ld	a0,-24(s0)
0x00000000000104e0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e0 <compress+192>:	slli	a0,a0,0x1
0x00000000000104e4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e4 <compress+196>:	sd	a0,-24(s0)
0x00000000000104e8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e8 <compress+200>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
0x00000000000104c8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c8 <compress+168>:	j	0x104cc <compress+172>
295	      hshift++;
=> 0x104cc <compress+172>:	lw	a0,-68(s0)
0x00000000000104d0	295	      hshift++;
=> 0x104d0 <compress+176>:	addi	a0,a0,1
0x00000000000104d4	295	      hshift++;
=> 0x104d4 <compress+180>:	sw	a0,-68(s0)
296	   }
=> 0x104d8 <compress+184>:	j	0x104dc <compress+188>
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104dc <compress+188>:	ld	a0,-24(s0)
0x00000000000104e0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e0 <compress+192>:	slli	a0,a0,0x1
0x00000000000104e4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e4 <compress+196>:	sd	a0,-24(s0)
0x00000000000104e8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e8 <compress+200>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
0x00000000000104c8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c8 <compress+168>:	j	0x104cc <compress+172>
295	      hshift++;
=> 0x104cc <compress+172>:	lw	a0,-68(s0)
0x00000000000104d0	295	      hshift++;
=> 0x104d0 <compress+176>:	addi	a0,a0,1
0x00000000000104d4	295	      hshift++;
=> 0x104d4 <compress+180>:	sw	a0,-68(s0)
296	   }
=> 0x104d8 <compress+184>:	j	0x104dc <compress+188>
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104dc <compress+188>:	ld	a0,-24(s0)
0x00000000000104e0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e0 <compress+192>:	slli	a0,a0,0x1
0x00000000000104e4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e4 <compress+196>:	sd	a0,-24(s0)
0x00000000000104e8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e8 <compress+200>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
0x00000000000104c8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c8 <compress+168>:	j	0x104cc <compress+172>
295	      hshift++;
=> 0x104cc <compress+172>:	lw	a0,-68(s0)
0x00000000000104d0	295	      hshift++;
=> 0x104d0 <compress+176>:	addi	a0,a0,1
0x00000000000104d4	295	      hshift++;
=> 0x104d4 <compress+180>:	sw	a0,-68(s0)
296	   }
=> 0x104d8 <compress+184>:	j	0x104dc <compress+188>
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104dc <compress+188>:	ld	a0,-24(s0)
0x00000000000104e0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e0 <compress+192>:	slli	a0,a0,0x1
0x00000000000104e4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e4 <compress+196>:	sd	a0,-24(s0)
0x00000000000104e8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e8 <compress+200>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
0x00000000000104c8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c8 <compress+168>:	j	0x104cc <compress+172>
295	      hshift++;
=> 0x104cc <compress+172>:	lw	a0,-68(s0)
0x00000000000104d0	295	      hshift++;
=> 0x104d0 <compress+176>:	addi	a0,a0,1
0x00000000000104d4	295	      hshift++;
=> 0x104d4 <compress+180>:	sw	a0,-68(s0)
296	   }
=> 0x104d8 <compress+184>:	j	0x104dc <compress+188>
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104dc <compress+188>:	ld	a0,-24(s0)
0x00000000000104e0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e0 <compress+192>:	slli	a0,a0,0x1
0x00000000000104e4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e4 <compress+196>:	sd	a0,-24(s0)
0x00000000000104e8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e8 <compress+200>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
0x00000000000104c8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c8 <compress+168>:	j	0x104cc <compress+172>
295	      hshift++;
=> 0x104cc <compress+172>:	lw	a0,-68(s0)
0x00000000000104d0	295	      hshift++;
=> 0x104d0 <compress+176>:	addi	a0,a0,1
0x00000000000104d4	295	      hshift++;
=> 0x104d4 <compress+180>:	sw	a0,-68(s0)
296	   }
=> 0x104d8 <compress+184>:	j	0x104dc <compress+188>
293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104dc <compress+188>:	ld	a0,-24(s0)
0x00000000000104e0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e0 <compress+192>:	slli	a0,a0,0x1
0x00000000000104e4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e4 <compress+196>:	sd	a0,-24(s0)
0x00000000000104e8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104e8 <compress+200>:	j	0x104b8 <compress+152>
0x00000000000104b8	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104b8 <compress+152>:	ld	a0,-24(s0)
0x00000000000104bc	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104bc <compress+156>:	lui	a1,0x10
0x00000000000104c0	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c0 <compress+160>:	addiw	a1,a1,-1
0x00000000000104c4	293	   for ( fcode = (long) hsize;  fcode < 65536L; fcode *= 2L )
=> 0x104c4 <compress+164>:	blt	a1,a0,0x104ec <compress+204>
298	   hshift = 8 - hshift;		/* set hash code range bound */
=> 0x104ec <compress+204>:	lw	a0,-68(s0)
0x00000000000104f0	298	   hshift = 8 - hshift;		/* set hash code range bound */
=> 0x104f0 <compress+208>:	li	a1,8
0x00000000000104f4	298	   hshift = 8 - hshift;		/* set hash code range bound */
=> 0x104f4 <compress+212>:	sub	a0,a1,a0
0x00000000000104f8	298	   hshift = 8 - hshift;		/* set hash code range bound */
=> 0x104f8 <compress+216>:	sw	a0,-68(s0)
300	   hsize_reg = hsize;
=> 0x104fc <compress+220>:	ld	a0,-1968(gp)
0x0000000000010500	300	   hsize_reg = hsize;
=> 0x10500 <compress+224>:	sd	a0,-64(s0)
301	   cl_hash( (count_int) hsize_reg);		/* clear hash table */
=> 0x10504 <compress+228>:	ld	a0,-64(s0)
0x0000000000010508	301	   cl_hash( (count_int) hsize_reg);		/* clear hash table */
=> 0x10508 <compress+232>:	jal	ra,0x1082c <cl_hash>
cl_hash (hsize=102400) at libcompress.c:390
390	{
=> 0x1082c <cl_hash>:	addi	t6,t6,-16
0x0000000000010830	390	{
=> 0x10830 <cl_hash+4>:	sd	ra,0(t6)
0x0000000000010834	390	{
=> 0x10834 <cl_hash+8>:	st	zero,0(t6)
0x0000000000010838	390	{
=> 0x10838 <cl_hash+12>:	addi	sp,sp,-48
0x000000000001083c	390	{
=> 0x1083c <cl_hash+16>:	sd	ra,40(sp)
0x0000000000010840	390	{
=> 0x10840 <cl_hash+20>:	sd	s0,32(sp)
0x0000000000010844	390	{
=> 0x10844 <cl_hash+24>:	addi	s0,sp,48
0x0000000000010848	390	{
=> 0x10848 <cl_hash+28>:	sd	a0,-24(s0)
391	   register count_int *htab_p = htab+hsize;
=> 0x1084c <cl_hash+32>:	ld	a0,-24(s0)
0x0000000000010850	391	   register count_int *htab_p = htab+hsize;
=> 0x10850 <cl_hash+36>:	lui	a1,0x20
0x0000000000010854	391	   register count_int *htab_p = htab+hsize;
=> 0x10854 <cl_hash+40>:	addi	a1,a1,992
0x0000000000010858	391	   register count_int *htab_p = htab+hsize;
=> 0x10858 <cl_hash+44>:	slli	a0,a0,0x3
0x000000000001085c	391	   register count_int *htab_p = htab+hsize;
=> 0x1085c <cl_hash+48>:	add	a0,a0,a1
0x0000000000010860	391	   register count_int *htab_p = htab+hsize;
=> 0x10860 <cl_hash+52>:	sd	a0,-32(s0)
0x0000000000010864	391	   register count_int *htab_p = htab+hsize;
=> 0x10864 <cl_hash+56>:	li	a0,-1
393	   register long m1 = -1;
=> 0x10868 <cl_hash+60>:	sd	a0,-48(s0)
395	   i = hsize - 16;
=> 0x1086c <cl_hash+64>:	ld	a0,-24(s0)
0x0000000000010870	395	   i = hsize - 16;
=> 0x10870 <cl_hash+68>:	addi	a0,a0,-16
0x0000000000010874	395	   i = hsize - 16;
=> 0x10874 <cl_hash+72>:	sd	a0,-40(s0)
396	   do {				/* might use Sys V memset(3) here */
=> 0x10878 <cl_hash+76>:	j	0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
398	      *(htab_p-16) = m1;
=> 0x1087c <cl_hash+80>:	ld	a0,-48(s0)
0x0000000000010880	398	      *(htab_p-16) = m1;
=> 0x10880 <cl_hash+84>:	ld	a1,-32(s0)
0x0000000000010884	398	      *(htab_p-16) = m1;
=> 0x10884 <cl_hash+88>:	sd	a0,-128(a1)
399	      *(htab_p-15) = m1;
=> 0x10888 <cl_hash+92>:	ld	a0,-48(s0)
0x000000000001088c	399	      *(htab_p-15) = m1;
=> 0x1088c <cl_hash+96>:	ld	a1,-32(s0)
0x0000000000010890	399	      *(htab_p-15) = m1;
=> 0x10890 <cl_hash+100>:	sd	a0,-120(a1)
400	      *(htab_p-14) = m1;
=> 0x10894 <cl_hash+104>:	ld	a0,-48(s0)
0x0000000000010898	400	      *(htab_p-14) = m1;
=> 0x10898 <cl_hash+108>:	ld	a1,-32(s0)
0x000000000001089c	400	      *(htab_p-14) = m1;
=> 0x1089c <cl_hash+112>:	sd	a0,-112(a1)
401	      *(htab_p-13) = m1;
=> 0x108a0 <cl_hash+116>:	ld	a0,-48(s0)
0x00000000000108a4	401	      *(htab_p-13) = m1;
=> 0x108a4 <cl_hash+120>:	ld	a1,-32(s0)
0x00000000000108a8	401	      *(htab_p-13) = m1;
=> 0x108a8 <cl_hash+124>:	sd	a0,-104(a1)
402	      *(htab_p-12) = m1;
=> 0x108ac <cl_hash+128>:	ld	a0,-48(s0)
0x00000000000108b0	402	      *(htab_p-12) = m1;
=> 0x108b0 <cl_hash+132>:	ld	a1,-32(s0)
0x00000000000108b4	402	      *(htab_p-12) = m1;
=> 0x108b4 <cl_hash+136>:	sd	a0,-96(a1)
403	      *(htab_p-11) = m1;
=> 0x108b8 <cl_hash+140>:	ld	a0,-48(s0)
0x00000000000108bc	403	      *(htab_p-11) = m1;
=> 0x108bc <cl_hash+144>:	ld	a1,-32(s0)
0x00000000000108c0	403	      *(htab_p-11) = m1;
=> 0x108c0 <cl_hash+148>:	sd	a0,-88(a1)
404	      *(htab_p-10) = m1;
=> 0x108c4 <cl_hash+152>:	ld	a0,-48(s0)
0x00000000000108c8	404	      *(htab_p-10) = m1;
=> 0x108c8 <cl_hash+156>:	ld	a1,-32(s0)
0x00000000000108cc	404	      *(htab_p-10) = m1;
=> 0x108cc <cl_hash+160>:	sd	a0,-80(a1)
405	      *(htab_p-9) = m1;
=> 0x108d0 <cl_hash+164>:	ld	a0,-48(s0)
0x00000000000108d4	405	      *(htab_p-9) = m1;
=> 0x108d4 <cl_hash+168>:	ld	a1,-32(s0)
0x00000000000108d8	405	      *(htab_p-9) = m1;
=> 0x108d8 <cl_hash+172>:	sd	a0,-72(a1)
406	      *(htab_p-8) = m1;
=> 0x108dc <cl_hash+176>:	ld	a0,-48(s0)
0x00000000000108e0	406	      *(htab_p-8) = m1;
=> 0x108e0 <cl_hash+180>:	ld	a1,-32(s0)
0x00000000000108e4	406	      *(htab_p-8) = m1;
=> 0x108e4 <cl_hash+184>:	sd	a0,-64(a1)
407	      *(htab_p-7) = m1;
=> 0x108e8 <cl_hash+188>:	ld	a0,-48(s0)
0x00000000000108ec	407	      *(htab_p-7) = m1;
=> 0x108ec <cl_hash+192>:	ld	a1,-32(s0)
0x00000000000108f0	407	      *(htab_p-7) = m1;
=> 0x108f0 <cl_hash+196>:	sd	a0,-56(a1)
408	      *(htab_p-6) = m1;
=> 0x108f4 <cl_hash+200>:	ld	a0,-48(s0)
0x00000000000108f8	408	      *(htab_p-6) = m1;
=> 0x108f8 <cl_hash+204>:	ld	a1,-32(s0)
0x00000000000108fc	408	      *(htab_p-6) = m1;
=> 0x108fc <cl_hash+208>:	sd	a0,-48(a1)
409	      *(htab_p-5) = m1;
=> 0x10900 <cl_hash+212>:	ld	a0,-48(s0)
0x0000000000010904	409	      *(htab_p-5) = m1;
=> 0x10904 <cl_hash+216>:	ld	a1,-32(s0)
0x0000000000010908	409	      *(htab_p-5) = m1;
=> 0x10908 <cl_hash+220>:	sd	a0,-40(a1)
410	      *(htab_p-4) = m1;
=> 0x1090c <cl_hash+224>:	ld	a0,-48(s0)
0x0000000000010910	410	      *(htab_p-4) = m1;
=> 0x10910 <cl_hash+228>:	ld	a1,-32(s0)
0x0000000000010914	410	      *(htab_p-4) = m1;
=> 0x10914 <cl_hash+232>:	sd	a0,-32(a1)
411	      *(htab_p-3) = m1;
=> 0x10918 <cl_hash+236>:	ld	a0,-48(s0)
0x000000000001091c	411	      *(htab_p-3) = m1;
=> 0x1091c <cl_hash+240>:	ld	a1,-32(s0)
0x0000000000010920	411	      *(htab_p-3) = m1;
=> 0x10920 <cl_hash+244>:	sd	a0,-24(a1)
412	      *(htab_p-2) = m1;
=> 0x10924 <cl_hash+248>:	ld	a0,-48(s0)
0x0000000000010928	412	      *(htab_p-2) = m1;
=> 0x10928 <cl_hash+252>:	ld	a1,-32(s0)
0x000000000001092c	412	      *(htab_p-2) = m1;
=> 0x1092c <cl_hash+256>:	sd	a0,-16(a1)
413	      *(htab_p-1) = m1;
=> 0x10930 <cl_hash+260>:	ld	a0,-48(s0)
0x0000000000010934	413	      *(htab_p-1) = m1;
=> 0x10934 <cl_hash+264>:	ld	a1,-32(s0)
0x0000000000010938	413	      *(htab_p-1) = m1;
=> 0x10938 <cl_hash+268>:	sd	a0,-8(a1)
414	      htab_p -= 16;
=> 0x1093c <cl_hash+272>:	ld	a0,-32(s0)
0x0000000000010940	414	      htab_p -= 16;
=> 0x10940 <cl_hash+276>:	addi	a0,a0,-128
0x0000000000010944	414	      htab_p -= 16;
=> 0x10944 <cl_hash+280>:	sd	a0,-32(s0)
415	   } while ((i -= 16) >= 0);
=> 0x10948 <cl_hash+284>:	j	0x1094c <cl_hash+288>
0x000000000001094c	415	   } while ((i -= 16) >= 0);
=> 0x1094c <cl_hash+288>:	ld	a0,-40(s0)
0x0000000000010950	415	   } while ((i -= 16) >= 0);
=> 0x10950 <cl_hash+292>:	addi	a0,a0,-16
0x0000000000010954	415	   } while ((i -= 16) >= 0);
=> 0x10954 <cl_hash+296>:	sd	a0,-40(s0)
0x0000000000010958	415	   } while ((i -= 16) >= 0);
=> 0x10958 <cl_hash+300>:	li	a1,-1
0x000000000001095c	415	   } while ((i -= 16) >= 0);
=> 0x1095c <cl_hash+304>:	blt	a1,a0,0x1087c <cl_hash+80>
0x0000000000010960	415	   } while ((i -= 16) >= 0);
=> 0x10960 <cl_hash+308>:	j	0x10964 <cl_hash+312>
416	   for ( i += 16; i > 0; i-- ) {
=> 0x10964 <cl_hash+312>:	ld	a0,-40(s0)
0x0000000000010968	416	   for ( i += 16; i > 0; i-- ) {
=> 0x10968 <cl_hash+316>:	addi	a0,a0,16
0x000000000001096c	416	   for ( i += 16; i > 0; i-- ) {
=> 0x1096c <cl_hash+320>:	sd	a0,-40(s0)
0x0000000000010970	416	   for ( i += 16; i > 0; i-- ) {
=> 0x10970 <cl_hash+324>:	j	0x10974 <cl_hash+328>
0x0000000000010974	416	   for ( i += 16; i > 0; i-- ) {
=> 0x10974 <cl_hash+328>:	ld	a0,-40(s0)
0x0000000000010978	416	   for ( i += 16; i > 0; i-- ) {
=> 0x10978 <cl_hash+332>:	li	a1,1
0x000000000001097c	416	   for ( i += 16; i > 0; i-- ) {
=> 0x1097c <cl_hash+336>:	blt	a0,a1,0x109ac <cl_hash+384>
419	}
=> 0x109ac <cl_hash+384>:	ld	s0,32(sp)
0x00000000000109b0 in cl_hash (hsize=102400) at libcompress.c:419
419	}
=> 0x109b0 <cl_hash+388>:	ld	ra,40(sp)
0x00000000000109b4	419	}
=> 0x109b4 <cl_hash+392>:	addi	sp,sp,48
0x00000000000109b8	419	}
=> 0x109b8 <cl_hash+396>:	ld	ra,0(t6)
0x00000000000109bc	419	}
=> 0x109bc <cl_hash+400>:	addi	t6,t6,16
0x00000000000109c0	419	}
=> 0x109c0 <cl_hash+404>:	ret
compress () at libcompress.c:304
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1050c <compress+236>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d8	318	         goto nomatch;
=> 0x105d8 <compress+440>:	j	0x105dc <compress+444>
322	      disp = hsize_reg - i;		/* secondary hash (after G. Knott) */
=> 0x105dc <compress+444>:	ld	a0,-64(s0)
0x00000000000105e0	322	      disp = hsize_reg - i;		/* secondary hash (after G. Knott) */
=> 0x105e0 <compress+448>:	ld	a1,-32(s0)
0x00000000000105e4	322	      disp = hsize_reg - i;		/* secondary hash (after G. Knott) */
=> 0x105e4 <compress+452>:	sub	a0,a0,a1
0x00000000000105e8	322	      disp = hsize_reg - i;		/* secondary hash (after G. Knott) */
=> 0x105e8 <compress+456>:	sw	a0,-52(s0)
323	      if ( i == 0 ) {
=> 0x105ec <compress+460>:	ld	a0,-32(s0)
0x00000000000105f0	323	      if ( i == 0 ) {
=> 0x105f0 <compress+464>:	li	a1,0
0x00000000000105f4	323	      if ( i == 0 ) {
=> 0x105f4 <compress+468>:	bne	a0,a1,0x10608 <compress+488>
323	      if ( i == 0 ) {
=> 0x10608 <compress+488>:	j	0x1060c <compress+492>
329	      if ( (i -= disp) < 0 ) {  /* apsim_loop 111 11 */
=> 0x1060c <compress+492>:	lw	a0,-52(s0)
0x0000000000010610	329	      if ( (i -= disp) < 0 ) {  /* apsim_loop 111 11 */
=> 0x10610 <compress+496>:	ld	a1,-32(s0)
0x0000000000010614	329	      if ( (i -= disp) < 0 ) {  /* apsim_loop 111 11 */
=> 0x10614 <compress+500>:	sub	a0,a1,a0
0x0000000000010618	329	      if ( (i -= disp) < 0 ) {  /* apsim_loop 111 11 */
=> 0x10618 <compress+504>:	sd	a0,-32(s0)
0x000000000001061c	329	      if ( (i -= disp) < 0 ) {  /* apsim_loop 111 11 */
=> 0x1061c <compress+508>:	li	a1,-1
0x0000000000010620	329	      if ( (i -= disp) < 0 ) {  /* apsim_loop 111 11 */
=> 0x10620 <compress+512>:	blt	a1,a0,0x1063c <compress+540>
0x0000000000010624	329	      if ( (i -= disp) < 0 ) {  /* apsim_loop 111 11 */
=> 0x10624 <compress+516>:	j	0x10628 <compress+520>
330	         i += hsize_reg;
=> 0x10628 <compress+520>:	ld	a0,-64(s0)
0x000000000001062c	330	         i += hsize_reg;
=> 0x1062c <compress+524>:	ld	a1,-32(s0)
0x0000000000010630	330	         i += hsize_reg;
=> 0x10630 <compress+528>:	add	a0,a1,a0
0x0000000000010634	330	         i += hsize_reg;
=> 0x10634 <compress+532>:	sd	a0,-32(s0)
331	      }
=> 0x10638 <compress+536>:	j	0x1063c <compress+540>
333	      if ( htabof (i) == fcode ) {
=> 0x1063c <compress+540>:	ld	a0,-32(s0)
0x0000000000010640	333	      if ( htabof (i) == fcode ) {
=> 0x10640 <compress+544>:	lui	a1,0x20
0x0000000000010644	333	      if ( htabof (i) == fcode ) {
=> 0x10644 <compress+548>:	addi	a1,a1,992
0x0000000000010648	333	      if ( htabof (i) == fcode ) {
=> 0x10648 <compress+552>:	slli	a0,a0,0x3
0x000000000001064c	333	      if ( htabof (i) == fcode ) {
=> 0x1064c <compress+556>:	add	a0,a0,a1
0x0000000000010650	333	      if ( htabof (i) == fcode ) {
=> 0x10650 <compress+560>:	ld	a0,0(a0)
0x0000000000010654	333	      if ( htabof (i) == fcode ) {
=> 0x10654 <compress+564>:	ld	a1,-24(s0)
0x0000000000010658	333	      if ( htabof (i) == fcode ) {
=> 0x10658 <compress+568>:	bne	a0,a1,0x10680 <compress+608>
338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x10680 <compress+608>:	ld	a0,-32(s0)
0x0000000000010684	338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x10684 <compress+612>:	lui	a1,0x20
0x0000000000010688	338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x10688 <compress+616>:	addi	a1,a1,992
0x000000000001068c	338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x1068c <compress+620>:	slli	a0,a0,0x3
0x0000000000010690	338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x10690 <compress+624>:	add	a0,a0,a1
0x0000000000010694	338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x10694 <compress+628>:	ld	a0,0(a0)
0x0000000000010698	338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x10698 <compress+632>:	li	a1,1
0x000000000001069c	338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x1069c <compress+636>:	blt	a0,a1,0x106c4 <compress+676>
338	      if ( (long)htabof (i) > 0 && (++apsim_bound111 < in_count) )
=> 0x106c4 <compress+676>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
0x000000000001051c	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1051c <compress+252>:	j	0x10520 <compress+256>
0x0000000000010520	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10520 <compress+256>:	li	a0,0
306	      int apsim_bound111 = 0;
=> 0x10524 <compress+260>:	sw	a0,-72(s0)
308	      c = getbyte();   /* decrements InCnt */
=> 0x10528 <compress+264>:	jal	ra,0x10794 <getbyte>
getbyte () at libcompress.c:424
424	{
=> 0x10794 <getbyte>:	addi	t6,t6,-16
0x0000000000010798	424	{
=> 0x10798 <getbyte+4>:	sd	ra,0(t6)
0x000000000001079c	424	{
=> 0x1079c <getbyte+8>:	st	zero,0(t6)
0x00000000000107a0	424	{
=> 0x107a0 <getbyte+12>:	addi	sp,sp,-32
425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a4 <getbyte+16>:	sd	ra,24(sp)
0x00000000000107a8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107a8 <getbyte+20>:	sd	s0,16(sp)
0x00000000000107ac	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107ac <getbyte+24>:	addi	s0,sp,32
0x00000000000107b0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b0 <getbyte+28>:	lw	a0,-1860(gp)
0x00000000000107b4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b4 <getbyte+32>:	li	a1,1
0x00000000000107b8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107b8 <getbyte+36>:	blt	a0,a1,0x107fc <getbyte+104>
0x00000000000107bc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107bc <getbyte+40>:	j	0x107c0 <getbyte+44>
0x00000000000107c0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c0 <getbyte+44>:	lw	a1,-1856(gp)
0x00000000000107c4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c4 <getbyte+48>:	addi	a2,a1,-1
0x00000000000107c8	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107c8 <getbyte+52>:	sw	a2,-1856(gp)
0x00000000000107cc	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107cc <getbyte+56>:	li	a0,1
0x00000000000107d0	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d0 <getbyte+60>:	blt	a1,a0,0x107fc <getbyte+104>
0x00000000000107d4	425	   if( InCnt > 0 && (apsim_InCnt-- > 0)) {
=> 0x107d4 <getbyte+64>:	j	0x107d8 <getbyte+68>
426	      InCnt--;
=> 0x107d8 <getbyte+68>:	lw	a1,-1860(gp)
0x00000000000107dc	426	      InCnt--;
=> 0x107dc <getbyte+72>:	addi	a1,a1,-1
0x00000000000107e0	426	      InCnt--;
=> 0x107e0 <getbyte+76>:	sw	a1,-1860(gp)
427	      return( (unsigned int)*InBuff++ );
=> 0x107e4 <getbyte+80>:	ld	a1,-1848(gp)
0x00000000000107e8	427	      return( (unsigned int)*InBuff++ );
=> 0x107e8 <getbyte+84>:	addi	a2,a1,1
0x00000000000107ec	427	      return( (unsigned int)*InBuff++ );
=> 0x107ec <getbyte+88>:	sd	a2,-1848(gp)
0x00000000000107f0	427	      return( (unsigned int)*InBuff++ );
=> 0x107f0 <getbyte+92>:	lbu	a0,0(a1)
0x00000000000107f4	427	      return( (unsigned int)*InBuff++ );
=> 0x107f4 <getbyte+96>:	sw	a0,-20(s0)
0x00000000000107f8	427	      return( (unsigned int)*InBuff++ );
=> 0x107f8 <getbyte+100>:	j	0x10810 <getbyte+124>
431	}
=> 0x10810 <getbyte+124>:	lw	a0,-20(s0)
0x0000000000010814	431	}
=> 0x10814 <getbyte+128>:	ld	s0,16(sp)
0x0000000000010818 in getbyte () at libcompress.c:431
431	}
=> 0x10818 <getbyte+132>:	ld	ra,24(sp)
0x000000000001081c	431	}
=> 0x1081c <getbyte+136>:	addi	sp,sp,32
0x0000000000010820	431	}
=> 0x10820 <getbyte+140>:	ld	ra,0(t6)
0x0000000000010824	431	}
=> 0x10824 <getbyte+144>:	addi	t6,t6,16
0x0000000000010828	431	}
=> 0x10828 <getbyte+148>:	ret
0x000000000001052c in compress () at libcompress.c:308
308	      c = getbyte();   /* decrements InCnt */
=> 0x1052c <compress+268>:	sw	a0,-36(s0)
310	      in_count++;
=> 0x10530 <compress+272>:	ld	a1,-1936(gp)
0x0000000000010534	310	      in_count++;
=> 0x10534 <compress+276>:	addi	a1,a1,1
0x0000000000010538	310	      in_count++;
=> 0x10538 <compress+280>:	sd	a1,-1936(gp)
311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1053c <compress+284>:	lw	a0,-36(s0)
0x0000000000010540	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10540 <compress+288>:	lwu	a1,-1984(gp)
0x0000000000010544	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10544 <compress+292>:	sll	a0,a0,a1
0x0000000000010548	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10548 <compress+296>:	ld	a1,-48(s0)
0x000000000001054c	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x1054c <compress+300>:	add	a0,a0,a1
0x0000000000010550	311	      fcode = (long) (((long) c << maxbits) + ent);
=> 0x10550 <compress+304>:	sd	a0,-24(s0)
312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10554 <compress+308>:	lw	a0,-36(s0)
0x0000000000010558	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10558 <compress+312>:	lwu	a1,-68(s0)
0x000000000001055c	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x1055c <compress+316>:	sllw	a0,a0,a1
0x0000000000010560	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10560 <compress+320>:	ld	a1,-48(s0)
0x0000000000010564	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10564 <compress+324>:	xor	a0,a0,a1
0x0000000000010568	312	      i = ((c << hshift) ^ ent);	/* xor hashing */
=> 0x10568 <compress+328>:	sd	a0,-32(s0)
314	      if ( htabof (i) == fcode ) {
=> 0x1056c <compress+332>:	ld	a0,-32(s0)
0x0000000000010570	314	      if ( htabof (i) == fcode ) {
=> 0x10570 <compress+336>:	lui	a1,0x20
0x0000000000010574	314	      if ( htabof (i) == fcode ) {
=> 0x10574 <compress+340>:	addi	a1,a1,992
0x0000000000010578	314	      if ( htabof (i) == fcode ) {
=> 0x10578 <compress+344>:	slli	a0,a0,0x3
0x000000000001057c	314	      if ( htabof (i) == fcode ) {
=> 0x1057c <compress+348>:	add	a0,a0,a1
0x0000000000010580	314	      if ( htabof (i) == fcode ) {
=> 0x10580 <compress+352>:	ld	a0,0(a0)
0x0000000000010584	314	      if ( htabof (i) == fcode ) {
=> 0x10584 <compress+356>:	ld	a1,-24(s0)
0x0000000000010588	314	      if ( htabof (i) == fcode ) {
=> 0x10588 <compress+360>:	bne	a0,a1,0x105b0 <compress+400>
317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b0 <compress+400>:	ld	a0,-32(s0)
0x00000000000105b4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b4 <compress+404>:	lui	a1,0x20
0x00000000000105b8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105b8 <compress+408>:	addi	a1,a1,992
0x00000000000105bc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105bc <compress+412>:	slli	a0,a0,0x3
0x00000000000105c0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c0 <compress+416>:	add	a0,a0,a1
0x00000000000105c4	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c4 <compress+420>:	ld	a0,0(a0)
0x00000000000105c8	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105c8 <compress+424>:	li	a1,-1
0x00000000000105cc	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105cc <compress+428>:	blt	a1,a0,0x105d8 <compress+440>
0x00000000000105d0	317	      } else if ( (long)htabof (i) < 0 ) { /* empty slot */
=> 0x105d0 <compress+432>:	j	0x105d4 <compress+436>
318	         goto nomatch;
=> 0x105d4 <compress+436>:	j	0x106c8 <compress+680>
342	      out_count++;
=> 0x106c8 <compress+680>:	ld	a1,-1832(gp)
0x00000000000106cc	342	      out_count++;
=> 0x106cc <compress+684>:	addi	a1,a1,1
0x00000000000106d0	342	      out_count++;
=> 0x106d0 <compress+688>:	sd	a1,-1832(gp)
343	      ent = c;
=> 0x106d4 <compress+692>:	lw	a0,-36(s0)
0x00000000000106d8	343	      ent = c;
=> 0x106d8 <compress+696>:	sd	a0,-48(s0)
344	      if ( free_ent < maxmaxcode ) {
=> 0x106dc <compress+700>:	ld	a0,-1896(gp)
0x00000000000106e0	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e0 <compress+704>:	ld	a1,-1976(gp)
0x00000000000106e4	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e4 <compress+708>:	bge	a0,a1,0x10730 <compress+784>
0x00000000000106e8	344	      if ( free_ent < maxmaxcode ) {
=> 0x106e8 <compress+712>:	j	0x106ec <compress+716>
345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106ec <compress+716>:	ld	a1,-1896(gp)
0x00000000000106f0	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f0 <compress+720>:	addi	a2,a1,1
0x00000000000106f4	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f4 <compress+724>:	sd	a2,-1896(gp)
0x00000000000106f8	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106f8 <compress+728>:	ld	a0,-32(s0)
0x00000000000106fc	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x106fc <compress+732>:	lui	a2,0x21
0x0000000000010700	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10700 <compress+736>:	addi	a2,a2,96
0x0000000000010704	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10704 <compress+740>:	slli	a0,a0,0x1
0x0000000000010708	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x10708 <compress+744>:	add	a0,a0,a2
0x000000000001070c	345	         codetabof (i) = free_ent++;	        /* apsim_unknown codetab */
=> 0x1070c <compress+748>:	sh	a1,0(a0)
346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10710 <compress+752>:	ld	a0,-24(s0)
0x0000000000010714	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10714 <compress+756>:	ld	a1,-32(s0)
0x0000000000010718	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10718 <compress+760>:	lui	a2,0x20
0x000000000001071c	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x1071c <compress+764>:	addi	a2,a2,992
0x0000000000010720	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10720 <compress+768>:	slli	a1,a1,0x3
0x0000000000010724	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10724 <compress+772>:	add	a1,a1,a2
0x0000000000010728	346	         htabof (i) = fcode;			/* apsim_unknown htab */
=> 0x10728 <compress+776>:	sd	a0,0(a1)
347	      } else if ( ((count_int)in_count >= checkpoint) && (block_compress) ) {
=> 0x1072c <compress+780>:	j	0x1075c <compress+828>
304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x1075c <compress+828>:	j	0x10510 <compress+240>
0x0000000000010510	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10510 <compress+240>:	lw	a0,-1860(gp)
0x0000000000010514	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10514 <compress+244>:	li	a1,1
0x0000000000010518	304	   while ( InCnt > 0 )           /* apsim_loop 11 0 */
=> 0x10518 <compress+248>:	blt	a0,a1,0x10760 <compress+832>
352	   if(bytes_out > in_count) { /* exit(2) if no savings */
=> 0x10760 <compress+832>:	ld	a0,-1816(gp)
0x0000000000010764	352	   if(bytes_out > in_count) { /* exit(2) if no savings */
=> 0x10764 <compress+836>:	ld	a1,-1936(gp)
0x0000000000010768	352	   if(bytes_out > in_count) { /* exit(2) if no savings */
=> 0x10768 <compress+840>:	bge	a1,a0,0x1077c <compress+860>
355	   return;
=> 0x1077c <compress+860>:	ld	s0,64(sp)
0x0000000000010780 in compress () at libcompress.c:355
355	   return;
=> 0x10780 <compress+864>:	ld	ra,72(sp)
0x0000000000010784	355	   return;
=> 0x10784 <compress+868>:	addi	sp,sp,80
0x0000000000010788	355	   return;
=> 0x10788 <compress+872>:	ld	ra,0(t6)
0x000000000001078c	355	   return;
=> 0x1078c <compress+876>:	addi	t6,t6,16
0x0000000000010790	355	   return;
=> 0x10790 <compress+880>:	ret
0x0000000000010404 in benchmark () at libcompress.c:257
257	   compress();
=> 0x10404 <benchmark+100>:	li	a0,0
258	   return 0;
=> 0x10408 <benchmark+104>:	ld	s0,16(sp)
0x000000000001040c in benchmark () at libcompress.c:258
258	   return 0;
=> 0x1040c <benchmark+108>:	ld	ra,24(sp)
0x0000000000010410	258	   return 0;
=> 0x10410 <benchmark+112>:	addi	sp,sp,32
0x0000000000010414	258	   return 0;
=> 0x10414 <benchmark+116>:	ld	ra,0(t6)
0x0000000000010418	258	   return 0;
=> 0x10418 <benchmark+120>:	addi	t6,t6,16
0x000000000001041c	258	   return 0;
=> 0x1041c <benchmark+124>:	ret
0x0000000000010248 in main (argc=1, argv=0x3ffffffb78) at main.c:57
57	      result = benchmark ();
=> 0x10248 <main+184>:	sw	a0,-40(s0)
58	    }
=> 0x1024c <main+188>:	j	0x10250 <main+192>
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10250 <main+192>:	lw	a0,-36(s0)
0x0000000000010254	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10254 <main+196>:	addi	a0,a0,1
0x0000000000010258	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10258 <main+200>:	sw	a0,-36(s0)
0x000000000001025c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1025c <main+204>:	j	0x1022c <main+156>
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+156>:	lw	a0,-36(s0)
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+160>:	li	a1,0
0x0000000000010234	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10234 <main+164>:	blt	a1,a0,0x10260 <main+208>
60	  stop_trigger ();
=> 0x10260 <main+208>:	jal	ra,0x102f8 <stop_trigger>
stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:40
40	{
=> 0x102f8 <stop_trigger>:	addi	t6,t6,-16
0x00000000000102fc	40	{
=> 0x102fc <stop_trigger+4>:	sd	ra,0(t6)
0x0000000000010300	40	{
=> 0x10300 <stop_trigger+8>:	st	zero,0(t6)
0x0000000000010304	40	{
=> 0x10304 <stop_trigger+12>:	addi	sp,sp,-16
47	}
=> 0x10308 <stop_trigger+16>:	sd	ra,8(sp)
0x000000000001030c	47	}
=> 0x1030c <stop_trigger+20>:	sd	s0,0(sp)
0x0000000000010310	47	}
=> 0x10310 <stop_trigger+24>:	addi	s0,sp,16
0x0000000000010314	47	}
=> 0x10314 <stop_trigger+28>:	ld	s0,0(sp)
0x0000000000010318 in stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:47
47	}
=> 0x10318 <stop_trigger+32>:	ld	ra,8(sp)
0x000000000001031c	47	}
=> 0x1031c <stop_trigger+36>:	addi	sp,sp,16
0x0000000000010320	47	}
=> 0x10320 <stop_trigger+40>:	ld	ra,0(t6)
0x0000000000010324	47	}
=> 0x10324 <stop_trigger+44>:	addi	t6,t6,16
0x0000000000010328	47	}
=> 0x10328 <stop_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x10264 <main+212>:	lw	a0,-40(s0)
0x0000000000010268	64	  correct = verify_benchmark (result);
=> 0x10268 <main+216>:	jal	ra,0x1032c <verify_benchmark>
verify_benchmark (res=0) at libcompress.c:233
233	{
=> 0x1032c <verify_benchmark>:	addi	t6,t6,-16
0x0000000000010330	233	{
=> 0x10330 <verify_benchmark+4>:	sd	ra,0(t6)
0x0000000000010334	233	{
=> 0x10334 <verify_benchmark+8>:	st	zero,0(t6)
0x0000000000010338	233	{
=> 0x10338 <verify_benchmark+12>:	addi	sp,sp,-32
0x000000000001033c	233	{
=> 0x1033c <verify_benchmark+16>:	sd	ra,24(sp)
0x0000000000010340	233	{
=> 0x10340 <verify_benchmark+20>:	sd	s0,16(sp)
0x0000000000010344	233	{
=> 0x10344 <verify_benchmark+24>:	addi	s0,sp,32
0x0000000000010348	233	{
=> 0x10348 <verify_benchmark+28>:	mv	a1,a0
0x000000000001034c	233	{
=> 0x1034c <verify_benchmark+32>:	sw	a0,-20(s0)
0x0000000000010350	233	{
=> 0x10350 <verify_benchmark+36>:	li	a0,-1
234	  return -1;
=> 0x10354 <verify_benchmark+40>:	ld	s0,16(sp)
0x0000000000010358 in verify_benchmark (res=0) at libcompress.c:234
234	  return -1;
=> 0x10358 <verify_benchmark+44>:	ld	ra,24(sp)
0x000000000001035c	234	  return -1;
=> 0x1035c <verify_benchmark+48>:	addi	sp,sp,32
0x0000000000010360	234	  return -1;
=> 0x10360 <verify_benchmark+52>:	ld	ra,0(t6)
0x0000000000010364	234	  return -1;
=> 0x10364 <verify_benchmark+56>:	addi	t6,t6,16
0x0000000000010368	234	  return -1;
=> 0x10368 <verify_benchmark+60>:	ret
0x000000000001026c in main (argc=1, argv=0x3ffffffb78) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x1026c <main+220>:	sw	a0,-44(s0)
66	  free(a);
=> 0x10270 <main+224>:	ld	a0,-56(s0)
0x0000000000010274	66	  free(a);
=> 0x10274 <main+228>:	jal	ra,0x10fd4 <free>
0x0000000000010fd4 in free ()
=> 0x10fd4 <free>:	mv	a1,a0
0x0000000000010fd6 in free ()
=> 0x10fd6 <free+2>:	ld	a0,-1928(gp)
0x0000000000010fda in free ()
=> 0x10fda <free+6>:	j	0x13ab8 <_free_r>
0x0000000000013ab8 in _free_r ()
=> 0x13ab8 <_free_r>:	beqz	a1,0x13ba8 <_free_r+240>
0x0000000000013aba in _free_r ()
=> 0x13aba <_free_r+2>:	addi	sp,sp,-32
0x0000000000013abc in _free_r ()
=> 0x13abc <_free_r+4>:	sd	s0,16(sp)
0x0000000000013abe in _free_r ()
=> 0x13abe <_free_r+6>:	sd	s1,8(sp)
0x0000000000013ac0 in _free_r ()
=> 0x13ac0 <_free_r+8>:	mv	s0,a1
0x0000000000013ac2 in _free_r ()
=> 0x13ac2 <_free_r+10>:	mv	s1,a0
0x0000000000013ac4 in _free_r ()
=> 0x13ac4 <_free_r+12>:	sd	ra,24(sp)
0x0000000000013ac6 in _free_r ()
=> 0x13ac6 <_free_r+14>:	jal	ra,0x116b2 <__malloc_lock>
0x00000000000116b2 in __malloc_lock ()
=> 0x116b2 <__malloc_lock>:	ret
0x0000000000013aca in _free_r ()
=> 0x13aca <_free_r+18>:	ld	a0,-8(s0)
0x0000000000013ace in _free_r ()
=> 0x13ace <_free_r+22>:	addi	a4,s0,-16
0x0000000000013ad2 in _free_r ()
=> 0x13ad2 <_free_r+26>:	lui	a1,0x20
0x0000000000013ad6 in _free_r ()
=> 0x13ad6 <_free_r+30>:	andi	a5,a0,-2
0x0000000000013ada in _free_r ()
=> 0x13ada <_free_r+34>:	add	a2,a4,a5
0x0000000000013ade in _free_r ()
=> 0x13ade <_free_r+38>:	addi	a1,a1,-1920
0x0000000000013ae2 in _free_r ()
=> 0x13ae2 <_free_r+42>:	ld	a3,8(a2)
0x0000000000013ae4 in _free_r ()
=> 0x13ae4 <_free_r+44>:	ld	a6,16(a1)
0x0000000000013ae8 in _free_r ()
=> 0x13ae8 <_free_r+48>:	andi	a3,a3,-4
0x0000000000013aea in _free_r ()
=> 0x13aea <_free_r+50>:	beq	a6,a2,0x13c2e <_free_r+374>
0x0000000000013aee in _free_r ()
=> 0x13aee <_free_r+54>:	sd	a3,8(a2)
0x0000000000013af0 in _free_r ()
=> 0x13af0 <_free_r+56>:	andi	a0,a0,1
0x0000000000013af2 in _free_r ()
=> 0x13af2 <_free_r+58>:	add	a6,a2,a3
0x0000000000013af6 in _free_r ()
=> 0x13af6 <_free_r+62>:	bnez	a0,0x13b78 <_free_r+192>
0x0000000000013b78 in _free_r ()
=> 0x13b78 <_free_r+192>:	ld	a0,8(a6)
0x0000000000013b7c in _free_r ()
=> 0x13b7c <_free_r+196>:	andi	a0,a0,1
0x0000000000013b7e in _free_r ()
=> 0x13b7e <_free_r+198>:	bnez	a0,0x13baa <_free_r+242>
0x0000000000013baa in _free_r ()
=> 0x13baa <_free_r+242>:	ori	a3,a5,1
0x0000000000013bae in _free_r ()
=> 0x13bae <_free_r+246>:	sd	a3,-8(s0)
0x0000000000013bb2 in _free_r ()
=> 0x13bb2 <_free_r+250>:	sd	a5,0(a2)
0x0000000000013bb4 in _free_r ()
=> 0x13bb4 <_free_r+252>:	li	a3,511
0x0000000000013bb8 in _free_r ()
=> 0x13bb8 <_free_r+256>:	bgeu	a3,a5,0x13b3a <_free_r+130>
0x0000000000013bbc in _free_r ()
=> 0x13bbc <_free_r+260>:	srli	a3,a5,0x9
0x0000000000013bc0 in _free_r ()
=> 0x13bc0 <_free_r+264>:	li	a2,4
0x0000000000013bc2 in _free_r ()
=> 0x13bc2 <_free_r+266>:	bltu	a2,a3,0x13c60 <_free_r+424>
0x0000000000013c60 in _free_r ()
=> 0x13c60 <_free_r+424>:	li	a2,20
0x0000000000013c62 in _free_r ()
=> 0x13c62 <_free_r+426>:	bgeu	a2,a3,0x13c86 <_free_r+462>
0x0000000000013c66 in _free_r ()
=> 0x13c66 <_free_r+430>:	li	a2,84
0x0000000000013c6a in _free_r ()
=> 0x13c6a <_free_r+434>:	bltu	a2,a3,0x13cbe <_free_r+518>
0x0000000000013cbe in _free_r ()
=> 0x13cbe <_free_r+518>:	li	a2,340
0x0000000000013cc2 in _free_r ()
=> 0x13cc2 <_free_r+522>:	bltu	a2,a3,0x13cda <_free_r+546>
0x0000000000013cda in _free_r ()
=> 0x13cda <_free_r+546>:	li	a2,1364
0x0000000000013cde in _free_r ()
=> 0x13cde <_free_r+550>:	bltu	a2,a3,0x13cf6 <_free_r+574>
0x0000000000013cf6 in _free_r ()
=> 0x13cf6 <_free_r+574>:	li	a0,2032
0x0000000000013cfa in _free_r ()
=> 0x13cfa <_free_r+578>:	li	a2,126
0x0000000000013cfe in _free_r ()
=> 0x13cfe <_free_r+582>:	j	0x13bd8 <_free_r+288>
0x0000000000013bd8 in _free_r ()
=> 0x13bd8 <_free_r+288>:	add	a0,a0,a1
0x0000000000013bda in _free_r ()
=> 0x13bda <_free_r+290>:	ld	a3,0(a0)
0x0000000000013bdc in _free_r ()
=> 0x13bdc <_free_r+292>:	addi	a0,a0,-16
0x0000000000013bde in _free_r ()
=> 0x13bde <_free_r+294>:	beq	a0,a3,0x13ca8 <_free_r+496>
0x0000000000013ca8 in _free_r ()
=> 0x13ca8 <_free_r+496>:	ld	a6,8(a1)
0x0000000000013cac in _free_r ()
=> 0x13cac <_free_r+500>:	sraiw	a2,a2,0x2
0x0000000000013cb0 in _free_r ()
=> 0x13cb0 <_free_r+504>:	li	a5,1
0x0000000000013cb2 in _free_r ()
=> 0x13cb2 <_free_r+506>:	sll	a2,a5,a2
0x0000000000013cb6 in _free_r ()
=> 0x13cb6 <_free_r+510>:	or	a2,a2,a6
0x0000000000013cba in _free_r ()
=> 0x13cba <_free_r+514>:	sd	a2,8(a1)
0x0000000000013cbc in _free_r ()
=> 0x13cbc <_free_r+516>:	j	0x13bf2 <_free_r+314>
0x0000000000013bf2 in _free_r ()
=> 0x13bf2 <_free_r+314>:	sd	a0,24(a4)
0x0000000000013bf4 in _free_r ()
=> 0x13bf4 <_free_r+316>:	sd	a3,16(a4)
0x0000000000013bf6 in _free_r ()
=> 0x13bf6 <_free_r+318>:	ld	s0,16(sp)
0x0000000000013bf8 in _free_r ()
=> 0x13bf8 <_free_r+320>:	sd	a4,16(a0)
0x0000000000013bfa in _free_r ()
=> 0x13bfa <_free_r+322>:	ld	ra,24(sp)
0x0000000000013bfc in _free_r ()
=> 0x13bfc <_free_r+324>:	mv	a0,s1
0x0000000000013bfe in _free_r ()
=> 0x13bfe <_free_r+326>:	ld	s1,8(sp)
0x0000000000013c00 in _free_r ()
=> 0x13c00 <_free_r+328>:	sd	a4,24(a3)
0x0000000000013c02 in _free_r ()
=> 0x13c02 <_free_r+330>:	addi	sp,sp,32
0x0000000000013c04 in _free_r ()
=> 0x13c04 <_free_r+332>:	j	0x116b4 <__malloc_unlock>
0x00000000000116b4 in __malloc_unlock ()
=> 0x116b4 <__malloc_unlock>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:68
68	  return (!correct);
=> 0x10278 <main+232>:	lw	a0,-44(s0)
0x000000000001027c	68	  return (!correct);
=> 0x1027c <main+236>:	seqz	a0,a0
0x0000000000010280	68	  return (!correct);
=> 0x10280 <main+240>:	ld	s0,112(sp)
0x0000000000010284 in main (argc=<error reading variable: Cannot access memory at address 0x2aaabbdd08>, argv=<error reading variable: Cannot access memory at address 0x2aaabbdd00>) at main.c:68
68	  return (!correct);
=> 0x10284 <main+244>:	ld	ra,120(sp)
0x0000000000010288	68	  return (!correct);
=> 0x10288 <main+248>:	addi	sp,sp,128
0x000000000001028c	68	  return (!correct);
=> 0x1028c <main+252>:	ret
0x000000000001013a in _start ()
=> 0x1013a <_start+64>:	j	0x10f3c <exit>
0x0000000000010f3c in exit ()
=> 0x10f3c <exit>:	addi	sp,sp,-16
0x0000000000010f3e in exit ()
=> 0x10f3e <exit+2>:	li	a1,0
0x0000000000010f40 in exit ()
=> 0x10f40 <exit+4>:	sd	s0,0(sp)
0x0000000000010f42 in exit ()
=> 0x10f42 <exit+6>:	sd	ra,8(sp)
0x0000000000010f44 in exit ()
=> 0x10f44 <exit+8>:	mv	s0,a0
0x0000000000010f46 in exit ()
=> 0x10f46 <exit+10>:	jal	ra,0x13452 <__call_exitprocs>
0x0000000000013452 in __call_exitprocs ()
=> 0x13452 <__call_exitprocs>:	addi	sp,sp,-80
0x0000000000013454 in __call_exitprocs ()
=> 0x13454 <__call_exitprocs+2>:	sd	s4,32(sp)
0x0000000000013456 in __call_exitprocs ()
=> 0x13456 <__call_exitprocs+4>:	ld	s4,-2000(gp)
0x000000000001345a in __call_exitprocs ()
=> 0x1345a <__call_exitprocs+8>:	sd	s2,48(sp)
0x000000000001345c in __call_exitprocs ()
=> 0x1345c <__call_exitprocs+10>:	sd	ra,72(sp)
0x000000000001345e in __call_exitprocs ()
=> 0x1345e <__call_exitprocs+12>:	ld	s2,504(s4)
0x0000000000013462 in __call_exitprocs ()
=> 0x13462 <__call_exitprocs+16>:	sd	s0,64(sp)
0x0000000000013464 in __call_exitprocs ()
=> 0x13464 <__call_exitprocs+18>:	sd	s1,56(sp)
0x0000000000013466 in __call_exitprocs ()
=> 0x13466 <__call_exitprocs+20>:	sd	s3,40(sp)
0x0000000000013468 in __call_exitprocs ()
=> 0x13468 <__call_exitprocs+22>:	sd	s5,24(sp)
0x000000000001346a in __call_exitprocs ()
=> 0x1346a <__call_exitprocs+24>:	sd	s6,16(sp)
0x000000000001346c in __call_exitprocs ()
=> 0x1346c <__call_exitprocs+26>:	sd	s7,8(sp)
0x000000000001346e in __call_exitprocs ()
=> 0x1346e <__call_exitprocs+28>:	sd	s8,0(sp)
0x0000000000013470 in __call_exitprocs ()
=> 0x13470 <__call_exitprocs+30>:	beqz	s2,0x134a0 <__call_exitprocs+78>
0x0000000000013474 in __call_exitprocs ()
=> 0x13474 <__call_exitprocs+34>:	mv	s6,a0
0x0000000000013476 in __call_exitprocs ()
=> 0x13476 <__call_exitprocs+36>:	mv	s7,a1
0x0000000000013478 in __call_exitprocs ()
=> 0x13478 <__call_exitprocs+38>:	li	s5,1
0x000000000001347a in __call_exitprocs ()
=> 0x1347a <__call_exitprocs+40>:	li	s3,-1
0x000000000001347c in __call_exitprocs ()
=> 0x1347c <__call_exitprocs+42>:	lw	s1,8(s2)
0x0000000000013480 in __call_exitprocs ()
=> 0x13480 <__call_exitprocs+46>:	addiw	s0,s1,-1
0x0000000000013484 in __call_exitprocs ()
=> 0x13484 <__call_exitprocs+50>:	bltz	s0,0x134a0 <__call_exitprocs+78>
0x0000000000013488 in __call_exitprocs ()
=> 0x13488 <__call_exitprocs+54>:	slli	s1,s1,0x3
0x000000000001348a in __call_exitprocs ()
=> 0x1348a <__call_exitprocs+56>:	add	s1,s1,s2
0x000000000001348c in __call_exitprocs ()
=> 0x1348c <__call_exitprocs+58>:	beqz	s7,0x134b8 <__call_exitprocs+102>
0x00000000000134b8 in __call_exitprocs ()
=> 0x134b8 <__call_exitprocs+102>:	lw	a5,8(s2)
0x00000000000134bc in __call_exitprocs ()
=> 0x134bc <__call_exitprocs+106>:	ld	a4,8(s1)
0x00000000000134be in __call_exitprocs ()
=> 0x134be <__call_exitprocs+108>:	addiw	a5,a5,-1
0x00000000000134c0 in __call_exitprocs ()
=> 0x134c0 <__call_exitprocs+110>:	beq	a5,s0,0x13508 <__call_exitprocs+182>
0x0000000000013508 in __call_exitprocs ()
=> 0x13508 <__call_exitprocs+182>:	sw	s0,8(s2)
0x000000000001350c in __call_exitprocs ()
=> 0x1350c <__call_exitprocs+186>:	j	0x134c8 <__call_exitprocs+118>
0x00000000000134c8 in __call_exitprocs ()
=> 0x134c8 <__call_exitprocs+118>:	beqz	a4,0x13498 <__call_exitprocs+70>
0x00000000000134ca in __call_exitprocs ()
=> 0x134ca <__call_exitprocs+120>:	lw	a5,784(s2)
0x00000000000134ce in __call_exitprocs ()
=> 0x134ce <__call_exitprocs+124>:	sllw	a3,s5,s0
0x00000000000134d2 in __call_exitprocs ()
=> 0x134d2 <__call_exitprocs+128>:	lw	s8,8(s2)
0x00000000000134d6 in __call_exitprocs ()
=> 0x134d6 <__call_exitprocs+132>:	and	a5,a5,a3
0x00000000000134d8 in __call_exitprocs ()
=> 0x134d8 <__call_exitprocs+134>:	sext.w	a5,a5
0x00000000000134da in __call_exitprocs ()
=> 0x134da <__call_exitprocs+136>:	bnez	a5,0x134f4 <__call_exitprocs+162>
0x00000000000134dc in __call_exitprocs ()
=> 0x134dc <__call_exitprocs+138>:	jalr	a4
0x00000000000139aa in __libc_fini_array ()
=> 0x139aa <__libc_fini_array>:	addi	sp,sp,-32
0x00000000000139ac in __libc_fini_array ()
=> 0x139ac <__libc_fini_array+2>:	sd	s0,16(sp)
0x00000000000139ae in __libc_fini_array ()
=> 0x139ae <__libc_fini_array+4>:	lui	a5,0x1f
0x00000000000139b2 in __libc_fini_array ()
=> 0x139b2 <__libc_fini_array+8>:	lui	s0,0x1f
0x00000000000139b6 in __libc_fini_array ()
=> 0x139b6 <__libc_fini_array+12>:	addi	s0,s0,280
0x00000000000139ba in __libc_fini_array ()
=> 0x139ba <__libc_fini_array+16>:	addi	a5,a5,288
0x00000000000139be in __libc_fini_array ()
=> 0x139be <__libc_fini_array+20>:	sub	a5,a5,s0
0x00000000000139c0 in __libc_fini_array ()
=> 0x139c0 <__libc_fini_array+22>:	sd	s1,8(sp)
0x00000000000139c2 in __libc_fini_array ()
=> 0x139c2 <__libc_fini_array+24>:	sd	ra,24(sp)
0x00000000000139c4 in __libc_fini_array ()
=> 0x139c4 <__libc_fini_array+26>:	srai	s1,a5,0x3
0x00000000000139c8 in __libc_fini_array ()
=> 0x139c8 <__libc_fini_array+30>:	beqz	s1,0x139d8 <__libc_fini_array+46>
0x00000000000139ca in __libc_fini_array ()
=> 0x139ca <__libc_fini_array+32>:	addi	a5,a5,-8
0x00000000000139cc in __libc_fini_array ()
=> 0x139cc <__libc_fini_array+34>:	add	s0,s0,a5
0x00000000000139ce in __libc_fini_array ()
=> 0x139ce <__libc_fini_array+36>:	ld	a5,0(s0)
0x00000000000139d0 in __libc_fini_array ()
=> 0x139d0 <__libc_fini_array+38>:	addi	s1,s1,-1
0x00000000000139d2 in __libc_fini_array ()
=> 0x139d2 <__libc_fini_array+40>:	addi	s0,s0,-8
0x00000000000139d4 in __libc_fini_array ()
=> 0x139d4 <__libc_fini_array+42>:	jalr	a5
0x000000000001013e in __do_global_dtors_aux ()
=> 0x1013e <__do_global_dtors_aux>:	lbu	a4,-1736(gp)
0x0000000000010142 in __do_global_dtors_aux ()
=> 0x10142 <__do_global_dtors_aux+4>:	bnez	a4,0x10170 <__do_global_dtors_aux+50>
0x0000000000010144 in __do_global_dtors_aux ()
=> 0x10144 <__do_global_dtors_aux+6>:	addi	sp,sp,-16
0x0000000000010146 in __do_global_dtors_aux ()
=> 0x10146 <__do_global_dtors_aux+8>:	sd	s0,0(sp)
0x0000000000010148 in __do_global_dtors_aux ()
=> 0x10148 <__do_global_dtors_aux+10>:	mv	s0,a5
0x000000000001014a in __do_global_dtors_aux ()
=> 0x1014a <__do_global_dtors_aux+12>:	sd	ra,8(sp)
0x000000000001014c in __do_global_dtors_aux ()
=> 0x1014c <__do_global_dtors_aux+14>:	li	a5,0
0x0000000000010150 in __do_global_dtors_aux ()
=> 0x10150 <__do_global_dtors_aux+18>:	beqz	a5,0x10162 <__do_global_dtors_aux+36>
0x0000000000010162 in __do_global_dtors_aux ()
=> 0x10162 <__do_global_dtors_aux+36>:	li	a5,1
0x0000000000010164 in __do_global_dtors_aux ()
=> 0x10164 <__do_global_dtors_aux+38>:	ld	ra,8(sp)
0x0000000000010166 in __do_global_dtors_aux ()
=> 0x10166 <__do_global_dtors_aux+40>:	sb	a5,-1736(gp)
0x000000000001016a in __do_global_dtors_aux ()
=> 0x1016a <__do_global_dtors_aux+44>:	ld	s0,0(sp)
0x000000000001016c in __do_global_dtors_aux ()
=> 0x1016c <__do_global_dtors_aux+46>:	addi	sp,sp,16
0x000000000001016e in __do_global_dtors_aux ()
=> 0x1016e <__do_global_dtors_aux+48>:	ret
0x00000000000139d6 in __libc_fini_array ()
=> 0x139d6 <__libc_fini_array+44>:	bnez	s1,0x139ce <__libc_fini_array+36>
0x00000000000139d8 in __libc_fini_array ()
=> 0x139d8 <__libc_fini_array+46>:	ld	ra,24(sp)
0x00000000000139da in __libc_fini_array ()
=> 0x139da <__libc_fini_array+48>:	ld	s0,16(sp)
0x00000000000139dc in __libc_fini_array ()
=> 0x139dc <__libc_fini_array+50>:	ld	s1,8(sp)
0x00000000000139de in __libc_fini_array ()
=> 0x139de <__libc_fini_array+52>:	addi	sp,sp,32
0x00000000000139e0 in __libc_fini_array ()
=> 0x139e0 <__libc_fini_array+54>:	ret
0x00000000000134de in __call_exitprocs ()
=> 0x134de <__call_exitprocs+140>:	lw	a4,8(s2)
0x00000000000134e2 in __call_exitprocs ()
=> 0x134e2 <__call_exitprocs+144>:	ld	a5,504(s4)
0x00000000000134e6 in __call_exitprocs ()
=> 0x134e6 <__call_exitprocs+148>:	bne	a4,s8,0x134ee <__call_exitprocs+156>
0x00000000000134ea in __call_exitprocs ()
=> 0x134ea <__call_exitprocs+152>:	beq	a5,s2,0x13498 <__call_exitprocs+70>
0x0000000000013498 in __call_exitprocs ()
=> 0x13498 <__call_exitprocs+70>:	addiw	s0,s0,-1
0x000000000001349a in __call_exitprocs ()
=> 0x1349a <__call_exitprocs+72>:	addi	s1,s1,-8
0x000000000001349c in __call_exitprocs ()
=> 0x1349c <__call_exitprocs+74>:	bne	s0,s3,0x1348c <__call_exitprocs+58>
0x00000000000134a0 in __call_exitprocs ()
=> 0x134a0 <__call_exitprocs+78>:	ld	ra,72(sp)
0x00000000000134a2 in __call_exitprocs ()
=> 0x134a2 <__call_exitprocs+80>:	ld	s0,64(sp)
0x00000000000134a4 in __call_exitprocs ()
=> 0x134a4 <__call_exitprocs+82>:	ld	s1,56(sp)
0x00000000000134a6 in __call_exitprocs ()
=> 0x134a6 <__call_exitprocs+84>:	ld	s2,48(sp)
0x00000000000134a8 in __call_exitprocs ()
=> 0x134a8 <__call_exitprocs+86>:	ld	s3,40(sp)
0x00000000000134aa in __call_exitprocs ()
=> 0x134aa <__call_exitprocs+88>:	ld	s4,32(sp)
0x00000000000134ac in __call_exitprocs ()
=> 0x134ac <__call_exitprocs+90>:	ld	s5,24(sp)
0x00000000000134ae in __call_exitprocs ()
=> 0x134ae <__call_exitprocs+92>:	ld	s6,16(sp)
0x00000000000134b0 in __call_exitprocs ()
=> 0x134b0 <__call_exitprocs+94>:	ld	s7,8(sp)
0x00000000000134b2 in __call_exitprocs ()
=> 0x134b2 <__call_exitprocs+96>:	ld	s8,0(sp)
0x00000000000134b4 in __call_exitprocs ()
=> 0x134b4 <__call_exitprocs+98>:	addi	sp,sp,80
0x00000000000134b6 in __call_exitprocs ()
=> 0x134b6 <__call_exitprocs+100>:	ret
0x0000000000010f4a in exit ()
=> 0x10f4a <exit+14>:	ld	a0,-2000(gp)
0x0000000000010f4e in exit ()
=> 0x10f4e <exit+18>:	ld	a5,88(a0)
0x0000000000010f50 in exit ()
=> 0x10f50 <exit+20>:	beqz	a5,0x10f54 <exit+24>
0x0000000000010f52 in exit ()
=> 0x10f52 <exit+22>:	jalr	a5
0x000000000001372a in _cleanup_r ()
=> 0x1372a <_cleanup_r>:	lui	a1,0x1a
0x000000000001372c in _cleanup_r ()
=> 0x1372c <_cleanup_r+2>:	addi	a1,a1,-330
0x0000000000013730 in _cleanup_r ()
=> 0x13730 <_cleanup_r+6>:	j	0x13d8c <_fwalk_reent>
0x0000000000013d8c in _fwalk_reent ()
=> 0x13d8c <_fwalk_reent>:	addi	sp,sp,-80
0x0000000000013d8e in _fwalk_reent ()
=> 0x13d8e <_fwalk_reent+2>:	sd	s2,48(sp)
0x0000000000013d90 in _fwalk_reent ()
=> 0x13d90 <_fwalk_reent+4>:	sd	s3,40(sp)
0x0000000000013d92 in _fwalk_reent ()
=> 0x13d92 <_fwalk_reent+6>:	sd	s4,32(sp)
0x0000000000013d94 in _fwalk_reent ()
=> 0x13d94 <_fwalk_reent+8>:	sd	s5,24(sp)
0x0000000000013d96 in _fwalk_reent ()
=> 0x13d96 <_fwalk_reent+10>:	sd	s6,16(sp)
0x0000000000013d98 in _fwalk_reent ()
=> 0x13d98 <_fwalk_reent+12>:	sd	s7,8(sp)
0x0000000000013d9a in _fwalk_reent ()
=> 0x13d9a <_fwalk_reent+14>:	sd	s8,0(sp)
0x0000000000013d9c in _fwalk_reent ()
=> 0x13d9c <_fwalk_reent+16>:	sd	ra,72(sp)
0x0000000000013d9e in _fwalk_reent ()
=> 0x13d9e <_fwalk_reent+18>:	sd	s0,64(sp)
0x0000000000013da0 in _fwalk_reent ()
=> 0x13da0 <_fwalk_reent+20>:	sd	s1,56(sp)
0x0000000000013da2 in _fwalk_reent ()
=> 0x13da2 <_fwalk_reent+22>:	mv	s8,a0
0x0000000000013da4 in _fwalk_reent ()
=> 0x13da4 <_fwalk_reent+24>:	mv	s4,a1
0x0000000000013da6 in _fwalk_reent ()
=> 0x13da6 <_fwalk_reent+26>:	addi	s2,a0,1312
0x0000000000013daa in _fwalk_reent ()
=> 0x13daa <_fwalk_reent+30>:	li	s6,0
0x0000000000013dac in _fwalk_reent ()
=> 0x13dac <_fwalk_reent+32>:	li	s5,176
0x0000000000013db0 in _fwalk_reent ()
=> 0x13db0 <_fwalk_reent+36>:	li	s7,1
0x0000000000013db2 in _fwalk_reent ()
=> 0x13db2 <_fwalk_reent+38>:	li	s3,-1
0x0000000000013db4 in _fwalk_reent ()
=> 0x13db4 <_fwalk_reent+40>:	lw	a5,8(s2)
0x0000000000013db8 in _fwalk_reent ()
=> 0x13db8 <_fwalk_reent+44>:	ld	s0,16(s2)
0x0000000000013dbc in _fwalk_reent ()
=> 0x13dbc <_fwalk_reent+48>:	blez	a5,0x13df4 <_fwalk_reent+104>
0x0000000000013dc0 in _fwalk_reent ()
=> 0x13dc0 <_fwalk_reent+52>:	addiw	s1,a5,-1
0x0000000000013dc4 in _fwalk_reent ()
=> 0x13dc4 <_fwalk_reent+56>:	slli	s1,s1,0x20
0x0000000000013dc6 in _fwalk_reent ()
=> 0x13dc6 <_fwalk_reent+58>:	srli	s1,s1,0x20
0x0000000000013dc8 in _fwalk_reent ()
=> 0x13dc8 <_fwalk_reent+60>:	addi	s1,s1,1
0x0000000000013dca in _fwalk_reent ()
=> 0x13dca <_fwalk_reent+62>:	mul	s1,s1,s5
0x0000000000013dce in _fwalk_reent ()
=> 0x13dce <_fwalk_reent+66>:	add	s1,s1,s0
0x0000000000013dd0 in _fwalk_reent ()
=> 0x13dd0 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013dd4 in _fwalk_reent ()
=> 0x13dd4 <_fwalk_reent+72>:	bgeu	s7,a5,0x13dec <_fwalk_reent+96>
0x0000000000013dd8 in _fwalk_reent ()
=> 0x13dd8 <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013ddc in _fwalk_reent ()
=> 0x13ddc <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013dde in _fwalk_reent ()
=> 0x13dde <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013de0 in _fwalk_reent ()
=> 0x13de0 <_fwalk_reent+84>:	beq	a5,s3,0x13dec <_fwalk_reent+96>
0x0000000000013de4 in _fwalk_reent ()
=> 0x13de4 <_fwalk_reent+88>:	jalr	s4
0x0000000000019eb6 in _fclose_r ()
=> 0x19eb6 <_fclose_r>:	beqz	a1,0x19ef0 <_fclose_r+58>
0x0000000000019eb8 in _fclose_r ()
=> 0x19eb8 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019eba in _fclose_r ()
=> 0x19eba <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019ebc in _fclose_r ()
=> 0x19ebc <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019ebe in _fclose_r ()
=> 0x19ebe <_fclose_r+8>:	mv	s0,a0
0x0000000000019ec0 in _fclose_r ()
=> 0x19ec0 <_fclose_r+10>:	beqz	a0,0x19ec6 <_fclose_r+16>
0x0000000000019ec2 in _fclose_r ()
=> 0x19ec2 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019ec4 in _fclose_r ()
=> 0x19ec4 <_fclose_r+14>:	beqz	a5,0x19ee0 <_fclose_r+42>
0x0000000000019ec6 in _fclose_r ()
=> 0x19ec6 <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019eca in _fclose_r ()
=> 0x19eca <_fclose_r+20>:	bnez	a5,0x19ed6 <_fclose_r+32>
0x0000000000019ed6 in _fclose_r ()
=> 0x19ed6 <_fclose_r+32>:	mv	a0,s0
0x0000000000019ed8 in _fclose_r ()
=> 0x19ed8 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019eda in _fclose_r ()
=> 0x19eda <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019edc in _fclose_r ()
=> 0x19edc <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019ede in _fclose_r ()
=> 0x19ede <_fclose_r+40>:	j	0x19e36 <_fclose_r.part.0>
0x0000000000019e36 in _fclose_r.part.0 ()
=> 0x19e36 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019e38 in _fclose_r.part.0 ()
=> 0x19e38 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019e3a in _fclose_r.part.0 ()
=> 0x19e3a <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019e3c in _fclose_r.part.0 ()
=> 0x19e3c <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019e3e in _fclose_r.part.0 ()
=> 0x19e3e <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019e40 in _fclose_r.part.0 ()
=> 0x19e40 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019e42 in _fclose_r.part.0 ()
=> 0x19e42 <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019e44 in _fclose_r.part.0 ()
=> 0x19e44 <_fclose_r.part.0+14>:	jal	ra,0x13514 <__sflush_r>
0x0000000000013514 in __sflush_r ()
=> 0x13514 <__sflush_r>:	lh	a5,16(a1)
0x0000000000013518 in __sflush_r ()
=> 0x13518 <__sflush_r+4>:	addi	sp,sp,-48
0x000000000001351a in __sflush_r ()
=> 0x1351a <__sflush_r+6>:	sd	s0,32(sp)
0x000000000001351c in __sflush_r ()
=> 0x1351c <__sflush_r+8>:	sd	s3,8(sp)
0x000000000001351e in __sflush_r ()
=> 0x1351e <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000013520 in __sflush_r ()
=> 0x13520 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000013522 in __sflush_r ()
=> 0x13522 <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000013524 in __sflush_r ()
=> 0x13524 <__sflush_r+16>:	andi	a3,a5,8
0x0000000000013528 in __sflush_r ()
=> 0x13528 <__sflush_r+20>:	mv	s0,a1
0x000000000001352a in __sflush_r ()
=> 0x1352a <__sflush_r+22>:	mv	s3,a0
0x000000000001352c in __sflush_r ()
=> 0x1352c <__sflush_r+24>:	bnez	a3,0x135e0 <__sflush_r+204>
0x000000000001352e in __sflush_r ()
=> 0x1352e <__sflush_r+26>:	lui	a4,0x1
0x0000000000013530 in __sflush_r ()
=> 0x13530 <__sflush_r+28>:	addi	a4,a4,-2048
0x0000000000013534 in __sflush_r ()
=> 0x13534 <__sflush_r+32>:	lw	a3,8(a1)
0x0000000000013536 in __sflush_r ()
=> 0x13536 <__sflush_r+34>:	or	a5,a5,a4
0x0000000000013538 in __sflush_r ()
=> 0x13538 <__sflush_r+36>:	sh	a5,16(a1)
0x000000000001353c in __sflush_r ()
=> 0x1353c <__sflush_r+40>:	blez	a3,0x1363c <__sflush_r+296>
0x000000000001363c in __sflush_r ()
=> 0x1363c <__sflush_r+296>:	lw	a4,112(a1)
0x000000000001363e in __sflush_r ()
=> 0x1363e <__sflush_r+298>:	bgtz	a4,0x13540 <__sflush_r+44>
0x0000000000013642 in __sflush_r ()
=> 0x13642 <__sflush_r+302>:	j	0x135d0 <__sflush_r+188>
0x00000000000135d0 in __sflush_r ()
=> 0x135d0 <__sflush_r+188>:	li	a0,0
0x00000000000135d2 in __sflush_r ()
=> 0x135d2 <__sflush_r+190>:	ld	ra,40(sp)
0x00000000000135d4 in __sflush_r ()
=> 0x135d4 <__sflush_r+192>:	ld	s0,32(sp)
0x00000000000135d6 in __sflush_r ()
=> 0x135d6 <__sflush_r+194>:	ld	s1,24(sp)
0x00000000000135d8 in __sflush_r ()
=> 0x135d8 <__sflush_r+196>:	ld	s2,16(sp)
0x00000000000135da in __sflush_r ()
=> 0x135da <__sflush_r+198>:	ld	s3,8(sp)
0x00000000000135dc in __sflush_r ()
=> 0x135dc <__sflush_r+200>:	addi	sp,sp,48
0x00000000000135de in __sflush_r ()
=> 0x135de <__sflush_r+202>:	ret
0x0000000000019e48 in _fclose_r.part.0 ()
=> 0x19e48 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019e4a in _fclose_r.part.0 ()
=> 0x19e4a <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019e4c in _fclose_r.part.0 ()
=> 0x19e4c <_fclose_r.part.0+22>:	beqz	a5,0x19e58 <_fclose_r.part.0+34>
0x0000000000019e4e in _fclose_r.part.0 ()
=> 0x19e4e <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019e50 in _fclose_r.part.0 ()
=> 0x19e50 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019e52 in _fclose_r.part.0 ()
=> 0x19e52 <_fclose_r.part.0+28>:	jalr	a5
0x0000000000017140 in __sclose ()
=> 0x17140 <__sclose>:	lh	a1,18(a1)
0x0000000000017144 in __sclose ()
=> 0x17144 <__sclose+4>:	j	0x19dfa <_close_r>
0x0000000000019dfa in _close_r ()
=> 0x19dfa <_close_r>:	addi	sp,sp,-32
0x0000000000019dfc in _close_r ()
=> 0x19dfc <_close_r+2>:	sd	s0,16(sp)
0x0000000000019dfe in _close_r ()
=> 0x19dfe <_close_r+4>:	sd	s1,8(sp)
0x0000000000019e00 in _close_r ()
=> 0x19e00 <_close_r+6>:	mv	s0,a0
0x0000000000019e02 in _close_r ()
=> 0x19e02 <_close_r+8>:	mv	a0,a1
0x0000000000019e04 in _close_r ()
=> 0x19e04 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019e06 in _close_r ()
=> 0x19e06 <_close_r+12>:	sw	zero,-1752(gp)
0x0000000000019e0a in _close_r ()
=> 0x19e0a <_close_r+16>:	jal	ra,0x1bc62 <_close>
0x000000000001bc62 in _close ()
=> 0x1bc62 <_close>:	addi	sp,sp,-16
0x000000000001bc64 in _close ()
=> 0x1bc64 <_close+2>:	sd	ra,8(sp)
0x000000000001bc66 in _close ()
=> 0x1bc66 <_close+4>:	sd	s0,0(sp)
0x000000000001bc68 in _close ()
=> 0x1bc68 <_close+6>:	li	a7,57
0x000000000001bc6c in _close ()
=> 0x1bc6c <_close+10>:	ecall
0x000000000001bc70 in _close ()
=> 0x1bc70 <_close+14>:	mv	s0,a0
0x000000000001bc72 in _close ()
=> 0x1bc72 <_close+16>:	bltz	a0,0x1bc80 <_close+30>
0x000000000001bc76 in _close ()
=> 0x1bc76 <_close+20>:	sext.w	a0,a0
0x000000000001bc78 in _close ()
=> 0x1bc78 <_close+22>:	ld	ra,8(sp)
0x000000000001bc7a in _close ()
=> 0x1bc7a <_close+24>:	ld	s0,0(sp)
0x000000000001bc7c in _close ()
=> 0x1bc7c <_close+26>:	addi	sp,sp,16
0x000000000001bc7e in _close ()
=> 0x1bc7e <_close+28>:	ret
0x0000000000019e0e in _close_r ()
=> 0x19e0e <_close_r+20>:	li	a5,-1
0x0000000000019e10 in _close_r ()
=> 0x19e10 <_close_r+22>:	beq	a0,a5,0x19e1e <_close_r+36>
0x0000000000019e14 in _close_r ()
=> 0x19e14 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019e16 in _close_r ()
=> 0x19e16 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019e18 in _close_r ()
=> 0x19e18 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019e1a in _close_r ()
=> 0x19e1a <_close_r+32>:	addi	sp,sp,32
0x0000000000019e1c in _close_r ()
=> 0x19e1c <_close_r+34>:	ret
0x0000000000019e54 in _fclose_r.part.0 ()
=> 0x19e54 <_fclose_r.part.0+30>:	bltz	a0,0x19ea0 <_fclose_r.part.0+106>
0x0000000000019e58 in _fclose_r.part.0 ()
=> 0x19e58 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019e5c in _fclose_r.part.0 ()
=> 0x19e5c <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019e60 in _fclose_r.part.0 ()
=> 0x19e60 <_fclose_r.part.0+42>:	bnez	a5,0x19eac <_fclose_r.part.0+118>
0x0000000000019e62 in _fclose_r.part.0 ()
=> 0x19e62 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019e64 in _fclose_r.part.0 ()
=> 0x19e64 <_fclose_r.part.0+46>:	beqz	a1,0x19e78 <_fclose_r.part.0+66>
0x0000000000019e78 in _fclose_r.part.0 ()
=> 0x19e78 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019e7a in _fclose_r.part.0 ()
=> 0x19e7a <_fclose_r.part.0+68>:	beqz	a1,0x19e86 <_fclose_r.part.0+80>
0x0000000000019e86 in _fclose_r.part.0 ()
=> 0x19e86 <_fclose_r.part.0+80>:	jal	ra,0x1398a <__sfp_lock_acquire>
0x000000000001398a in __sfp_lock_acquire ()
=> 0x1398a <__sfp_lock_acquire>:	ret
0x0000000000019e8a in _fclose_r.part.0 ()
=> 0x19e8a <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019e8e in _fclose_r.part.0 ()
=> 0x19e8e <_fclose_r.part.0+88>:	jal	ra,0x1398c <__sfp_lock_release>
0x000000000001398c in __sfp_lock_release ()
=> 0x1398c <__sfp_lock_release>:	ret
0x0000000000019e92 in _fclose_r.part.0 ()
=> 0x19e92 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019e94 in _fclose_r.part.0 ()
=> 0x19e94 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019e96 in _fclose_r.part.0 ()
=> 0x19e96 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019e98 in _fclose_r.part.0 ()
=> 0x19e98 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019e9a in _fclose_r.part.0 ()
=> 0x19e9a <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019e9c in _fclose_r.part.0 ()
=> 0x19e9c <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019e9e in _fclose_r.part.0 ()
=> 0x19e9e <_fclose_r.part.0+104>:	ret
0x0000000000013de6 in _fwalk_reent ()
=> 0x13de6 <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013dea in _fwalk_reent ()
=> 0x13dea <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013dec in _fwalk_reent ()
=> 0x13dec <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013df0 in _fwalk_reent ()
=> 0x13df0 <_fwalk_reent+100>:	bne	s1,s0,0x13dd0 <_fwalk_reent+68>
0x0000000000013dd0 in _fwalk_reent ()
=> 0x13dd0 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013dd4 in _fwalk_reent ()
=> 0x13dd4 <_fwalk_reent+72>:	bgeu	s7,a5,0x13dec <_fwalk_reent+96>
0x0000000000013dd8 in _fwalk_reent ()
=> 0x13dd8 <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013ddc in _fwalk_reent ()
=> 0x13ddc <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013dde in _fwalk_reent ()
=> 0x13dde <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013de0 in _fwalk_reent ()
=> 0x13de0 <_fwalk_reent+84>:	beq	a5,s3,0x13dec <_fwalk_reent+96>
0x0000000000013de4 in _fwalk_reent ()
=> 0x13de4 <_fwalk_reent+88>:	jalr	s4
0x0000000000019eb6 in _fclose_r ()
=> 0x19eb6 <_fclose_r>:	beqz	a1,0x19ef0 <_fclose_r+58>
0x0000000000019eb8 in _fclose_r ()
=> 0x19eb8 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019eba in _fclose_r ()
=> 0x19eba <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019ebc in _fclose_r ()
=> 0x19ebc <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019ebe in _fclose_r ()
=> 0x19ebe <_fclose_r+8>:	mv	s0,a0
0x0000000000019ec0 in _fclose_r ()
=> 0x19ec0 <_fclose_r+10>:	beqz	a0,0x19ec6 <_fclose_r+16>
0x0000000000019ec2 in _fclose_r ()
=> 0x19ec2 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019ec4 in _fclose_r ()
=> 0x19ec4 <_fclose_r+14>:	beqz	a5,0x19ee0 <_fclose_r+42>
0x0000000000019ec6 in _fclose_r ()
=> 0x19ec6 <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019eca in _fclose_r ()
=> 0x19eca <_fclose_r+20>:	bnez	a5,0x19ed6 <_fclose_r+32>
0x0000000000019ed6 in _fclose_r ()
=> 0x19ed6 <_fclose_r+32>:	mv	a0,s0
0x0000000000019ed8 in _fclose_r ()
=> 0x19ed8 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019eda in _fclose_r ()
=> 0x19eda <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019edc in _fclose_r ()
=> 0x19edc <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019ede in _fclose_r ()
=> 0x19ede <_fclose_r+40>:	j	0x19e36 <_fclose_r.part.0>
0x0000000000019e36 in _fclose_r.part.0 ()
=> 0x19e36 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019e38 in _fclose_r.part.0 ()
=> 0x19e38 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019e3a in _fclose_r.part.0 ()
=> 0x19e3a <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019e3c in _fclose_r.part.0 ()
=> 0x19e3c <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019e3e in _fclose_r.part.0 ()
=> 0x19e3e <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019e40 in _fclose_r.part.0 ()
=> 0x19e40 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019e42 in _fclose_r.part.0 ()
=> 0x19e42 <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019e44 in _fclose_r.part.0 ()
=> 0x19e44 <_fclose_r.part.0+14>:	jal	ra,0x13514 <__sflush_r>
0x0000000000013514 in __sflush_r ()
=> 0x13514 <__sflush_r>:	lh	a5,16(a1)
0x0000000000013518 in __sflush_r ()
=> 0x13518 <__sflush_r+4>:	addi	sp,sp,-48
0x000000000001351a in __sflush_r ()
=> 0x1351a <__sflush_r+6>:	sd	s0,32(sp)
0x000000000001351c in __sflush_r ()
=> 0x1351c <__sflush_r+8>:	sd	s3,8(sp)
0x000000000001351e in __sflush_r ()
=> 0x1351e <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000013520 in __sflush_r ()
=> 0x13520 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000013522 in __sflush_r ()
=> 0x13522 <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000013524 in __sflush_r ()
=> 0x13524 <__sflush_r+16>:	andi	a3,a5,8
0x0000000000013528 in __sflush_r ()
=> 0x13528 <__sflush_r+20>:	mv	s0,a1
0x000000000001352a in __sflush_r ()
=> 0x1352a <__sflush_r+22>:	mv	s3,a0
0x000000000001352c in __sflush_r ()
=> 0x1352c <__sflush_r+24>:	bnez	a3,0x135e0 <__sflush_r+204>
0x00000000000135e0 in __sflush_r ()
=> 0x135e0 <__sflush_r+204>:	ld	s2,24(a1)
0x00000000000135e4 in __sflush_r ()
=> 0x135e4 <__sflush_r+208>:	beqz	s2,0x135d0 <__sflush_r+188>
0x00000000000135e8 in __sflush_r ()
=> 0x135e8 <__sflush_r+212>:	ld	s1,0(a1)
0x00000000000135ea in __sflush_r ()
=> 0x135ea <__sflush_r+214>:	slli	a4,a5,0x30
0x00000000000135ee in __sflush_r ()
=> 0x135ee <__sflush_r+218>:	srli	a4,a4,0x30
0x00000000000135f0 in __sflush_r ()
=> 0x135f0 <__sflush_r+220>:	andi	a4,a4,3
0x00000000000135f2 in __sflush_r ()
=> 0x135f2 <__sflush_r+222>:	sd	s2,0(a1)
0x00000000000135f6 in __sflush_r ()
=> 0x135f6 <__sflush_r+226>:	subw	s1,s1,s2
0x00000000000135fa in __sflush_r ()
=> 0x135fa <__sflush_r+230>:	li	a5,0
0x00000000000135fc in __sflush_r ()
=> 0x135fc <__sflush_r+232>:	bnez	a4,0x13600 <__sflush_r+236>
0x0000000000013600 in __sflush_r ()
=> 0x13600 <__sflush_r+236>:	sw	a5,12(s0)
0x0000000000013602 in __sflush_r ()
=> 0x13602 <__sflush_r+238>:	bgtz	s1,0x1360e <__sflush_r+250>
0x0000000000013606 in __sflush_r ()
=> 0x13606 <__sflush_r+242>:	j	0x135d0 <__sflush_r+188>
0x00000000000135d0 in __sflush_r ()
=> 0x135d0 <__sflush_r+188>:	li	a0,0
0x00000000000135d2 in __sflush_r ()
=> 0x135d2 <__sflush_r+190>:	ld	ra,40(sp)
0x00000000000135d4 in __sflush_r ()
=> 0x135d4 <__sflush_r+192>:	ld	s0,32(sp)
0x00000000000135d6 in __sflush_r ()
=> 0x135d6 <__sflush_r+194>:	ld	s1,24(sp)
0x00000000000135d8 in __sflush_r ()
=> 0x135d8 <__sflush_r+196>:	ld	s2,16(sp)
0x00000000000135da in __sflush_r ()
=> 0x135da <__sflush_r+198>:	ld	s3,8(sp)
0x00000000000135dc in __sflush_r ()
=> 0x135dc <__sflush_r+200>:	addi	sp,sp,48
0x00000000000135de in __sflush_r ()
=> 0x135de <__sflush_r+202>:	ret
0x0000000000019e48 in _fclose_r.part.0 ()
=> 0x19e48 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019e4a in _fclose_r.part.0 ()
=> 0x19e4a <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019e4c in _fclose_r.part.0 ()
=> 0x19e4c <_fclose_r.part.0+22>:	beqz	a5,0x19e58 <_fclose_r.part.0+34>
0x0000000000019e4e in _fclose_r.part.0 ()
=> 0x19e4e <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019e50 in _fclose_r.part.0 ()
=> 0x19e50 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019e52 in _fclose_r.part.0 ()
=> 0x19e52 <_fclose_r.part.0+28>:	jalr	a5
0x0000000000017140 in __sclose ()
=> 0x17140 <__sclose>:	lh	a1,18(a1)
0x0000000000017144 in __sclose ()
=> 0x17144 <__sclose+4>:	j	0x19dfa <_close_r>
0x0000000000019dfa in _close_r ()
=> 0x19dfa <_close_r>:	addi	sp,sp,-32
0x0000000000019dfc in _close_r ()
=> 0x19dfc <_close_r+2>:	sd	s0,16(sp)
0x0000000000019dfe in _close_r ()
=> 0x19dfe <_close_r+4>:	sd	s1,8(sp)
0x0000000000019e00 in _close_r ()
=> 0x19e00 <_close_r+6>:	mv	s0,a0
0x0000000000019e02 in _close_r ()
=> 0x19e02 <_close_r+8>:	mv	a0,a1
0x0000000000019e04 in _close_r ()
=> 0x19e04 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019e06 in _close_r ()
=> 0x19e06 <_close_r+12>:	sw	zero,-1752(gp)
0x0000000000019e0a in _close_r ()
=> 0x19e0a <_close_r+16>:	jal	ra,0x1bc62 <_close>
0x000000000001bc62 in _close ()
=> 0x1bc62 <_close>:	addi	sp,sp,-16
0x000000000001bc64 in _close ()
=> 0x1bc64 <_close+2>:	sd	ra,8(sp)
0x000000000001bc66 in _close ()
=> 0x1bc66 <_close+4>:	sd	s0,0(sp)
0x000000000001bc68 in _close ()
=> 0x1bc68 <_close+6>:	li	a7,57
0x000000000001bc6c in _close ()
=> 0x1bc6c <_close+10>:	ecall
0x000000000001bc70 in _close ()
=> 0x1bc70 <_close+14>:	mv	s0,a0
0x000000000001bc72 in _close ()
=> 0x1bc72 <_close+16>:	bltz	a0,0x1bc80 <_close+30>
0x000000000001bc76 in _close ()
=> 0x1bc76 <_close+20>:	sext.w	a0,a0
0x000000000001bc78 in _close ()
=> 0x1bc78 <_close+22>:	ld	ra,8(sp)
0x000000000001bc7a in _close ()
=> 0x1bc7a <_close+24>:	ld	s0,0(sp)
0x000000000001bc7c in _close ()
=> 0x1bc7c <_close+26>:	addi	sp,sp,16
0x000000000001bc7e in _close ()
=> 0x1bc7e <_close+28>:	ret
0x0000000000019e0e in _close_r ()
=> 0x19e0e <_close_r+20>:	li	a5,-1
0x0000000000019e10 in _close_r ()
=> 0x19e10 <_close_r+22>:	beq	a0,a5,0x19e1e <_close_r+36>
0x0000000000019e14 in _close_r ()
=> 0x19e14 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019e16 in _close_r ()
=> 0x19e16 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019e18 in _close_r ()
=> 0x19e18 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019e1a in _close_r ()
=> 0x19e1a <_close_r+32>:	addi	sp,sp,32
0x0000000000019e1c in _close_r ()
=> 0x19e1c <_close_r+34>:	ret
0x0000000000019e54 in _fclose_r.part.0 ()
=> 0x19e54 <_fclose_r.part.0+30>:	bltz	a0,0x19ea0 <_fclose_r.part.0+106>
0x0000000000019e58 in _fclose_r.part.0 ()
=> 0x19e58 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019e5c in _fclose_r.part.0 ()
=> 0x19e5c <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019e60 in _fclose_r.part.0 ()
=> 0x19e60 <_fclose_r.part.0+42>:	bnez	a5,0x19eac <_fclose_r.part.0+118>
0x0000000000019eac in _fclose_r.part.0 ()
=> 0x19eac <_fclose_r.part.0+118>:	ld	a1,24(s0)
0x0000000000019eae in _fclose_r.part.0 ()
=> 0x19eae <_fclose_r.part.0+120>:	mv	a0,s1
0x0000000000019eb0 in _fclose_r.part.0 ()
=> 0x19eb0 <_fclose_r.part.0+122>:	jal	ra,0x13ab8 <_free_r>
0x0000000000013ab8 in _free_r ()
=> 0x13ab8 <_free_r>:	beqz	a1,0x13ba8 <_free_r+240>
0x0000000000013aba in _free_r ()
=> 0x13aba <_free_r+2>:	addi	sp,sp,-32
0x0000000000013abc in _free_r ()
=> 0x13abc <_free_r+4>:	sd	s0,16(sp)
0x0000000000013abe in _free_r ()
=> 0x13abe <_free_r+6>:	sd	s1,8(sp)
0x0000000000013ac0 in _free_r ()
=> 0x13ac0 <_free_r+8>:	mv	s0,a1
0x0000000000013ac2 in _free_r ()
=> 0x13ac2 <_free_r+10>:	mv	s1,a0
0x0000000000013ac4 in _free_r ()
=> 0x13ac4 <_free_r+12>:	sd	ra,24(sp)
0x0000000000013ac6 in _free_r ()
=> 0x13ac6 <_free_r+14>:	jal	ra,0x116b2 <__malloc_lock>
0x00000000000116b2 in __malloc_lock ()
=> 0x116b2 <__malloc_lock>:	ret
0x0000000000013aca in _free_r ()
=> 0x13aca <_free_r+18>:	ld	a0,-8(s0)
0x0000000000013ace in _free_r ()
=> 0x13ace <_free_r+22>:	addi	a4,s0,-16
0x0000000000013ad2 in _free_r ()
=> 0x13ad2 <_free_r+26>:	lui	a1,0x20
0x0000000000013ad6 in _free_r ()
=> 0x13ad6 <_free_r+30>:	andi	a5,a0,-2
0x0000000000013ada in _free_r ()
=> 0x13ada <_free_r+34>:	add	a2,a4,a5
0x0000000000013ade in _free_r ()
=> 0x13ade <_free_r+38>:	addi	a1,a1,-1920
0x0000000000013ae2 in _free_r ()
=> 0x13ae2 <_free_r+42>:	ld	a3,8(a2)
0x0000000000013ae4 in _free_r ()
=> 0x13ae4 <_free_r+44>:	ld	a6,16(a1)
0x0000000000013ae8 in _free_r ()
=> 0x13ae8 <_free_r+48>:	andi	a3,a3,-4
0x0000000000013aea in _free_r ()
=> 0x13aea <_free_r+50>:	beq	a6,a2,0x13c2e <_free_r+374>
0x0000000000013c2e in _free_r ()
=> 0x13c2e <_free_r+374>:	andi	a0,a0,1
0x0000000000013c30 in _free_r ()
=> 0x13c30 <_free_r+376>:	add	a5,a5,a3
0x0000000000013c32 in _free_r ()
=> 0x13c32 <_free_r+378>:	bnez	a0,0x13c44 <_free_r+396>
0x0000000000013c34 in _free_r ()
=> 0x13c34 <_free_r+380>:	ld	a0,-16(s0)
0x0000000000013c38 in _free_r ()
=> 0x13c38 <_free_r+384>:	sub	a4,a4,a0
0x0000000000013c3a in _free_r ()
=> 0x13c3a <_free_r+386>:	ld	a3,24(a4)
0x0000000000013c3c in _free_r ()
=> 0x13c3c <_free_r+388>:	ld	a2,16(a4)
0x0000000000013c3e in _free_r ()
=> 0x13c3e <_free_r+390>:	add	a5,a5,a0
0x0000000000013c40 in _free_r ()
=> 0x13c40 <_free_r+392>:	sd	a3,24(a2)
0x0000000000013c42 in _free_r ()
=> 0x13c42 <_free_r+394>:	sd	a2,16(a3)
0x0000000000013c44 in _free_r ()
=> 0x13c44 <_free_r+396>:	ori	a2,a5,1
0x0000000000013c48 in _free_r ()
=> 0x13c48 <_free_r+400>:	ld	a3,-1912(gp)
0x0000000000013c4c in _free_r ()
=> 0x13c4c <_free_r+404>:	sd	a2,8(a4)
0x0000000000013c4e in _free_r ()
=> 0x13c4e <_free_r+406>:	sd	a4,16(a1)
0x0000000000013c50 in _free_r ()
=> 0x13c50 <_free_r+408>:	bltu	a5,a3,0x13b6a <_free_r+178>
0x0000000000013c54 in _free_r ()
=> 0x13c54 <_free_r+412>:	ld	a1,-1768(gp)
0x0000000000013c58 in _free_r ()
=> 0x13c58 <_free_r+416>:	mv	a0,s1
0x0000000000013c5a in _free_r ()
=> 0x13c5a <_free_r+418>:	jal	ra,0x139e2 <_malloc_trim_r>
0x00000000000139e2 in _malloc_trim_r ()
=> 0x139e2 <_malloc_trim_r>:	addi	sp,sp,-48
0x00000000000139e4 in _malloc_trim_r ()
=> 0x139e4 <_malloc_trim_r+2>:	sd	s3,8(sp)
0x00000000000139e6 in _malloc_trim_r ()
=> 0x139e6 <_malloc_trim_r+4>:	lui	s3,0x20
0x00000000000139ea in _malloc_trim_r ()
=> 0x139ea <_malloc_trim_r+8>:	sd	s0,32(sp)
0x00000000000139ec in _malloc_trim_r ()
=> 0x139ec <_malloc_trim_r+10>:	sd	s1,24(sp)
0x00000000000139ee in _malloc_trim_r ()
=> 0x139ee <_malloc_trim_r+12>:	sd	s2,16(sp)
0x00000000000139f0 in _malloc_trim_r ()
=> 0x139f0 <_malloc_trim_r+14>:	sd	s4,0(sp)
0x00000000000139f2 in _malloc_trim_r ()
=> 0x139f2 <_malloc_trim_r+16>:	sd	ra,40(sp)
0x00000000000139f4 in _malloc_trim_r ()
=> 0x139f4 <_malloc_trim_r+18>:	mv	s4,a1
0x00000000000139f6 in _malloc_trim_r ()
=> 0x139f6 <_malloc_trim_r+20>:	mv	s2,a0
0x00000000000139f8 in _malloc_trim_r ()
=> 0x139f8 <_malloc_trim_r+22>:	addi	s3,s3,-1920
0x00000000000139fc in _malloc_trim_r ()
=> 0x139fc <_malloc_trim_r+26>:	jal	ra,0x116b2 <__malloc_lock>
0x00000000000116b2 in __malloc_lock ()
=> 0x116b2 <__malloc_lock>:	ret
0x0000000000013a00 in _malloc_trim_r ()
=> 0x13a00 <_malloc_trim_r+30>:	ld	a4,16(s3)
0x0000000000013a04 in _malloc_trim_r ()
=> 0x13a04 <_malloc_trim_r+34>:	lui	a5,0x1
0x0000000000013a06 in _malloc_trim_r ()
=> 0x13a06 <_malloc_trim_r+36>:	addi	s0,a5,-33
0x0000000000013a0a in _malloc_trim_r ()
=> 0x13a0a <_malloc_trim_r+40>:	ld	s1,8(a4)
0x0000000000013a0c in _malloc_trim_r ()
=> 0x13a0c <_malloc_trim_r+42>:	sub	s0,s0,s4
0x0000000000013a10 in _malloc_trim_r ()
=> 0x13a10 <_malloc_trim_r+46>:	andi	s1,s1,-4
0x0000000000013a12 in _malloc_trim_r ()
=> 0x13a12 <_malloc_trim_r+48>:	add	s0,s0,s1
0x0000000000013a14 in _malloc_trim_r ()
=> 0x13a14 <_malloc_trim_r+50>:	srli	s0,s0,0xc
0x0000000000013a16 in _malloc_trim_r ()
=> 0x13a16 <_malloc_trim_r+52>:	addi	s0,s0,-1
0x0000000000013a18 in _malloc_trim_r ()
=> 0x13a18 <_malloc_trim_r+54>:	slli	s0,s0,0xc
0x0000000000013a1a in _malloc_trim_r ()
=> 0x13a1a <_malloc_trim_r+56>:	blt	s0,a5,0x13a30 <_malloc_trim_r+78>
0x0000000000013a1e in _malloc_trim_r ()
=> 0x13a1e <_malloc_trim_r+60>:	li	a1,0
0x0000000000013a20 in _malloc_trim_r ()
=> 0x13a20 <_malloc_trim_r+62>:	mv	a0,s2
0x0000000000013a22 in _malloc_trim_r ()
=> 0x13a22 <_malloc_trim_r+64>:	jal	ra,0x11704 <_sbrk_r>
0x0000000000011704 in _sbrk_r ()
=> 0x11704 <_sbrk_r>:	addi	sp,sp,-32
0x0000000000011706 in _sbrk_r ()
=> 0x11706 <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000011708 in _sbrk_r ()
=> 0x11708 <_sbrk_r+4>:	sd	s1,8(sp)
0x000000000001170a in _sbrk_r ()
=> 0x1170a <_sbrk_r+6>:	mv	s0,a0
0x000000000001170c in _sbrk_r ()
=> 0x1170c <_sbrk_r+8>:	mv	a0,a1
0x000000000001170e in _sbrk_r ()
=> 0x1170e <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000011710 in _sbrk_r ()
=> 0x11710 <_sbrk_r+12>:	sw	zero,-1752(gp)
0x0000000000011714 in _sbrk_r ()
=> 0x11714 <_sbrk_r+16>:	jal	ra,0x1bd86 <_sbrk>
0x000000000001bd86 in _sbrk ()
=> 0x1bd86 <_sbrk>:	ld	a4,-1744(gp)
0x000000000001bd8a in _sbrk ()
=> 0x1bd8a <_sbrk+4>:	addi	sp,sp,-16
0x000000000001bd8c in _sbrk ()
=> 0x1bd8c <_sbrk+6>:	sd	ra,8(sp)
0x000000000001bd8e in _sbrk ()
=> 0x1bd8e <_sbrk+8>:	mv	a5,a0
0x000000000001bd90 in _sbrk ()
=> 0x1bd90 <_sbrk+10>:	bnez	a4,0x1bda8 <_sbrk+34>
0x000000000001bda8 in _sbrk ()
=> 0x1bda8 <_sbrk+34>:	li	a7,214
0x000000000001bdac in _sbrk ()
=> 0x1bdac <_sbrk+38>:	add	a0,a5,a4
0x000000000001bdb0 in _sbrk ()
=> 0x1bdb0 <_sbrk+42>:	ecall
0x000000000001bdb4 in _sbrk ()
=> 0x1bdb4 <_sbrk+46>:	ld	a4,-1744(gp)
0x000000000001bdb8 in _sbrk ()
=> 0x1bdb8 <_sbrk+50>:	add	a5,a5,a4
0x000000000001bdba in _sbrk ()
=> 0x1bdba <_sbrk+52>:	bne	a0,a5,0x1bdca <_sbrk+68>
0x000000000001bdbe in _sbrk ()
=> 0x1bdbe <_sbrk+56>:	ld	ra,8(sp)
0x000000000001bdc0 in _sbrk ()
=> 0x1bdc0 <_sbrk+58>:	sd	a0,-1744(gp)
0x000000000001bdc4 in _sbrk ()
=> 0x1bdc4 <_sbrk+62>:	mv	a0,a4
0x000000000001bdc6 in _sbrk ()
=> 0x1bdc6 <_sbrk+64>:	addi	sp,sp,16
0x000000000001bdc8 in _sbrk ()
=> 0x1bdc8 <_sbrk+66>:	ret
0x0000000000011718 in _sbrk_r ()
=> 0x11718 <_sbrk_r+20>:	li	a5,-1
0x000000000001171a in _sbrk_r ()
=> 0x1171a <_sbrk_r+22>:	beq	a0,a5,0x11728 <_sbrk_r+36>
0x000000000001171e in _sbrk_r ()
=> 0x1171e <_sbrk_r+26>:	ld	ra,24(sp)
0x0000000000011720 in _sbrk_r ()
=> 0x11720 <_sbrk_r+28>:	ld	s0,16(sp)
0x0000000000011722 in _sbrk_r ()
=> 0x11722 <_sbrk_r+30>:	ld	s1,8(sp)
0x0000000000011724 in _sbrk_r ()
=> 0x11724 <_sbrk_r+32>:	addi	sp,sp,32
0x0000000000011726 in _sbrk_r ()
=> 0x11726 <_sbrk_r+34>:	ret
0x0000000000013a26 in _malloc_trim_r ()
=> 0x13a26 <_malloc_trim_r+68>:	ld	a5,16(s3)
0x0000000000013a2a in _malloc_trim_r ()
=> 0x13a2a <_malloc_trim_r+72>:	add	a5,a5,s1
0x0000000000013a2c in _malloc_trim_r ()
=> 0x13a2c <_malloc_trim_r+74>:	beq	a0,a5,0x13a48 <_malloc_trim_r+102>
0x0000000000013a48 in _malloc_trim_r ()
=> 0x13a48 <_malloc_trim_r+102>:	neg	a1,s0
0x0000000000013a4c in _malloc_trim_r ()
=> 0x13a4c <_malloc_trim_r+106>:	mv	a0,s2
0x0000000000013a4e in _malloc_trim_r ()
=> 0x13a4e <_malloc_trim_r+108>:	jal	ra,0x11704 <_sbrk_r>
0x0000000000011704 in _sbrk_r ()
=> 0x11704 <_sbrk_r>:	addi	sp,sp,-32
0x0000000000011706 in _sbrk_r ()
=> 0x11706 <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000011708 in _sbrk_r ()
=> 0x11708 <_sbrk_r+4>:	sd	s1,8(sp)
0x000000000001170a in _sbrk_r ()
=> 0x1170a <_sbrk_r+6>:	mv	s0,a0
0x000000000001170c in _sbrk_r ()
=> 0x1170c <_sbrk_r+8>:	mv	a0,a1
0x000000000001170e in _sbrk_r ()
=> 0x1170e <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000011710 in _sbrk_r ()
=> 0x11710 <_sbrk_r+12>:	sw	zero,-1752(gp)
0x0000000000011714 in _sbrk_r ()
=> 0x11714 <_sbrk_r+16>:	jal	ra,0x1bd86 <_sbrk>
0x000000000001bd86 in _sbrk ()
=> 0x1bd86 <_sbrk>:	ld	a4,-1744(gp)
0x000000000001bd8a in _sbrk ()
=> 0x1bd8a <_sbrk+4>:	addi	sp,sp,-16
0x000000000001bd8c in _sbrk ()
=> 0x1bd8c <_sbrk+6>:	sd	ra,8(sp)
0x000000000001bd8e in _sbrk ()
=> 0x1bd8e <_sbrk+8>:	mv	a5,a0
0x000000000001bd90 in _sbrk ()
=> 0x1bd90 <_sbrk+10>:	bnez	a4,0x1bda8 <_sbrk+34>
0x000000000001bda8 in _sbrk ()
=> 0x1bda8 <_sbrk+34>:	li	a7,214
0x000000000001bdac in _sbrk ()
=> 0x1bdac <_sbrk+38>:	add	a0,a5,a4
0x000000000001bdb0 in _sbrk ()
=> 0x1bdb0 <_sbrk+42>:	ecall
0x000000000001bdb4 in _sbrk ()
=> 0x1bdb4 <_sbrk+46>:	ld	a4,-1744(gp)
0x000000000001bdb8 in _sbrk ()
=> 0x1bdb8 <_sbrk+50>:	add	a5,a5,a4
0x000000000001bdba in _sbrk ()
=> 0x1bdba <_sbrk+52>:	bne	a0,a5,0x1bdca <_sbrk+68>
0x000000000001bdbe in _sbrk ()
=> 0x1bdbe <_sbrk+56>:	ld	ra,8(sp)
0x000000000001bdc0 in _sbrk ()
=> 0x1bdc0 <_sbrk+58>:	sd	a0,-1744(gp)
0x000000000001bdc4 in _sbrk ()
=> 0x1bdc4 <_sbrk+62>:	mv	a0,a4
0x000000000001bdc6 in _sbrk ()
=> 0x1bdc6 <_sbrk+64>:	addi	sp,sp,16
0x000000000001bdc8 in _sbrk ()
=> 0x1bdc8 <_sbrk+66>:	ret
0x0000000000011718 in _sbrk_r ()
=> 0x11718 <_sbrk_r+20>:	li	a5,-1
0x000000000001171a in _sbrk_r ()
=> 0x1171a <_sbrk_r+22>:	beq	a0,a5,0x11728 <_sbrk_r+36>
0x000000000001171e in _sbrk_r ()
=> 0x1171e <_sbrk_r+26>:	ld	ra,24(sp)
0x0000000000011720 in _sbrk_r ()
=> 0x11720 <_sbrk_r+28>:	ld	s0,16(sp)
0x0000000000011722 in _sbrk_r ()
=> 0x11722 <_sbrk_r+30>:	ld	s1,8(sp)
0x0000000000011724 in _sbrk_r ()
=> 0x11724 <_sbrk_r+32>:	addi	sp,sp,32
0x0000000000011726 in _sbrk_r ()
=> 0x11726 <_sbrk_r+34>:	ret
0x0000000000013a52 in _malloc_trim_r ()
=> 0x13a52 <_malloc_trim_r+112>:	li	a5,-1
0x0000000000013a54 in _malloc_trim_r ()
=> 0x13a54 <_malloc_trim_r+114>:	beq	a0,a5,0x13a8c <_malloc_trim_r+170>
0x0000000000013a58 in _malloc_trim_r ()
=> 0x13a58 <_malloc_trim_r+118>:	lui	a5,0x21
0x0000000000013a5c in _malloc_trim_r ()
=> 0x13a5c <_malloc_trim_r+122>:	addi	a5,a5,1016
0x0000000000013a60 in _malloc_trim_r ()
=> 0x13a60 <_malloc_trim_r+126>:	lw	a4,0(a5)
0x0000000000013a62 in _malloc_trim_r ()
=> 0x13a62 <_malloc_trim_r+128>:	ld	a3,16(s3)
0x0000000000013a66 in _malloc_trim_r ()
=> 0x13a66 <_malloc_trim_r+132>:	sub	s1,s1,s0
0x0000000000013a68 in _malloc_trim_r ()
=> 0x13a68 <_malloc_trim_r+134>:	ori	s1,s1,1
0x0000000000013a6c in _malloc_trim_r ()
=> 0x13a6c <_malloc_trim_r+138>:	subw	s0,a4,s0
0x0000000000013a70 in _malloc_trim_r ()
=> 0x13a70 <_malloc_trim_r+142>:	mv	a0,s2
0x0000000000013a72 in _malloc_trim_r ()
=> 0x13a72 <_malloc_trim_r+144>:	sd	s1,8(a3)
0x0000000000013a74 in _malloc_trim_r ()
=> 0x13a74 <_malloc_trim_r+146>:	sw	s0,0(a5)
0x0000000000013a76 in _malloc_trim_r ()
=> 0x13a76 <_malloc_trim_r+148>:	jal	ra,0x116b4 <__malloc_unlock>
0x00000000000116b4 in __malloc_unlock ()
=> 0x116b4 <__malloc_unlock>:	ret
0x0000000000013a7a in _malloc_trim_r ()
=> 0x13a7a <_malloc_trim_r+152>:	ld	ra,40(sp)
0x0000000000013a7c in _malloc_trim_r ()
=> 0x13a7c <_malloc_trim_r+154>:	ld	s0,32(sp)
0x0000000000013a7e in _malloc_trim_r ()
=> 0x13a7e <_malloc_trim_r+156>:	ld	s1,24(sp)
0x0000000000013a80 in _malloc_trim_r ()
=> 0x13a80 <_malloc_trim_r+158>:	ld	s2,16(sp)
0x0000000000013a82 in _malloc_trim_r ()
=> 0x13a82 <_malloc_trim_r+160>:	ld	s3,8(sp)
0x0000000000013a84 in _malloc_trim_r ()
=> 0x13a84 <_malloc_trim_r+162>:	ld	s4,0(sp)
0x0000000000013a86 in _malloc_trim_r ()
=> 0x13a86 <_malloc_trim_r+164>:	li	a0,1
0x0000000000013a88 in _malloc_trim_r ()
=> 0x13a88 <_malloc_trim_r+166>:	addi	sp,sp,48
0x0000000000013a8a in _malloc_trim_r ()
=> 0x13a8a <_malloc_trim_r+168>:	ret
0x0000000000013c5e in _free_r ()
=> 0x13c5e <_free_r+422>:	j	0x13b6a <_free_r+178>
0x0000000000013b6a in _free_r ()
=> 0x13b6a <_free_r+178>:	ld	s0,16(sp)
0x0000000000013b6c in _free_r ()
=> 0x13b6c <_free_r+180>:	ld	ra,24(sp)
0x0000000000013b6e in _free_r ()
=> 0x13b6e <_free_r+182>:	mv	a0,s1
0x0000000000013b70 in _free_r ()
=> 0x13b70 <_free_r+184>:	ld	s1,8(sp)
0x0000000000013b72 in _free_r ()
=> 0x13b72 <_free_r+186>:	addi	sp,sp,32
0x0000000000013b74 in _free_r ()
=> 0x13b74 <_free_r+188>:	j	0x116b4 <__malloc_unlock>
0x00000000000116b4 in __malloc_unlock ()
=> 0x116b4 <__malloc_unlock>:	ret
0x0000000000019eb4 in _fclose_r.part.0 ()
=> 0x19eb4 <_fclose_r.part.0+126>:	j	0x19e62 <_fclose_r.part.0+44>
0x0000000000019e62 in _fclose_r.part.0 ()
=> 0x19e62 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019e64 in _fclose_r.part.0 ()
=> 0x19e64 <_fclose_r.part.0+46>:	beqz	a1,0x19e78 <_fclose_r.part.0+66>
0x0000000000019e78 in _fclose_r.part.0 ()
=> 0x19e78 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019e7a in _fclose_r.part.0 ()
=> 0x19e7a <_fclose_r.part.0+68>:	beqz	a1,0x19e86 <_fclose_r.part.0+80>
0x0000000000019e86 in _fclose_r.part.0 ()
=> 0x19e86 <_fclose_r.part.0+80>:	jal	ra,0x1398a <__sfp_lock_acquire>
0x000000000001398a in __sfp_lock_acquire ()
=> 0x1398a <__sfp_lock_acquire>:	ret
0x0000000000019e8a in _fclose_r.part.0 ()
=> 0x19e8a <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019e8e in _fclose_r.part.0 ()
=> 0x19e8e <_fclose_r.part.0+88>:	jal	ra,0x1398c <__sfp_lock_release>
0x000000000001398c in __sfp_lock_release ()
=> 0x1398c <__sfp_lock_release>:	ret
0x0000000000019e92 in _fclose_r.part.0 ()
=> 0x19e92 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019e94 in _fclose_r.part.0 ()
=> 0x19e94 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019e96 in _fclose_r.part.0 ()
=> 0x19e96 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019e98 in _fclose_r.part.0 ()
=> 0x19e98 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019e9a in _fclose_r.part.0 ()
=> 0x19e9a <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019e9c in _fclose_r.part.0 ()
=> 0x19e9c <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019e9e in _fclose_r.part.0 ()
=> 0x19e9e <_fclose_r.part.0+104>:	ret
0x0000000000013de6 in _fwalk_reent ()
=> 0x13de6 <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013dea in _fwalk_reent ()
=> 0x13dea <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013dec in _fwalk_reent ()
=> 0x13dec <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013df0 in _fwalk_reent ()
=> 0x13df0 <_fwalk_reent+100>:	bne	s1,s0,0x13dd0 <_fwalk_reent+68>
0x0000000000013dd0 in _fwalk_reent ()
=> 0x13dd0 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013dd4 in _fwalk_reent ()
=> 0x13dd4 <_fwalk_reent+72>:	bgeu	s7,a5,0x13dec <_fwalk_reent+96>
0x0000000000013dd8 in _fwalk_reent ()
=> 0x13dd8 <_fwalk_reent+76>:	lh	a5,18(s0)
0x0000000000013ddc in _fwalk_reent ()
=> 0x13ddc <_fwalk_reent+80>:	mv	a1,s0
0x0000000000013dde in _fwalk_reent ()
=> 0x13dde <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013de0 in _fwalk_reent ()
=> 0x13de0 <_fwalk_reent+84>:	beq	a5,s3,0x13dec <_fwalk_reent+96>
0x0000000000013de4 in _fwalk_reent ()
=> 0x13de4 <_fwalk_reent+88>:	jalr	s4
0x0000000000019eb6 in _fclose_r ()
=> 0x19eb6 <_fclose_r>:	beqz	a1,0x19ef0 <_fclose_r+58>
0x0000000000019eb8 in _fclose_r ()
=> 0x19eb8 <_fclose_r+2>:	addi	sp,sp,-32
0x0000000000019eba in _fclose_r ()
=> 0x19eba <_fclose_r+4>:	sd	s0,16(sp)
0x0000000000019ebc in _fclose_r ()
=> 0x19ebc <_fclose_r+6>:	sd	ra,24(sp)
0x0000000000019ebe in _fclose_r ()
=> 0x19ebe <_fclose_r+8>:	mv	s0,a0
0x0000000000019ec0 in _fclose_r ()
=> 0x19ec0 <_fclose_r+10>:	beqz	a0,0x19ec6 <_fclose_r+16>
0x0000000000019ec2 in _fclose_r ()
=> 0x19ec2 <_fclose_r+12>:	lw	a5,80(a0)
0x0000000000019ec4 in _fclose_r ()
=> 0x19ec4 <_fclose_r+14>:	beqz	a5,0x19ee0 <_fclose_r+42>
0x0000000000019ec6 in _fclose_r ()
=> 0x19ec6 <_fclose_r+16>:	lh	a5,16(a1)
0x0000000000019eca in _fclose_r ()
=> 0x19eca <_fclose_r+20>:	bnez	a5,0x19ed6 <_fclose_r+32>
0x0000000000019ed6 in _fclose_r ()
=> 0x19ed6 <_fclose_r+32>:	mv	a0,s0
0x0000000000019ed8 in _fclose_r ()
=> 0x19ed8 <_fclose_r+34>:	ld	s0,16(sp)
0x0000000000019eda in _fclose_r ()
=> 0x19eda <_fclose_r+36>:	ld	ra,24(sp)
0x0000000000019edc in _fclose_r ()
=> 0x19edc <_fclose_r+38>:	addi	sp,sp,32
0x0000000000019ede in _fclose_r ()
=> 0x19ede <_fclose_r+40>:	j	0x19e36 <_fclose_r.part.0>
0x0000000000019e36 in _fclose_r.part.0 ()
=> 0x19e36 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019e38 in _fclose_r.part.0 ()
=> 0x19e38 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019e3a in _fclose_r.part.0 ()
=> 0x19e3a <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019e3c in _fclose_r.part.0 ()
=> 0x19e3c <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x0000000000019e3e in _fclose_r.part.0 ()
=> 0x19e3e <_fclose_r.part.0+8>:	mv	s0,a1
0x0000000000019e40 in _fclose_r.part.0 ()
=> 0x19e40 <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x0000000000019e42 in _fclose_r.part.0 ()
=> 0x19e42 <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019e44 in _fclose_r.part.0 ()
=> 0x19e44 <_fclose_r.part.0+14>:	jal	ra,0x13514 <__sflush_r>
0x0000000000013514 in __sflush_r ()
=> 0x13514 <__sflush_r>:	lh	a5,16(a1)
0x0000000000013518 in __sflush_r ()
=> 0x13518 <__sflush_r+4>:	addi	sp,sp,-48
0x000000000001351a in __sflush_r ()
=> 0x1351a <__sflush_r+6>:	sd	s0,32(sp)
0x000000000001351c in __sflush_r ()
=> 0x1351c <__sflush_r+8>:	sd	s3,8(sp)
0x000000000001351e in __sflush_r ()
=> 0x1351e <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000013520 in __sflush_r ()
=> 0x13520 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000013522 in __sflush_r ()
=> 0x13522 <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000013524 in __sflush_r ()
=> 0x13524 <__sflush_r+16>:	andi	a3,a5,8
0x0000000000013528 in __sflush_r ()
=> 0x13528 <__sflush_r+20>:	mv	s0,a1
0x000000000001352a in __sflush_r ()
=> 0x1352a <__sflush_r+22>:	mv	s3,a0
0x000000000001352c in __sflush_r ()
=> 0x1352c <__sflush_r+24>:	bnez	a3,0x135e0 <__sflush_r+204>
0x000000000001352e in __sflush_r ()
=> 0x1352e <__sflush_r+26>:	lui	a4,0x1
0x0000000000013530 in __sflush_r ()
=> 0x13530 <__sflush_r+28>:	addi	a4,a4,-2048
0x0000000000013534 in __sflush_r ()
=> 0x13534 <__sflush_r+32>:	lw	a3,8(a1)
0x0000000000013536 in __sflush_r ()
=> 0x13536 <__sflush_r+34>:	or	a5,a5,a4
0x0000000000013538 in __sflush_r ()
=> 0x13538 <__sflush_r+36>:	sh	a5,16(a1)
0x000000000001353c in __sflush_r ()
=> 0x1353c <__sflush_r+40>:	blez	a3,0x1363c <__sflush_r+296>
0x000000000001363c in __sflush_r ()
=> 0x1363c <__sflush_r+296>:	lw	a4,112(a1)
0x000000000001363e in __sflush_r ()
=> 0x1363e <__sflush_r+298>:	bgtz	a4,0x13540 <__sflush_r+44>
0x0000000000013642 in __sflush_r ()
=> 0x13642 <__sflush_r+302>:	j	0x135d0 <__sflush_r+188>
0x00000000000135d0 in __sflush_r ()
=> 0x135d0 <__sflush_r+188>:	li	a0,0
0x00000000000135d2 in __sflush_r ()
=> 0x135d2 <__sflush_r+190>:	ld	ra,40(sp)
0x00000000000135d4 in __sflush_r ()
=> 0x135d4 <__sflush_r+192>:	ld	s0,32(sp)
0x00000000000135d6 in __sflush_r ()
=> 0x135d6 <__sflush_r+194>:	ld	s1,24(sp)
0x00000000000135d8 in __sflush_r ()
=> 0x135d8 <__sflush_r+196>:	ld	s2,16(sp)
0x00000000000135da in __sflush_r ()
=> 0x135da <__sflush_r+198>:	ld	s3,8(sp)
0x00000000000135dc in __sflush_r ()
=> 0x135dc <__sflush_r+200>:	addi	sp,sp,48
0x00000000000135de in __sflush_r ()
=> 0x135de <__sflush_r+202>:	ret
0x0000000000019e48 in _fclose_r.part.0 ()
=> 0x19e48 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019e4a in _fclose_r.part.0 ()
=> 0x19e4a <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019e4c in _fclose_r.part.0 ()
=> 0x19e4c <_fclose_r.part.0+22>:	beqz	a5,0x19e58 <_fclose_r.part.0+34>
0x0000000000019e4e in _fclose_r.part.0 ()
=> 0x19e4e <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x0000000000019e50 in _fclose_r.part.0 ()
=> 0x19e50 <_fclose_r.part.0+26>:	mv	a0,s1
0x0000000000019e52 in _fclose_r.part.0 ()
=> 0x19e52 <_fclose_r.part.0+28>:	jalr	a5
0x0000000000017140 in __sclose ()
=> 0x17140 <__sclose>:	lh	a1,18(a1)
0x0000000000017144 in __sclose ()
=> 0x17144 <__sclose+4>:	j	0x19dfa <_close_r>
0x0000000000019dfa in _close_r ()
=> 0x19dfa <_close_r>:	addi	sp,sp,-32
0x0000000000019dfc in _close_r ()
=> 0x19dfc <_close_r+2>:	sd	s0,16(sp)
0x0000000000019dfe in _close_r ()
=> 0x19dfe <_close_r+4>:	sd	s1,8(sp)
0x0000000000019e00 in _close_r ()
=> 0x19e00 <_close_r+6>:	mv	s0,a0
0x0000000000019e02 in _close_r ()
=> 0x19e02 <_close_r+8>:	mv	a0,a1
0x0000000000019e04 in _close_r ()
=> 0x19e04 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019e06 in _close_r ()
=> 0x19e06 <_close_r+12>:	sw	zero,-1752(gp)
0x0000000000019e0a in _close_r ()
=> 0x19e0a <_close_r+16>:	jal	ra,0x1bc62 <_close>
0x000000000001bc62 in _close ()
=> 0x1bc62 <_close>:	addi	sp,sp,-16
0x000000000001bc64 in _close ()
=> 0x1bc64 <_close+2>:	sd	ra,8(sp)
0x000000000001bc66 in _close ()
=> 0x1bc66 <_close+4>:	sd	s0,0(sp)
0x000000000001bc68 in _close ()
=> 0x1bc68 <_close+6>:	li	a7,57
0x000000000001bc6c in _close ()
=> 0x1bc6c <_close+10>:	ecall
0x000000000001bc70 in _close ()
=> 0x1bc70 <_close+14>:	mv	s0,a0
0x000000000001bc72 in _close ()
=> 0x1bc72 <_close+16>:	bltz	a0,0x1bc80 <_close+30>
0x000000000001bc76 in _close ()
=> 0x1bc76 <_close+20>:	sext.w	a0,a0
0x000000000001bc78 in _close ()
=> 0x1bc78 <_close+22>:	ld	ra,8(sp)
0x000000000001bc7a in _close ()
=> 0x1bc7a <_close+24>:	ld	s0,0(sp)
0x000000000001bc7c in _close ()
=> 0x1bc7c <_close+26>:	addi	sp,sp,16
0x000000000001bc7e in _close ()
=> 0x1bc7e <_close+28>:	ret
0x0000000000019e0e in _close_r ()
=> 0x19e0e <_close_r+20>:	li	a5,-1
0x0000000000019e10 in _close_r ()
=> 0x19e10 <_close_r+22>:	beq	a0,a5,0x19e1e <_close_r+36>
0x0000000000019e14 in _close_r ()
=> 0x19e14 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019e16 in _close_r ()
=> 0x19e16 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019e18 in _close_r ()
=> 0x19e18 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019e1a in _close_r ()
=> 0x19e1a <_close_r+32>:	addi	sp,sp,32
0x0000000000019e1c in _close_r ()
=> 0x19e1c <_close_r+34>:	ret
0x0000000000019e54 in _fclose_r.part.0 ()
=> 0x19e54 <_fclose_r.part.0+30>:	bltz	a0,0x19ea0 <_fclose_r.part.0+106>
0x0000000000019e58 in _fclose_r.part.0 ()
=> 0x19e58 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019e5c in _fclose_r.part.0 ()
=> 0x19e5c <_fclose_r.part.0+38>:	andi	a5,a5,128
0x0000000000019e60 in _fclose_r.part.0 ()
=> 0x19e60 <_fclose_r.part.0+42>:	bnez	a5,0x19eac <_fclose_r.part.0+118>
0x0000000000019e62 in _fclose_r.part.0 ()
=> 0x19e62 <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019e64 in _fclose_r.part.0 ()
=> 0x19e64 <_fclose_r.part.0+46>:	beqz	a1,0x19e78 <_fclose_r.part.0+66>
0x0000000000019e78 in _fclose_r.part.0 ()
=> 0x19e78 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019e7a in _fclose_r.part.0 ()
=> 0x19e7a <_fclose_r.part.0+68>:	beqz	a1,0x19e86 <_fclose_r.part.0+80>
0x0000000000019e86 in _fclose_r.part.0 ()
=> 0x19e86 <_fclose_r.part.0+80>:	jal	ra,0x1398a <__sfp_lock_acquire>
0x000000000001398a in __sfp_lock_acquire ()
=> 0x1398a <__sfp_lock_acquire>:	ret
0x0000000000019e8a in _fclose_r.part.0 ()
=> 0x19e8a <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x0000000000019e8e in _fclose_r.part.0 ()
=> 0x19e8e <_fclose_r.part.0+88>:	jal	ra,0x1398c <__sfp_lock_release>
0x000000000001398c in __sfp_lock_release ()
=> 0x1398c <__sfp_lock_release>:	ret
0x0000000000019e92 in _fclose_r.part.0 ()
=> 0x19e92 <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x0000000000019e94 in _fclose_r.part.0 ()
=> 0x19e94 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x0000000000019e96 in _fclose_r.part.0 ()
=> 0x19e96 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x0000000000019e98 in _fclose_r.part.0 ()
=> 0x19e98 <_fclose_r.part.0+98>:	mv	a0,s2
0x0000000000019e9a in _fclose_r.part.0 ()
=> 0x19e9a <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x0000000000019e9c in _fclose_r.part.0 ()
=> 0x19e9c <_fclose_r.part.0+102>:	addi	sp,sp,32
0x0000000000019e9e in _fclose_r.part.0 ()
=> 0x19e9e <_fclose_r.part.0+104>:	ret
0x0000000000013de6 in _fwalk_reent ()
=> 0x13de6 <_fwalk_reent+90>:	or	s6,a0,s6
0x0000000000013dea in _fwalk_reent ()
=> 0x13dea <_fwalk_reent+94>:	sext.w	s6,s6
0x0000000000013dec in _fwalk_reent ()
=> 0x13dec <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013df0 in _fwalk_reent ()
=> 0x13df0 <_fwalk_reent+100>:	bne	s1,s0,0x13dd0 <_fwalk_reent+68>
0x0000000000013df4 in _fwalk_reent ()
=> 0x13df4 <_fwalk_reent+104>:	ld	s2,0(s2)
0x0000000000013df8 in _fwalk_reent ()
=> 0x13df8 <_fwalk_reent+108>:	bnez	s2,0x13db4 <_fwalk_reent+40>
0x0000000000013dfc in _fwalk_reent ()
=> 0x13dfc <_fwalk_reent+112>:	ld	ra,72(sp)
0x0000000000013dfe in _fwalk_reent ()
=> 0x13dfe <_fwalk_reent+114>:	ld	s0,64(sp)
0x0000000000013e00 in _fwalk_reent ()
=> 0x13e00 <_fwalk_reent+116>:	ld	s1,56(sp)
0x0000000000013e02 in _fwalk_reent ()
=> 0x13e02 <_fwalk_reent+118>:	ld	s2,48(sp)
0x0000000000013e04 in _fwalk_reent ()
=> 0x13e04 <_fwalk_reent+120>:	ld	s3,40(sp)
0x0000000000013e06 in _fwalk_reent ()
=> 0x13e06 <_fwalk_reent+122>:	ld	s4,32(sp)
0x0000000000013e08 in _fwalk_reent ()
=> 0x13e08 <_fwalk_reent+124>:	ld	s5,24(sp)
0x0000000000013e0a in _fwalk_reent ()
=> 0x13e0a <_fwalk_reent+126>:	ld	s7,8(sp)
0x0000000000013e0c in _fwalk_reent ()
=> 0x13e0c <_fwalk_reent+128>:	ld	s8,0(sp)
0x0000000000013e0e in _fwalk_reent ()
=> 0x13e0e <_fwalk_reent+130>:	mv	a0,s6
0x0000000000013e10 in _fwalk_reent ()
=> 0x13e10 <_fwalk_reent+132>:	ld	s6,16(sp)
0x0000000000013e12 in _fwalk_reent ()
=> 0x13e12 <_fwalk_reent+134>:	addi	sp,sp,80
0x0000000000013e14 in _fwalk_reent ()
=> 0x13e14 <_fwalk_reent+136>:	ret
0x0000000000010f54 in exit ()
=> 0x10f54 <exit+24>:	mv	a0,s0
0x0000000000010f56 in exit ()
=> 0x10f56 <exit+26>:	jal	ra,0x1bc8e <_exit>
0x000000000001bc8e in _exit ()
=> 0x1bc8e <_exit>:	li	a7,93
0x000000000001bc92 in _exit ()
=> 0x1bc92 <_exit+4>:	ecall
[Inferior 1 (process 766) exited normally]
script_remote.gdb:25: Error in sourced command file:
No registers.
