
Temporary breakpoint 1, start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102d0 <start_trigger+16>:	sd	ra,8(sp)
0x00000000000102d4	37	}
=> 0x102d4 <start_trigger+20>:	sd	s0,0(sp)
0x00000000000102d8	37	}
=> 0x102d8 <start_trigger+24>:	addi	s0,sp,16
0x00000000000102dc	37	}
=> 0x102dc <start_trigger+28>:	ld	s0,0(sp)
0x00000000000102e0 in start_trigger () at ../config/riscv64/boards/generic/boardsupport.c:37
37	}
=> 0x102e0 <start_trigger+32>:	ld	ra,8(sp)
0x00000000000102e4	37	}
=> 0x102e4 <start_trigger+36>:	addi	sp,sp,16
0x00000000000102e8	37	}
=> 0x102e8 <start_trigger+40>:	ld	ra,0(t6)
0x00000000000102ec	37	}
=> 0x102ec <start_trigger+44>:	addi	t6,t6,16
0x00000000000102f0	37	}
=> 0x102f0 <start_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:54
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1021c <main+144>:	ld	a0,-88(s0)
0x0000000000010220	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10220 <main+148>:	sw	a0,-36(s0)
0x0000000000010224	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10224 <main+152>:	j	0x10228 <main+156>
0x0000000000010228	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10228 <main+156>:	lw	a0,-36(s0)
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+160>:	li	a1,0
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+164>:	blt	a1,a0,0x1025c <main+208>
0x0000000000010234	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10234 <main+168>:	j	0x10238 <main+172>
56	      initialise_benchmark ();
=> 0x10238 <main+172>:	jal	ra,0x106b8 <initialise_benchmark>
initialise_benchmark () at cnt.c:254
254	void initialise_benchmark() {
=> 0x106b8 <initialise_benchmark>:	addi	t6,t6,-16
0x00000000000106bc	254	void initialise_benchmark() {
=> 0x106bc <initialise_benchmark+4>:	sd	ra,0(t6)
0x00000000000106c0	254	void initialise_benchmark() {
=> 0x106c0 <initialise_benchmark+8>:	st	zero,0(t6)
0x00000000000106c4	254	void initialise_benchmark() {
=> 0x106c4 <initialise_benchmark+12>:	addi	sp,sp,-32
255	   InitSeed();
=> 0x106c8 <initialise_benchmark+16>:	sd	ra,24(sp)
0x00000000000106cc	255	   InitSeed();
=> 0x106cc <initialise_benchmark+20>:	sd	s0,16(sp)
0x00000000000106d0	255	   InitSeed();
=> 0x106d0 <initialise_benchmark+24>:	addi	s0,sp,32
0x00000000000106d4	255	   InitSeed();
=> 0x106d4 <initialise_benchmark+28>:	jal	ra,0x10678 <InitSeed>
InitSeed () at cnt.c:146
146	{
=> 0x10678 <InitSeed>:	addi	t6,t6,-16
0x000000000001067c	146	{
=> 0x1067c <InitSeed+4>:	sd	ra,0(t6)
0x0000000000010680	146	{
=> 0x10680 <InitSeed+8>:	st	zero,0(t6)
0x0000000000010684	146	{
=> 0x10684 <InitSeed+12>:	addi	sp,sp,-16
148	   Seed = 0;
=> 0x10688 <InitSeed+16>:	sd	ra,8(sp)
0x000000000001068c	148	   Seed = 0;
=> 0x1068c <InitSeed+20>:	sd	s0,0(sp)
0x0000000000010690	148	   Seed = 0;
=> 0x10690 <InitSeed+24>:	addi	s0,sp,16
0x0000000000010694	148	   Seed = 0;
=> 0x10694 <InitSeed+28>:	li	a1,0
0x0000000000010698	148	   Seed = 0;
=> 0x10698 <InitSeed+32>:	sw	a1,1480(gp)
150	   return 0;
=> 0x1069c <InitSeed+36>:	mv	a0,a1
0x00000000000106a0	150	   return 0;
=> 0x106a0 <InitSeed+40>:	ld	s0,0(sp)
0x00000000000106a4 in InitSeed () at cnt.c:150
150	   return 0;
=> 0x106a4 <InitSeed+44>:	ld	ra,8(sp)
0x00000000000106a8	150	   return 0;
=> 0x106a8 <InitSeed+48>:	addi	sp,sp,16
0x00000000000106ac	150	   return 0;
=> 0x106ac <InitSeed+52>:	ld	ra,0(t6)
0x00000000000106b0	150	   return 0;
=> 0x106b0 <InitSeed+56>:	addi	t6,t6,16
0x00000000000106b4	150	   return 0;
=> 0x106b4 <InitSeed+60>:	ret
initialise_benchmark () at cnt.c:256
256	   Initialize(Array);
=> 0x106d8 <initialise_benchmark+32>:	addi	a1,gp,1608
0x00000000000106dc	256	   Initialize(Array);
=> 0x106dc <initialise_benchmark+36>:	sd	a0,-24(s0)
0x00000000000106e0	256	   Initialize(Array);
=> 0x106e0 <initialise_benchmark+40>:	mv	a0,a1
0x00000000000106e4	256	   Initialize(Array);
=> 0x106e4 <initialise_benchmark+44>:	jal	ra,0x10520 <Initialize>
Initialize (Array=0x0) at cnt.c:120
120	{
=> 0x10520 <Initialize>:	addi	t6,t6,-16
0x0000000000010524	120	{
=> 0x10524 <Initialize+4>:	sd	ra,0(t6)
0x0000000000010528	120	{
=> 0x10528 <Initialize+8>:	st	zero,0(t6)
0x000000000001052c	120	{
=> 0x1052c <Initialize+12>:	addi	sp,sp,-32
0x0000000000010530	120	{
=> 0x10530 <Initialize+16>:	sd	ra,24(sp)
0x0000000000010534	120	{
=> 0x10534 <Initialize+20>:	sd	s0,16(sp)
0x0000000000010538	120	{
=> 0x10538 <Initialize+24>:	addi	s0,sp,32
0x000000000001053c	120	{
=> 0x1053c <Initialize+28>:	sd	a0,-24(s0)
0x0000000000010540	120	{
=> 0x10540 <Initialize+32>:	li	a0,0
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10544 <Initialize+36>:	sw	a0,-28(s0)
0x0000000000010548	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10548 <Initialize+40>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x0000000000010558	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10558 <Initialize+56>:	j	0x1055c <Initialize+60>
0x000000000001055c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1055c <Initialize+60>:	li	a0,0
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10560 <Initialize+64>:	sw	a0,-32(s0)
0x0000000000010564	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10564 <Initialize+68>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
0x0000000000010574	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10574 <Initialize+84>:	j	0x10578 <Initialize+88>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10578 <Initialize+88>:	jal	ra,0x105e4 <RandomInteger>
RandomInteger () at cnt.c:246
246	{
=> 0x105e4 <RandomInteger>:	addi	t6,t6,-16
0x00000000000105e8	246	{
=> 0x105e8 <RandomInteger+4>:	sd	ra,0(t6)
0x00000000000105ec	246	{
=> 0x105ec <RandomInteger+8>:	st	zero,0(t6)
0x00000000000105f0	246	{
=> 0x105f0 <RandomInteger+12>:	addi	sp,sp,-16
248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f4 <RandomInteger+16>:	sd	ra,8(sp)
0x00000000000105f8	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105f8 <RandomInteger+20>:	sd	s0,0(sp)
0x00000000000105fc	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x105fc <RandomInteger+24>:	addi	s0,sp,16
0x0000000000010600	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10600 <RandomInteger+28>:	lw	a1,1480(gp)
0x0000000000010604	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10604 <RandomInteger+32>:	li	a2,133
0x0000000000010608	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10608 <RandomInteger+36>:	mul	a1,a1,a2
0x000000000001060c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1060c <RandomInteger+40>:	addi	a2,a1,81
0x0000000000010610	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10610 <RandomInteger+44>:	addiw	a1,a1,81
0x0000000000010614	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10614 <RandomInteger+48>:	lui	a3,0xf8189
0x0000000000010618	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10618 <RandomInteger+52>:	addiw	a3,a3,-1437
0x000000000001061c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1061c <RandomInteger+56>:	slli	a3,a3,0xc
0x0000000000010620	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10620 <RandomInteger+60>:	addi	a3,a3,2009
0x0000000000010624	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10624 <RandomInteger+64>:	slli	a3,a3,0xc
0x0000000000010628	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10628 <RandomInteger+68>:	addi	a3,a3,1195
0x000000000001062c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1062c <RandomInteger+72>:	slli	a3,a3,0xc
0x0000000000010630	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10630 <RandomInteger+76>:	addi	a3,a3,-1451
0x0000000000010634	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10634 <RandomInteger+80>:	mulh	a3,a1,a3
0x0000000000010638	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10638 <RandomInteger+84>:	add	a1,a3,a1
0x000000000001063c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1063c <RandomInteger+88>:	srli	a3,a1,0x3f
0x0000000000010640	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10640 <RandomInteger+92>:	srli	a1,a1,0xc
0x0000000000010644	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10644 <RandomInteger+96>:	add	a1,a1,a3
0x0000000000010648	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10648 <RandomInteger+100>:	lui	a3,0x2
0x000000000001064c	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x1064c <RandomInteger+104>:	addiw	a3,a3,-97
0x0000000000010650	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10650 <RandomInteger+108>:	mul	a1,a1,a3
0x0000000000010654	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10654 <RandomInteger+112>:	sub	a1,a2,a1
0x0000000000010658	248	   Seed = ((Seed * 133) + 81) % 8095;
=> 0x10658 <RandomInteger+116>:	sw	a1,1480(gp)
250	   return Seed;
=> 0x1065c <RandomInteger+120>:	lw	a0,1480(gp)
0x0000000000010660	250	   return Seed;
=> 0x10660 <RandomInteger+124>:	ld	s0,0(sp)
0x0000000000010664 in RandomInteger () at cnt.c:250
250	   return Seed;
=> 0x10664 <RandomInteger+128>:	ld	ra,8(sp)
0x0000000000010668	250	   return Seed;
=> 0x10668 <RandomInteger+132>:	addi	sp,sp,16
0x000000000001066c	250	   return Seed;
=> 0x1066c <RandomInteger+136>:	ld	ra,0(t6)
0x0000000000010670	250	   return Seed;
=> 0x10670 <RandomInteger+140>:	addi	t6,t6,16
0x0000000000010674	250	   return Seed;
=> 0x10674 <RandomInteger+144>:	ret
0x000000000001057c in Initialize (Array=0x1fad0 <Array>) at cnt.c:130
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1057c <Initialize+92>:	ld	a1,-24(s0)
0x0000000000010580	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10580 <Initialize+96>:	lw	a2,-28(s0)
0x0000000000010584	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10584 <Initialize+100>:	li	a3,40
0x0000000000010588	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10588 <Initialize+104>:	mul	a2,a2,a3
0x000000000001058c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1058c <Initialize+108>:	add	a1,a1,a2
0x0000000000010590	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10590 <Initialize+112>:	lw	a2,-32(s0)
0x0000000000010594	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10594 <Initialize+116>:	slli	a2,a2,0x2
0x0000000000010598	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x10598 <Initialize+120>:	add	a1,a1,a2
0x000000000001059c	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x1059c <Initialize+124>:	sw	a0,0(a1)
0x00000000000105a0	130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105a0 <Initialize+128>:	j	0x105a4 <Initialize+132>
128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a4 <Initialize+132>:	lw	a0,-32(s0)
0x00000000000105a8	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105a8 <Initialize+136>:	addi	a0,a0,1
0x00000000000105ac	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105ac <Initialize+140>:	sw	a0,-32(s0)
0x00000000000105b0	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x105b0 <Initialize+144>:	j	0x10568 <Initialize+72>
0x0000000000010568	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10568 <Initialize+72>:	lw	a0,-32(s0)
0x000000000001056c	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x1056c <Initialize+76>:	li	a1,9
0x0000000000010570	128	      for (InnerIndex = 0; InnerIndex < MAXSIZE; InnerIndex++) //100 + 1
=> 0x10570 <Initialize+80>:	blt	a1,a0,0x105b4 <Initialize+148>
130	         Array[OuterIndex][InnerIndex] = RandomInteger();
=> 0x105b4 <Initialize+148>:	j	0x105b8 <Initialize+152>
126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105b8 <Initialize+152>:	lw	a0,-28(s0)
0x00000000000105bc	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105bc <Initialize+156>:	addi	a0,a0,1
0x00000000000105c0	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c0 <Initialize+160>:	sw	a0,-28(s0)
0x00000000000105c4	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c4 <Initialize+164>:	j	0x1054c <Initialize+44>
0x000000000001054c	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x1054c <Initialize+44>:	lw	a0,-28(s0)
0x0000000000010550	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10550 <Initialize+48>:	li	a1,9
0x0000000000010554	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x10554 <Initialize+52>:	blt	a1,a0,0x105c8 <Initialize+168>
0x00000000000105c8	126	   for (OuterIndex = 0; OuterIndex < MAXSIZE; OuterIndex++) //100 + 1
=> 0x105c8 <Initialize+168>:	li	a0,0
134	   return 0;
=> 0x105cc <Initialize+172>:	ld	s0,16(sp)
0x00000000000105d0 in Initialize (Array=0x0) at cnt.c:134
134	   return 0;
=> 0x105d0 <Initialize+176>:	ld	ra,24(sp)
0x00000000000105d4	134	   return 0;
=> 0x105d4 <Initialize+180>:	addi	sp,sp,32
0x00000000000105d8	134	   return 0;
=> 0x105d8 <Initialize+184>:	ld	ra,0(t6)
0x00000000000105dc	134	   return 0;
=> 0x105dc <Initialize+188>:	addi	t6,t6,16
0x00000000000105e0	134	   return 0;
=> 0x105e0 <Initialize+192>:	ret
initialise_benchmark () at cnt.c:257
257	}
=> 0x106e8 <initialise_benchmark+48>:	ld	s0,16(sp)
0x00000000000106ec in initialise_benchmark () at cnt.c:257
257	}
=> 0x106ec <initialise_benchmark+52>:	ld	ra,24(sp)
0x00000000000106f0	257	}
=> 0x106f0 <initialise_benchmark+56>:	addi	sp,sp,32
0x00000000000106f4	257	}
=> 0x106f4 <initialise_benchmark+60>:	ld	ra,0(t6)
0x00000000000106f8	257	}
=> 0x106f8 <initialise_benchmark+64>:	addi	t6,t6,16
0x00000000000106fc	257	}
=> 0x106fc <initialise_benchmark+68>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:57
57	      result = benchmark ();
=> 0x1023c <main+176>:	sd	a0,-120(s0)
0x0000000000010240	57	      result = benchmark ();
=> 0x10240 <main+180>:	jal	ra,0x10328 <benchmark>
benchmark () at cnt.c:92
92	{
=> 0x10328 <benchmark>:	addi	t6,t6,-16
0x000000000001032c	92	{
=> 0x1032c <benchmark+4>:	sd	ra,0(t6)
0x0000000000010330	92	{
=> 0x10330 <benchmark+8>:	st	zero,0(t6)
0x0000000000010334	92	{
=> 0x10334 <benchmark+12>:	addi	sp,sp,-16
99	   return Test(Array);
=> 0x10338 <benchmark+16>:	sd	ra,8(sp)
0x000000000001033c	99	   return Test(Array);
=> 0x1033c <benchmark+20>:	sd	s0,0(sp)
0x0000000000010340	99	   return Test(Array);
=> 0x10340 <benchmark+24>:	addi	s0,sp,16
0x0000000000010344	99	   return Test(Array);
=> 0x10344 <benchmark+28>:	addi	a0,gp,1608
0x0000000000010348	99	   return Test(Array);
=> 0x10348 <benchmark+32>:	jal	ra,0x10364 <Test>
Test (Array=0x0) at cnt.c:106
106	{
=> 0x10364 <Test>:	addi	t6,t6,-16
0x0000000000010368	106	{
=> 0x10368 <Test+4>:	sd	ra,0(t6)
0x000000000001036c	106	{
=> 0x1036c <Test+8>:	st	zero,0(t6)
0x0000000000010370	106	{
=> 0x10370 <Test+12>:	addi	sp,sp,-32
0x0000000000010374	106	{
=> 0x10374 <Test+16>:	sd	ra,24(sp)
0x0000000000010378	106	{
=> 0x10378 <Test+20>:	sd	s0,16(sp)
0x000000000001037c	106	{
=> 0x1037c <Test+24>:	addi	s0,sp,32
0x0000000000010380	106	{
=> 0x10380 <Test+28>:	sd	a0,-24(s0)
108	   return Sum(Array);
=> 0x10384 <Test+32>:	ld	a0,-24(s0)
0x0000000000010388	108	   return Sum(Array);
=> 0x10388 <Test+36>:	jal	ra,0x103a4 <Sum>
Sum (Array=0x1fad0 <Array>) at cnt.c:158
158	{
=> 0x103a4 <Sum>:	addi	t6,t6,-16
0x00000000000103a8	158	{
=> 0x103a8 <Sum+4>:	sd	ra,0(t6)
0x00000000000103ac	158	{
=> 0x103ac <Sum+8>:	st	zero,0(t6)
0x00000000000103b0	158	{
=> 0x103b0 <Sum+12>:	addi	sp,sp,-48
0x00000000000103b4	158	{
=> 0x103b4 <Sum+16>:	sd	ra,40(sp)
0x00000000000103b8	158	{
=> 0x103b8 <Sum+20>:	sd	s0,32(sp)
0x00000000000103bc	158	{
=> 0x103bc <Sum+24>:	addi	s0,sp,48
0x00000000000103c0	158	{
=> 0x103c0 <Sum+28>:	sd	a0,-24(s0)
0x00000000000103c4	158	{
=> 0x103c4 <Sum+32>:	li	a0,0
164	  int Ptotal = 0; /* changed these to locals in order to drive worst case */
=> 0x103c8 <Sum+36>:	sw	a0,-36(s0)
166	  int Ntotal = 0;
=> 0x103cc <Sum+40>:	sw	a0,-40(s0)
168	  int Pcnt = 0;
=> 0x103d0 <Sum+44>:	sw	a0,-44(s0)
170	  int Ncnt = 0;
=> 0x103d4 <Sum+48>:	sw	a0,-48(s0)
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103d8 <Sum+52>:	sw	a0,-28(s0)
0x00000000000103dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103dc <Sum+56>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
0x00000000000103ec	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103ec <Sum+72>:	j	0x103f0 <Sum+76>
0x00000000000103f0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103f0 <Sum+76>:	li	a0,0
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f4 <Sum+80>:	sw	a0,-32(s0)
0x00000000000103f8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103f8 <Sum+84>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
0x0000000000010408	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10408 <Sum+100>:	j	0x1040c <Sum+104>
184		if (Array[Outer][Inner] < 0) {
=> 0x1040c <Sum+104>:	ld	a0,-24(s0)
0x0000000000010410	184		if (Array[Outer][Inner] < 0) {
=> 0x10410 <Sum+108>:	lw	a1,-28(s0)
0x0000000000010414	184		if (Array[Outer][Inner] < 0) {
=> 0x10414 <Sum+112>:	li	a2,40
0x0000000000010418	184		if (Array[Outer][Inner] < 0) {
=> 0x10418 <Sum+116>:	mul	a1,a1,a2
0x000000000001041c	184		if (Array[Outer][Inner] < 0) {
=> 0x1041c <Sum+120>:	add	a0,a0,a1
0x0000000000010420	184		if (Array[Outer][Inner] < 0) {
=> 0x10420 <Sum+124>:	lw	a1,-32(s0)
0x0000000000010424	184		if (Array[Outer][Inner] < 0) {
=> 0x10424 <Sum+128>:	slli	a1,a1,0x2
0x0000000000010428	184		if (Array[Outer][Inner] < 0) {
=> 0x10428 <Sum+132>:	add	a0,a0,a1
0x000000000001042c	184		if (Array[Outer][Inner] < 0) {
=> 0x1042c <Sum+136>:	lw	a0,0(a0)
0x0000000000010430	184		if (Array[Outer][Inner] < 0) {
=> 0x10430 <Sum+140>:	li	a1,-1
0x0000000000010434	184		if (Array[Outer][Inner] < 0) {
=> 0x10434 <Sum+144>:	blt	a1,a0,0x1047c <Sum+216>
196		  Ntotal += Array[Outer][Inner];
=> 0x1047c <Sum+216>:	ld	a0,-24(s0)
0x0000000000010480	196		  Ntotal += Array[Outer][Inner];
=> 0x10480 <Sum+220>:	lw	a1,-28(s0)
0x0000000000010484	196		  Ntotal += Array[Outer][Inner];
=> 0x10484 <Sum+224>:	li	a2,40
0x0000000000010488	196		  Ntotal += Array[Outer][Inner];
=> 0x10488 <Sum+228>:	mul	a1,a1,a2
0x000000000001048c	196		  Ntotal += Array[Outer][Inner];
=> 0x1048c <Sum+232>:	add	a0,a0,a1
0x0000000000010490	196		  Ntotal += Array[Outer][Inner];
=> 0x10490 <Sum+236>:	lw	a1,-32(s0)
0x0000000000010494	196		  Ntotal += Array[Outer][Inner];
=> 0x10494 <Sum+240>:	slli	a1,a1,0x2
0x0000000000010498	196		  Ntotal += Array[Outer][Inner];
=> 0x10498 <Sum+244>:	add	a0,a0,a1
0x000000000001049c	196		  Ntotal += Array[Outer][Inner];
=> 0x1049c <Sum+248>:	lw	a0,0(a0)
0x00000000000104a0	196		  Ntotal += Array[Outer][Inner];
=> 0x104a0 <Sum+252>:	lw	a1,-40(s0)
0x00000000000104a4	196		  Ntotal += Array[Outer][Inner];
=> 0x104a4 <Sum+256>:	add	a0,a1,a0
0x00000000000104a8	196		  Ntotal += Array[Outer][Inner];
=> 0x104a8 <Sum+260>:	sw	a0,-40(s0)
198		  Ncnt++;
=> 0x104ac <Sum+264>:	lw	a0,-48(s0)
0x00000000000104b0	198		  Ncnt++;
=> 0x104b0 <Sum+268>:	addi	a0,a0,1
0x00000000000104b4	198		  Ncnt++;
=> 0x104b4 <Sum+272>:	sw	a0,-48(s0)
0x00000000000104b8	198		  Ncnt++;
=> 0x104b8 <Sum+276>:	j	0x104bc <Sum+280>
184		if (Array[Outer][Inner] < 0) {
=> 0x104bc <Sum+280>:	j	0x104c0 <Sum+284>
176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c0 <Sum+284>:	lw	a0,-32(s0)
0x00000000000104c4	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c4 <Sum+288>:	addi	a0,a0,1
0x00000000000104c8	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104c8 <Sum+292>:	sw	a0,-32(s0)
0x00000000000104cc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x104cc <Sum+296>:	j	0x103fc <Sum+88>
0x00000000000103fc	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x103fc <Sum+88>:	lw	a0,-32(s0)
0x0000000000010400	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10400 <Sum+92>:	li	a1,9
0x0000000000010404	176	    for (Inner = 0; Inner < MAXSIZE; Inner++)
=> 0x10404 <Sum+96>:	blt	a1,a0,0x104d0 <Sum+300>
200		}
=> 0x104d0 <Sum+300>:	j	0x104d4 <Sum+304>
174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d4 <Sum+304>:	lw	a0,-28(s0)
0x00000000000104d8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104d8 <Sum+308>:	addi	a0,a0,1
0x00000000000104dc	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104dc <Sum+312>:	sw	a0,-28(s0)
0x00000000000104e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x104e0 <Sum+316>:	j	0x103e0 <Sum+60>
0x00000000000103e0	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e0 <Sum+60>:	lw	a0,-28(s0)
0x00000000000103e4	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e4 <Sum+64>:	li	a1,9
0x00000000000103e8	174	  for (Outer = 0; Outer < MAXSIZE; Outer++) //Maxsize = 100
=> 0x103e8 <Sum+68>:	blt	a1,a0,0x104e4 <Sum+320>
203	  Postotal = Ptotal;
=> 0x104e4 <Sum+320>:	lw	a0,-36(s0)
0x00000000000104e8	203	  Postotal = Ptotal;
=> 0x104e8 <Sum+324>:	sw	a0,1484(gp)
205	  Poscnt = Pcnt;
=> 0x104ec <Sum+328>:	lw	a0,-44(s0)
0x00000000000104f0	205	  Poscnt = Pcnt;
=> 0x104f0 <Sum+332>:	sw	a0,1488(gp)
207	  Negtotal = Ntotal;
=> 0x104f4 <Sum+336>:	lw	a0,-40(s0)
0x00000000000104f8	207	  Negtotal = Ntotal;
=> 0x104f8 <Sum+340>:	sw	a0,1492(gp)
209	  Negcnt = Ncnt;
=> 0x104fc <Sum+344>:	lw	a0,-48(s0)
0x0000000000010500	209	  Negcnt = Ncnt;
=> 0x10500 <Sum+348>:	sw	a0,1496(gp)
211	  return Negtotal;
=> 0x10504 <Sum+352>:	lw	a0,1492(gp)
0x0000000000010508	211	  return Negtotal;
=> 0x10508 <Sum+356>:	ld	s0,32(sp)
0x000000000001050c in Sum (Array=0x1fad0 <Array>) at cnt.c:211
211	  return Negtotal;
=> 0x1050c <Sum+360>:	ld	ra,40(sp)
0x0000000000010510	211	  return Negtotal;
=> 0x10510 <Sum+364>:	addi	sp,sp,48
0x0000000000010514	211	  return Negtotal;
=> 0x10514 <Sum+368>:	ld	ra,0(t6)
0x0000000000010518	211	  return Negtotal;
=> 0x10518 <Sum+372>:	addi	t6,t6,16
0x000000000001051c	211	  return Negtotal;
=> 0x1051c <Sum+376>:	ret
0x000000000001038c in Test (Array=0x1fad0 <Array>) at cnt.c:108
108	   return Sum(Array);
=> 0x1038c <Test+40>:	ld	s0,16(sp)
0x0000000000010390 in Test (Array=0x1034c <benchmark+36>) at cnt.c:108
108	   return Sum(Array);
=> 0x10390 <Test+44>:	ld	ra,24(sp)
0x0000000000010394	108	   return Sum(Array);
=> 0x10394 <Test+48>:	addi	sp,sp,32
0x0000000000010398	108	   return Sum(Array);
=> 0x10398 <Test+52>:	ld	ra,0(t6)
0x000000000001039c	108	   return Sum(Array);
=> 0x1039c <Test+56>:	addi	t6,t6,16
0x00000000000103a0	108	   return Sum(Array);
=> 0x103a0 <Test+60>:	ret
0x000000000001034c in benchmark () at cnt.c:99
99	   return Test(Array);
=> 0x1034c <benchmark+36>:	ld	s0,0(sp)
0x0000000000010350 in benchmark () at cnt.c:99
99	   return Test(Array);
=> 0x10350 <benchmark+40>:	ld	ra,8(sp)
0x0000000000010354	99	   return Test(Array);
=> 0x10354 <benchmark+44>:	addi	sp,sp,16
0x0000000000010358	99	   return Test(Array);
=> 0x10358 <benchmark+48>:	ld	ra,0(t6)
0x000000000001035c	99	   return Test(Array);
=> 0x1035c <benchmark+52>:	addi	t6,t6,16
0x0000000000010360	99	   return Test(Array);
=> 0x10360 <benchmark+56>:	ret
0x0000000000010244 in main (argc=1, argv=0x3ffffffb78) at main.c:57
57	      result = benchmark ();
=> 0x10244 <main+184>:	sw	a0,-40(s0)
58	    }
=> 0x10248 <main+188>:	j	0x1024c <main+192>
54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1024c <main+192>:	lw	a0,-36(s0)
0x0000000000010250	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10250 <main+196>:	addi	a0,a0,1
0x0000000000010254	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10254 <main+200>:	sw	a0,-36(s0)
0x0000000000010258	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10258 <main+204>:	j	0x10228 <main+156>
0x0000000000010228	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10228 <main+156>:	lw	a0,-36(s0)
0x000000000001022c	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x1022c <main+160>:	li	a1,0
0x0000000000010230	54	  for (i = 0; i < REPEAT_FACTOR; i++)
=> 0x10230 <main+164>:	blt	a1,a0,0x1025c <main+208>
60	  stop_trigger ();
=> 0x1025c <main+208>:	jal	ra,0x102f4 <stop_trigger>
stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:40
40	{
=> 0x102f4 <stop_trigger>:	addi	t6,t6,-16
0x00000000000102f8	40	{
=> 0x102f8 <stop_trigger+4>:	sd	ra,0(t6)
0x00000000000102fc	40	{
=> 0x102fc <stop_trigger+8>:	st	zero,0(t6)
0x0000000000010300	40	{
=> 0x10300 <stop_trigger+12>:	addi	sp,sp,-16
47	}
=> 0x10304 <stop_trigger+16>:	sd	ra,8(sp)
0x0000000000010308	47	}
=> 0x10308 <stop_trigger+20>:	sd	s0,0(sp)
0x000000000001030c	47	}
=> 0x1030c <stop_trigger+24>:	addi	s0,sp,16
0x0000000000010310	47	}
=> 0x10310 <stop_trigger+28>:	ld	s0,0(sp)
0x0000000000010314 in stop_trigger () at ../config/riscv64/boards/generic/boardsupport.c:47
47	}
=> 0x10314 <stop_trigger+32>:	ld	ra,8(sp)
0x0000000000010318	47	}
=> 0x10318 <stop_trigger+36>:	addi	sp,sp,16
0x000000000001031c	47	}
=> 0x1031c <stop_trigger+40>:	ld	ra,0(t6)
0x0000000000010320	47	}
=> 0x10320 <stop_trigger+44>:	addi	t6,t6,16
0x0000000000010324	47	}
=> 0x10324 <stop_trigger+48>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x10260 <main+212>:	lw	a0,-40(s0)
0x0000000000010264	64	  correct = verify_benchmark (result);
=> 0x10264 <main+216>:	jal	ra,0x10700 <verify_benchmark>
verify_benchmark (nt=1) at cnt.c:259
259	int verify_benchmark(int nt) {
=> 0x10700 <verify_benchmark>:	addi	t6,t6,-16
0x0000000000010704	259	int verify_benchmark(int nt) {
=> 0x10704 <verify_benchmark+4>:	sd	ra,0(t6)
0x0000000000010708	259	int verify_benchmark(int nt) {
=> 0x10708 <verify_benchmark+8>:	st	zero,0(t6)
0x000000000001070c	259	int verify_benchmark(int nt) {
=> 0x1070c <verify_benchmark+12>:	addi	sp,sp,-32
0x0000000000010710	259	int verify_benchmark(int nt) {
=> 0x10710 <verify_benchmark+16>:	sd	ra,24(sp)
0x0000000000010714	259	int verify_benchmark(int nt) {
=> 0x10714 <verify_benchmark+20>:	sd	s0,16(sp)
0x0000000000010718	259	int verify_benchmark(int nt) {
=> 0x10718 <verify_benchmark+24>:	addi	s0,sp,32
0x000000000001071c	259	int verify_benchmark(int nt) {
=> 0x1071c <verify_benchmark+28>:	mv	a1,a0
0x0000000000010720	259	int verify_benchmark(int nt) {
=> 0x10720 <verify_benchmark+32>:	sw	a0,-24(s0)
0x0000000000010724	259	int verify_benchmark(int nt) {
=> 0x10724 <verify_benchmark+36>:	lui	a0,0x61
0x0000000000010728	259	int verify_benchmark(int nt) {
=> 0x10728 <verify_benchmark+40>:	addiw	a0,a0,-637
260	  int expected_negtotal = 396675;
=> 0x1072c <verify_benchmark+44>:	sw	a0,-28(s0)
261	  if (expected_negtotal != nt)
=> 0x10730 <verify_benchmark+48>:	lw	a0,-28(s0)
0x0000000000010734	261	  if (expected_negtotal != nt)
=> 0x10734 <verify_benchmark+52>:	lw	a2,-24(s0)
0x0000000000010738	261	  if (expected_negtotal != nt)
=> 0x10738 <verify_benchmark+56>:	beq	a0,a2,0x1074c <verify_benchmark+76>
0x000000000001074c	262	    return 0;
=> 0x1074c <verify_benchmark+76>:	li	a0,1
263	  return 1;
=> 0x10750 <verify_benchmark+80>:	sw	a0,-20(s0)
0x0000000000010754	263	  return 1;
=> 0x10754 <verify_benchmark+84>:	j	0x10758 <verify_benchmark+88>
265	}
=> 0x10758 <verify_benchmark+88>:	lw	a0,-20(s0)
0x000000000001075c	265	}
=> 0x1075c <verify_benchmark+92>:	ld	s0,16(sp)
0x0000000000010760 in verify_benchmark (nt=1) at cnt.c:265
265	}
=> 0x10760 <verify_benchmark+96>:	ld	ra,24(sp)
0x0000000000010764	265	}
=> 0x10764 <verify_benchmark+100>:	addi	sp,sp,32
0x0000000000010768	265	}
=> 0x10768 <verify_benchmark+104>:	ld	ra,0(t6)
0x000000000001076c	265	}
=> 0x1076c <verify_benchmark+108>:	addi	t6,t6,16
0x0000000000010770	265	}
=> 0x10770 <verify_benchmark+112>:	ret
0x0000000000010268 in main (argc=1, argv=0x3ffffffb78) at main.c:64
64	  correct = verify_benchmark (result);
=> 0x10268 <main+220>:	sw	a0,-44(s0)
66	  free(a);
=> 0x1026c <main+224>:	ld	a0,-56(s0)
0x0000000000010270	66	  free(a);
=> 0x10270 <main+228>:	jal	ra,0x1080c <free>
0x000000000001080c in free ()
=> 0x1080c <free>:	mv	a1,a0
0x000000000001080e in free ()
=> 0x1080e <free+2>:	ld	a0,1448(gp)
0x0000000000010812 in free ()
=> 0x10812 <free+6>:	j	0x132e8 <_free_r>
0x00000000000132e8 in _free_r ()
=> 0x132e8 <_free_r>:	beqz	a1,0x133d8 <_free_r+240>
0x00000000000132ea in _free_r ()
=> 0x132ea <_free_r+2>:	addi	sp,sp,-32
0x00000000000132ec in _free_r ()
=> 0x132ec <_free_r+4>:	sd	s0,16(sp)
0x00000000000132ee in _free_r ()
=> 0x132ee <_free_r+6>:	sd	s1,8(sp)
0x00000000000132f0 in _free_r ()
=> 0x132f0 <_free_r+8>:	mv	s0,a1
0x00000000000132f2 in _free_r ()
=> 0x132f2 <_free_r+10>:	mv	s1,a0
0x00000000000132f4 in _free_r ()
=> 0x132f4 <_free_r+12>:	sd	ra,24(sp)
0x00000000000132f6 in _free_r ()
=> 0x132f6 <_free_r+14>:	jal	ra,0x10ee2 <__malloc_lock>
0x0000000000010ee2 in __malloc_lock ()
=> 0x10ee2 <__malloc_lock>:	ret
0x00000000000132fa in _free_r ()
=> 0x132fa <_free_r+18>:	ld	a0,-8(s0)
0x00000000000132fe in _free_r ()
=> 0x132fe <_free_r+22>:	addi	a4,s0,-16
0x0000000000013302 in _free_r ()
=> 0x13302 <_free_r+26>:	lui	a1,0x1f
0x0000000000013306 in _free_r ()
=> 0x13306 <_free_r+30>:	andi	a5,a0,-2
0x000000000001330a in _free_r ()
=> 0x1330a <_free_r+34>:	add	a2,a4,a5
0x000000000001330e in _free_r ()
=> 0x1330e <_free_r+38>:	addi	a1,a1,56
0x0000000000013312 in _free_r ()
=> 0x13312 <_free_r+42>:	ld	a3,8(a2)
0x0000000000013314 in _free_r ()
=> 0x13314 <_free_r+44>:	ld	a6,16(a1)
0x0000000000013318 in _free_r ()
=> 0x13318 <_free_r+48>:	andi	a3,a3,-4
0x000000000001331a in _free_r ()
=> 0x1331a <_free_r+50>:	beq	a6,a2,0x1345e <_free_r+374>
0x000000000001331e in _free_r ()
=> 0x1331e <_free_r+54>:	sd	a3,8(a2)
0x0000000000013320 in _free_r ()
=> 0x13320 <_free_r+56>:	andi	a0,a0,1
0x0000000000013322 in _free_r ()
=> 0x13322 <_free_r+58>:	add	a6,a2,a3
0x0000000000013326 in _free_r ()
=> 0x13326 <_free_r+62>:	bnez	a0,0x133a8 <_free_r+192>
0x00000000000133a8 in _free_r ()
=> 0x133a8 <_free_r+192>:	ld	a0,8(a6)
0x00000000000133ac in _free_r ()
=> 0x133ac <_free_r+196>:	andi	a0,a0,1
0x00000000000133ae in _free_r ()
=> 0x133ae <_free_r+198>:	bnez	a0,0x133da <_free_r+242>
0x00000000000133da in _free_r ()
=> 0x133da <_free_r+242>:	ori	a3,a5,1
0x00000000000133de in _free_r ()
=> 0x133de <_free_r+246>:	sd	a3,-8(s0)
0x00000000000133e2 in _free_r ()
=> 0x133e2 <_free_r+250>:	sd	a5,0(a2)
0x00000000000133e4 in _free_r ()
=> 0x133e4 <_free_r+252>:	li	a3,511
0x00000000000133e8 in _free_r ()
=> 0x133e8 <_free_r+256>:	bgeu	a3,a5,0x1336a <_free_r+130>
0x00000000000133ec in _free_r ()
=> 0x133ec <_free_r+260>:	srli	a3,a5,0x9
0x00000000000133f0 in _free_r ()
=> 0x133f0 <_free_r+264>:	li	a2,4
0x00000000000133f2 in _free_r ()
=> 0x133f2 <_free_r+266>:	bltu	a2,a3,0x13490 <_free_r+424>
0x0000000000013490 in _free_r ()
=> 0x13490 <_free_r+424>:	li	a2,20
0x0000000000013492 in _free_r ()
=> 0x13492 <_free_r+426>:	bgeu	a2,a3,0x134b6 <_free_r+462>
0x0000000000013496 in _free_r ()
=> 0x13496 <_free_r+430>:	li	a2,84
0x000000000001349a in _free_r ()
=> 0x1349a <_free_r+434>:	bltu	a2,a3,0x134ee <_free_r+518>
0x00000000000134ee in _free_r ()
=> 0x134ee <_free_r+518>:	li	a2,340
0x00000000000134f2 in _free_r ()
=> 0x134f2 <_free_r+522>:	bltu	a2,a3,0x1350a <_free_r+546>
0x000000000001350a in _free_r ()
=> 0x1350a <_free_r+546>:	li	a2,1364
0x000000000001350e in _free_r ()
=> 0x1350e <_free_r+550>:	bltu	a2,a3,0x13526 <_free_r+574>
0x0000000000013526 in _free_r ()
=> 0x13526 <_free_r+574>:	li	a0,2032
0x000000000001352a in _free_r ()
=> 0x1352a <_free_r+578>:	li	a2,126
0x000000000001352e in _free_r ()
=> 0x1352e <_free_r+582>:	j	0x13408 <_free_r+288>
0x0000000000013408 in _free_r ()
=> 0x13408 <_free_r+288>:	add	a0,a0,a1
0x000000000001340a in _free_r ()
=> 0x1340a <_free_r+290>:	ld	a3,0(a0)
0x000000000001340c in _free_r ()
=> 0x1340c <_free_r+292>:	addi	a0,a0,-16
0x000000000001340e in _free_r ()
=> 0x1340e <_free_r+294>:	beq	a0,a3,0x134d8 <_free_r+496>
0x00000000000134d8 in _free_r ()
=> 0x134d8 <_free_r+496>:	ld	a6,8(a1)
0x00000000000134dc in _free_r ()
=> 0x134dc <_free_r+500>:	sraiw	a2,a2,0x2
0x00000000000134e0 in _free_r ()
=> 0x134e0 <_free_r+504>:	li	a5,1
0x00000000000134e2 in _free_r ()
=> 0x134e2 <_free_r+506>:	sll	a2,a5,a2
0x00000000000134e6 in _free_r ()
=> 0x134e6 <_free_r+510>:	or	a2,a2,a6
0x00000000000134ea in _free_r ()
=> 0x134ea <_free_r+514>:	sd	a2,8(a1)
0x00000000000134ec in _free_r ()
=> 0x134ec <_free_r+516>:	j	0x13422 <_free_r+314>
0x0000000000013422 in _free_r ()
=> 0x13422 <_free_r+314>:	sd	a0,24(a4)
0x0000000000013424 in _free_r ()
=> 0x13424 <_free_r+316>:	sd	a3,16(a4)
0x0000000000013426 in _free_r ()
=> 0x13426 <_free_r+318>:	ld	s0,16(sp)
0x0000000000013428 in _free_r ()
=> 0x13428 <_free_r+320>:	sd	a4,16(a0)
0x000000000001342a in _free_r ()
=> 0x1342a <_free_r+322>:	ld	ra,24(sp)
0x000000000001342c in _free_r ()
=> 0x1342c <_free_r+324>:	mv	a0,s1
0x000000000001342e in _free_r ()
=> 0x1342e <_free_r+326>:	ld	s1,8(sp)
0x0000000000013430 in _free_r ()
=> 0x13430 <_free_r+328>:	sd	a4,24(a3)
0x0000000000013432 in _free_r ()
=> 0x13432 <_free_r+330>:	addi	sp,sp,32
0x0000000000013434 in _free_r ()
=> 0x13434 <_free_r+332>:	j	0x10ee4 <__malloc_unlock>
0x0000000000010ee4 in __malloc_unlock ()
=> 0x10ee4 <__malloc_unlock>:	ret
main (argc=1, argv=0x3ffffffb78) at main.c:68
68	  return (!correct);
=> 0x10274 <main+232>:	lw	a0,-44(s0)
0x0000000000010278	68	  return (!correct);
=> 0x10278 <main+236>:	seqz	a0,a0
0x000000000001027c	68	  return (!correct);
=> 0x1027c <main+240>:	ld	s0,112(sp)
0x0000000000010280 in main (argc=<error reading variable: Cannot access memory at address 0x2aaabbdcc8>, argv=<error reading variable: Cannot access memory at address 0x2aaabbdcc0>) at main.c:68
68	  return (!correct);
=> 0x10280 <main+244>:	ld	ra,120(sp)
0x0000000000010284	68	  return (!correct);
=> 0x10284 <main+248>:	addi	sp,sp,128
0x0000000000010288	68	  return (!correct);
=> 0x10288 <main+252>:	ret
0x000000000001013a in _start ()
=> 0x1013a <_start+64>:	j	0x10774 <exit>
0x0000000000010774 in exit ()
=> 0x10774 <exit>:	addi	sp,sp,-16
0x0000000000010776 in exit ()
=> 0x10776 <exit+2>:	li	a1,0
0x0000000000010778 in exit ()
=> 0x10778 <exit+4>:	sd	s0,0(sp)
0x000000000001077a in exit ()
=> 0x1077a <exit+6>:	sd	ra,8(sp)
0x000000000001077c in exit ()
=> 0x1077c <exit+8>:	mv	s0,a0
0x000000000001077e in exit ()
=> 0x1077e <exit+10>:	jal	ra,0x12c82 <__call_exitprocs>
0x0000000000012c82 in __call_exitprocs ()
=> 0x12c82 <__call_exitprocs>:	addi	sp,sp,-80
0x0000000000012c84 in __call_exitprocs ()
=> 0x12c84 <__call_exitprocs+2>:	sd	s4,32(sp)
0x0000000000012c86 in __call_exitprocs ()
=> 0x12c86 <__call_exitprocs+4>:	ld	s4,1432(gp)
0x0000000000012c8a in __call_exitprocs ()
=> 0x12c8a <__call_exitprocs+8>:	sd	s2,48(sp)
0x0000000000012c8c in __call_exitprocs ()
=> 0x12c8c <__call_exitprocs+10>:	sd	ra,72(sp)
0x0000000000012c8e in __call_exitprocs ()
=> 0x12c8e <__call_exitprocs+12>:	ld	s2,504(s4)
0x0000000000012c92 in __call_exitprocs ()
=> 0x12c92 <__call_exitprocs+16>:	sd	s0,64(sp)
0x0000000000012c94 in __call_exitprocs ()
=> 0x12c94 <__call_exitprocs+18>:	sd	s1,56(sp)
0x0000000000012c96 in __call_exitprocs ()
=> 0x12c96 <__call_exitprocs+20>:	sd	s3,40(sp)
0x0000000000012c98 in __call_exitprocs ()
=> 0x12c98 <__call_exitprocs+22>:	sd	s5,24(sp)
0x0000000000012c9a in __call_exitprocs ()
=> 0x12c9a <__call_exitprocs+24>:	sd	s6,16(sp)
0x0000000000012c9c in __call_exitprocs ()
=> 0x12c9c <__call_exitprocs+26>:	sd	s7,8(sp)
0x0000000000012c9e in __call_exitprocs ()
=> 0x12c9e <__call_exitprocs+28>:	sd	s8,0(sp)
0x0000000000012ca0 in __call_exitprocs ()
=> 0x12ca0 <__call_exitprocs+30>:	beqz	s2,0x12cd0 <__call_exitprocs+78>
0x0000000000012ca4 in __call_exitprocs ()
=> 0x12ca4 <__call_exitprocs+34>:	mv	s6,a0
0x0000000000012ca6 in __call_exitprocs ()
=> 0x12ca6 <__call_exitprocs+36>:	mv	s7,a1
0x0000000000012ca8 in __call_exitprocs ()
=> 0x12ca8 <__call_exitprocs+38>:	li	s5,1
0x0000000000012caa in __call_exitprocs ()
=> 0x12caa <__call_exitprocs+40>:	li	s3,-1
0x0000000000012cac in __call_exitprocs ()
=> 0x12cac <__call_exitprocs+42>:	lw	s1,8(s2)
0x0000000000012cb0 in __call_exitprocs ()
=> 0x12cb0 <__call_exitprocs+46>:	addiw	s0,s1,-1
0x0000000000012cb4 in __call_exitprocs ()
=> 0x12cb4 <__call_exitprocs+50>:	bltz	s0,0x12cd0 <__call_exitprocs+78>
0x0000000000012cb8 in __call_exitprocs ()
=> 0x12cb8 <__call_exitprocs+54>:	slli	s1,s1,0x3
0x0000000000012cba in __call_exitprocs ()
=> 0x12cba <__call_exitprocs+56>:	add	s1,s1,s2
0x0000000000012cbc in __call_exitprocs ()
=> 0x12cbc <__call_exitprocs+58>:	beqz	s7,0x12ce8 <__call_exitprocs+102>
0x0000000000012ce8 in __call_exitprocs ()
=> 0x12ce8 <__call_exitprocs+102>:	lw	a5,8(s2)
0x0000000000012cec in __call_exitprocs ()
=> 0x12cec <__call_exitprocs+106>:	ld	a4,8(s1)
0x0000000000012cee in __call_exitprocs ()
=> 0x12cee <__call_exitprocs+108>:	addiw	a5,a5,-1
0x0000000000012cf0 in __call_exitprocs ()
=> 0x12cf0 <__call_exitprocs+110>:	beq	a5,s0,0x12d38 <__call_exitprocs+182>
0x0000000000012d38 in __call_exitprocs ()
=> 0x12d38 <__call_exitprocs+182>:	sw	s0,8(s2)
0x0000000000012d3c in __call_exitprocs ()
=> 0x12d3c <__call_exitprocs+186>:	j	0x12cf8 <__call_exitprocs+118>
0x0000000000012cf8 in __call_exitprocs ()
=> 0x12cf8 <__call_exitprocs+118>:	beqz	a4,0x12cc8 <__call_exitprocs+70>
0x0000000000012cfa in __call_exitprocs ()
=> 0x12cfa <__call_exitprocs+120>:	lw	a5,784(s2)
0x0000000000012cfe in __call_exitprocs ()
=> 0x12cfe <__call_exitprocs+124>:	sllw	a3,s5,s0
0x0000000000012d02 in __call_exitprocs ()
=> 0x12d02 <__call_exitprocs+128>:	lw	s8,8(s2)
0x0000000000012d06 in __call_exitprocs ()
=> 0x12d06 <__call_exitprocs+132>:	and	a5,a5,a3
0x0000000000012d08 in __call_exitprocs ()
=> 0x12d08 <__call_exitprocs+134>:	sext.w	a5,a5
0x0000000000012d0a in __call_exitprocs ()
=> 0x12d0a <__call_exitprocs+136>:	bnez	a5,0x12d24 <__call_exitprocs+162>
0x0000000000012d0c in __call_exitprocs ()
=> 0x12d0c <__call_exitprocs+138>:	jalr	a4
0x00000000000131da in __libc_fini_array ()
=> 0x131da <__libc_fini_array>:	addi	sp,sp,-32
0x00000000000131dc in __libc_fini_array ()
=> 0x131dc <__libc_fini_array+2>:	sd	s0,16(sp)
0x00000000000131de in __libc_fini_array ()
=> 0x131de <__libc_fini_array+4>:	lui	a5,0x1f
0x00000000000131e2 in __libc_fini_array ()
=> 0x131e2 <__libc_fini_array+8>:	lui	s0,0x1f
0x00000000000131e6 in __libc_fini_array ()
=> 0x131e6 <__libc_fini_array+12>:	addi	s0,s0,-1816
0x00000000000131ea in __libc_fini_array ()
=> 0x131ea <__libc_fini_array+16>:	addi	a5,a5,-1808
0x00000000000131ee in __libc_fini_array ()
=> 0x131ee <__libc_fini_array+20>:	sub	a5,a5,s0
0x00000000000131f0 in __libc_fini_array ()
=> 0x131f0 <__libc_fini_array+22>:	sd	s1,8(sp)
0x00000000000131f2 in __libc_fini_array ()
=> 0x131f2 <__libc_fini_array+24>:	sd	ra,24(sp)
0x00000000000131f4 in __libc_fini_array ()
=> 0x131f4 <__libc_fini_array+26>:	srai	s1,a5,0x3
0x00000000000131f8 in __libc_fini_array ()
=> 0x131f8 <__libc_fini_array+30>:	beqz	s1,0x13208 <__libc_fini_array+46>
0x00000000000131fa in __libc_fini_array ()
=> 0x131fa <__libc_fini_array+32>:	addi	a5,a5,-8
0x00000000000131fc in __libc_fini_array ()
=> 0x131fc <__libc_fini_array+34>:	add	s0,s0,a5
0x00000000000131fe in __libc_fini_array ()
=> 0x131fe <__libc_fini_array+36>:	ld	a5,0(s0)
0x0000000000013200 in __libc_fini_array ()
=> 0x13200 <__libc_fini_array+38>:	addi	s1,s1,-1
0x0000000000013202 in __libc_fini_array ()
=> 0x13202 <__libc_fini_array+40>:	addi	s0,s0,-8
0x0000000000013204 in __libc_fini_array ()
=> 0x13204 <__libc_fini_array+42>:	jalr	a5
0x000000000001013c in __do_global_dtors_aux ()
=> 0x1013c <__do_global_dtors_aux>:	lbu	a4,1552(gp)
0x0000000000010140 in __do_global_dtors_aux ()
=> 0x10140 <__do_global_dtors_aux+4>:	bnez	a4,0x1016e <__do_global_dtors_aux+50>
0x0000000000010142 in __do_global_dtors_aux ()
=> 0x10142 <__do_global_dtors_aux+6>:	addi	sp,sp,-16
0x0000000000010144 in __do_global_dtors_aux ()
=> 0x10144 <__do_global_dtors_aux+8>:	sd	s0,0(sp)
0x0000000000010146 in __do_global_dtors_aux ()
=> 0x10146 <__do_global_dtors_aux+10>:	mv	s0,a5
0x0000000000010148 in __do_global_dtors_aux ()
=> 0x10148 <__do_global_dtors_aux+12>:	sd	ra,8(sp)
0x000000000001014a in __do_global_dtors_aux ()
=> 0x1014a <__do_global_dtors_aux+14>:	li	a5,0
0x000000000001014e in __do_global_dtors_aux ()
=> 0x1014e <__do_global_dtors_aux+18>:	beqz	a5,0x10160 <__do_global_dtors_aux+36>
0x0000000000010160 in __do_global_dtors_aux ()
=> 0x10160 <__do_global_dtors_aux+36>:	li	a5,1
0x0000000000010162 in __do_global_dtors_aux ()
=> 0x10162 <__do_global_dtors_aux+38>:	ld	ra,8(sp)
0x0000000000010164 in __do_global_dtors_aux ()
=> 0x10164 <__do_global_dtors_aux+40>:	sb	a5,1552(gp)
0x0000000000010168 in __do_global_dtors_aux ()
=> 0x10168 <__do_global_dtors_aux+44>:	ld	s0,0(sp)
0x000000000001016a in __do_global_dtors_aux ()
=> 0x1016a <__do_global_dtors_aux+46>:	addi	sp,sp,16
0x000000000001016c in __do_global_dtors_aux ()
=> 0x1016c <__do_global_dtors_aux+48>:	ret
0x0000000000013206 in __libc_fini_array ()
=> 0x13206 <__libc_fini_array+44>:	bnez	s1,0x131fe <__libc_fini_array+36>
0x0000000000013208 in __libc_fini_array ()
=> 0x13208 <__libc_fini_array+46>:	ld	ra,24(sp)
0x000000000001320a in __libc_fini_array ()
=> 0x1320a <__libc_fini_array+48>:	ld	s0,16(sp)
0x000000000001320c in __libc_fini_array ()
=> 0x1320c <__libc_fini_array+50>:	ld	s1,8(sp)
0x000000000001320e in __libc_fini_array ()
=> 0x1320e <__libc_fini_array+52>:	addi	sp,sp,32
0x0000000000013210 in __libc_fini_array ()
=> 0x13210 <__libc_fini_array+54>:	ret
0x0000000000012d0e in __call_exitprocs ()
=> 0x12d0e <__call_exitprocs+140>:	lw	a4,8(s2)
0x0000000000012d12 in __call_exitprocs ()
=> 0x12d12 <__call_exitprocs+144>:	ld	a5,504(s4)
0x0000000000012d16 in __call_exitprocs ()
=> 0x12d16 <__call_exitprocs+148>:	bne	a4,s8,0x12d1e <__call_exitprocs+156>
0x0000000000012d1a in __call_exitprocs ()
=> 0x12d1a <__call_exitprocs+152>:	beq	a5,s2,0x12cc8 <__call_exitprocs+70>
0x0000000000012cc8 in __call_exitprocs ()
=> 0x12cc8 <__call_exitprocs+70>:	addiw	s0,s0,-1
0x0000000000012cca in __call_exitprocs ()
=> 0x12cca <__call_exitprocs+72>:	addi	s1,s1,-8
0x0000000000012ccc in __call_exitprocs ()
=> 0x12ccc <__call_exitprocs+74>:	bne	s0,s3,0x12cbc <__call_exitprocs+58>
0x0000000000012cd0 in __call_exitprocs ()
=> 0x12cd0 <__call_exitprocs+78>:	ld	ra,72(sp)
0x0000000000012cd2 in __call_exitprocs ()
=> 0x12cd2 <__call_exitprocs+80>:	ld	s0,64(sp)
0x0000000000012cd4 in __call_exitprocs ()
=> 0x12cd4 <__call_exitprocs+82>:	ld	s1,56(sp)
0x0000000000012cd6 in __call_exitprocs ()
=> 0x12cd6 <__call_exitprocs+84>:	ld	s2,48(sp)
0x0000000000012cd8 in __call_exitprocs ()
=> 0x12cd8 <__call_exitprocs+86>:	ld	s3,40(sp)
0x0000000000012cda in __call_exitprocs ()
=> 0x12cda <__call_exitprocs+88>:	ld	s4,32(sp)
0x0000000000012cdc in __call_exitprocs ()
=> 0x12cdc <__call_exitprocs+90>:	ld	s5,24(sp)
0x0000000000012cde in __call_exitprocs ()
=> 0x12cde <__call_exitprocs+92>:	ld	s6,16(sp)
0x0000000000012ce0 in __call_exitprocs ()
=> 0x12ce0 <__call_exitprocs+94>:	ld	s7,8(sp)
0x0000000000012ce2 in __call_exitprocs ()
=> 0x12ce2 <__call_exitprocs+96>:	ld	s8,0(sp)
0x0000000000012ce4 in __call_exitprocs ()
=> 0x12ce4 <__call_exitprocs+98>:	addi	sp,sp,80
0x0000000000012ce6 in __call_exitprocs ()
=> 0x12ce6 <__call_exitprocs+100>:	ret
0x0000000000010782 in exit ()
=> 0x10782 <exit+14>:	ld	a0,1432(gp)
0x0000000000010786 in exit ()
=> 0x10786 <exit+18>:	ld	a5,88(a0)
0x0000000000010788 in exit ()
=> 0x10788 <exit+20>:	beqz	a5,0x1078c <exit+24>
0x000000000001078a in exit ()
=> 0x1078a <exit+22>:	jalr	a5
0x0000000000012f5a in _cleanup_r ()
=> 0x12f5a <_cleanup_r>:	lui	a1,0x19
0x0000000000012f5c in _cleanup_r ()
=> 0x12f5c <_cleanup_r+2>:	addi	a1,a1,1730
0x0000000000012f60 in _cleanup_r ()
=> 0x12f60 <_cleanup_r+6>:	j	0x135bc <_fwalk_reent>
0x00000000000135bc in _fwalk_reent ()
=> 0x135bc <_fwalk_reent>:	addi	sp,sp,-80
0x00000000000135be in _fwalk_reent ()
=> 0x135be <_fwalk_reent+2>:	sd	s2,48(sp)
0x00000000000135c0 in _fwalk_reent ()
=> 0x135c0 <_fwalk_reent+4>:	sd	s3,40(sp)
0x00000000000135c2 in _fwalk_reent ()
=> 0x135c2 <_fwalk_reent+6>:	sd	s4,32(sp)
0x00000000000135c4 in _fwalk_reent ()
=> 0x135c4 <_fwalk_reent+8>:	sd	s5,24(sp)
0x00000000000135c6 in _fwalk_reent ()
=> 0x135c6 <_fwalk_reent+10>:	sd	s6,16(sp)
0x00000000000135c8 in _fwalk_reent ()
=> 0x135c8 <_fwalk_reent+12>:	sd	s7,8(sp)
0x00000000000135ca in _fwalk_reent ()
=> 0x135ca <_fwalk_reent+14>:	sd	s8,0(sp)
0x00000000000135cc in _fwalk_reent ()
=> 0x135cc <_fwalk_reent+16>:	sd	ra,72(sp)
0x00000000000135ce in _fwalk_reent ()
=> 0x135ce <_fwalk_reent+18>:	sd	s0,64(sp)
0x00000000000135d0 in _fwalk_reent ()
=> 0x135d0 <_fwalk_reent+20>:	sd	s1,56(sp)
0x00000000000135d2 in _fwalk_reent ()
=> 0x135d2 <_fwalk_reent+22>:	mv	s8,a0
0x00000000000135d4 in _fwalk_reent ()
=> 0x135d4 <_fwalk_reent+24>:	mv	s4,a1
0x00000000000135d6 in _fwalk_reent ()
=> 0x135d6 <_fwalk_reent+26>:	addi	s2,a0,1312
0x00000000000135da in _fwalk_reent ()
=> 0x135da <_fwalk_reent+30>:	li	s6,0
0x00000000000135dc in _fwalk_reent ()
=> 0x135dc <_fwalk_reent+32>:	li	s5,176
0x00000000000135e0 in _fwalk_reent ()
=> 0x135e0 <_fwalk_reent+36>:	li	s7,1
0x00000000000135e2 in _fwalk_reent ()
=> 0x135e2 <_fwalk_reent+38>:	li	s3,-1
0x00000000000135e4 in _fwalk_reent ()
=> 0x135e4 <_fwalk_reent+40>:	lw	a5,8(s2)
0x00000000000135e8 in _fwalk_reent ()
=> 0x135e8 <_fwalk_reent+44>:	ld	s0,16(s2)
0x00000000000135ec in _fwalk_reent ()
=> 0x135ec <_fwalk_reent+48>:	blez	a5,0x13624 <_fwalk_reent+104>
0x00000000000135f0 in _fwalk_reent ()
=> 0x135f0 <_fwalk_reent+52>:	addiw	s1,a5,-1
0x00000000000135f4 in _fwalk_reent ()
=> 0x135f4 <_fwalk_reent+56>:	slli	s1,s1,0x20
0x00000000000135f6 in _fwalk_reent ()
=> 0x135f6 <_fwalk_reent+58>:	srli	s1,s1,0x20
0x00000000000135f8 in _fwalk_reent ()
=> 0x135f8 <_fwalk_reent+60>:	addi	s1,s1,1
0x00000000000135fa in _fwalk_reent ()
=> 0x135fa <_fwalk_reent+62>:	mul	s1,s1,s5
0x00000000000135fe in _fwalk_reent ()
=> 0x135fe <_fwalk_reent+66>:	add	s1,s1,s0
0x0000000000013600 in _fwalk_reent ()
=> 0x13600 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013604 in _fwalk_reent ()
=> 0x13604 <_fwalk_reent+72>:	bgeu	s7,a5,0x1361c <_fwalk_reent+96>
0x0000000000013608 in _fwalk_reent ()
=> 0x13608 <_fwalk_reent+76>:	lh	a5,18(s0)
0x000000000001360c in _fwalk_reent ()
=> 0x1360c <_fwalk_reent+80>:	mv	a1,s0
0x000000000001360e in _fwalk_reent ()
=> 0x1360e <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013610 in _fwalk_reent ()
=> 0x13610 <_fwalk_reent+84>:	beq	a5,s3,0x1361c <_fwalk_reent+96>
0x0000000000013614 in _fwalk_reent ()
=> 0x13614 <_fwalk_reent+88>:	jalr	s4
0x00000000000196c2 in _fclose_r ()
=> 0x196c2 <_fclose_r>:	beqz	a1,0x196fc <_fclose_r+58>
0x00000000000196c4 in _fclose_r ()
=> 0x196c4 <_fclose_r+2>:	addi	sp,sp,-32
0x00000000000196c6 in _fclose_r ()
=> 0x196c6 <_fclose_r+4>:	sd	s0,16(sp)
0x00000000000196c8 in _fclose_r ()
=> 0x196c8 <_fclose_r+6>:	sd	ra,24(sp)
0x00000000000196ca in _fclose_r ()
=> 0x196ca <_fclose_r+8>:	mv	s0,a0
0x00000000000196cc in _fclose_r ()
=> 0x196cc <_fclose_r+10>:	beqz	a0,0x196d2 <_fclose_r+16>
0x00000000000196ce in _fclose_r ()
=> 0x196ce <_fclose_r+12>:	lw	a5,80(a0)
0x00000000000196d0 in _fclose_r ()
=> 0x196d0 <_fclose_r+14>:	beqz	a5,0x196ec <_fclose_r+42>
0x00000000000196d2 in _fclose_r ()
=> 0x196d2 <_fclose_r+16>:	lh	a5,16(a1)
0x00000000000196d6 in _fclose_r ()
=> 0x196d6 <_fclose_r+20>:	bnez	a5,0x196e2 <_fclose_r+32>
0x00000000000196e2 in _fclose_r ()
=> 0x196e2 <_fclose_r+32>:	mv	a0,s0
0x00000000000196e4 in _fclose_r ()
=> 0x196e4 <_fclose_r+34>:	ld	s0,16(sp)
0x00000000000196e6 in _fclose_r ()
=> 0x196e6 <_fclose_r+36>:	ld	ra,24(sp)
0x00000000000196e8 in _fclose_r ()
=> 0x196e8 <_fclose_r+38>:	addi	sp,sp,32
0x00000000000196ea in _fclose_r ()
=> 0x196ea <_fclose_r+40>:	j	0x19642 <_fclose_r.part.0>
0x0000000000019642 in _fclose_r.part.0 ()
=> 0x19642 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019644 in _fclose_r.part.0 ()
=> 0x19644 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019646 in _fclose_r.part.0 ()
=> 0x19646 <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019648 in _fclose_r.part.0 ()
=> 0x19648 <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x000000000001964a in _fclose_r.part.0 ()
=> 0x1964a <_fclose_r.part.0+8>:	mv	s0,a1
0x000000000001964c in _fclose_r.part.0 ()
=> 0x1964c <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x000000000001964e in _fclose_r.part.0 ()
=> 0x1964e <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019650 in _fclose_r.part.0 ()
=> 0x19650 <_fclose_r.part.0+14>:	jal	ra,0x12d44 <__sflush_r>
0x0000000000012d44 in __sflush_r ()
=> 0x12d44 <__sflush_r>:	lh	a5,16(a1)
0x0000000000012d48 in __sflush_r ()
=> 0x12d48 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000012d4a in __sflush_r ()
=> 0x12d4a <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000012d4c in __sflush_r ()
=> 0x12d4c <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000012d4e in __sflush_r ()
=> 0x12d4e <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000012d50 in __sflush_r ()
=> 0x12d50 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000012d52 in __sflush_r ()
=> 0x12d52 <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000012d54 in __sflush_r ()
=> 0x12d54 <__sflush_r+16>:	andi	a3,a5,8
0x0000000000012d58 in __sflush_r ()
=> 0x12d58 <__sflush_r+20>:	mv	s0,a1
0x0000000000012d5a in __sflush_r ()
=> 0x12d5a <__sflush_r+22>:	mv	s3,a0
0x0000000000012d5c in __sflush_r ()
=> 0x12d5c <__sflush_r+24>:	bnez	a3,0x12e10 <__sflush_r+204>
0x0000000000012d5e in __sflush_r ()
=> 0x12d5e <__sflush_r+26>:	lui	a4,0x1
0x0000000000012d60 in __sflush_r ()
=> 0x12d60 <__sflush_r+28>:	addi	a4,a4,-2048
0x0000000000012d64 in __sflush_r ()
=> 0x12d64 <__sflush_r+32>:	lw	a3,8(a1)
0x0000000000012d66 in __sflush_r ()
=> 0x12d66 <__sflush_r+34>:	or	a5,a5,a4
0x0000000000012d68 in __sflush_r ()
=> 0x12d68 <__sflush_r+36>:	sh	a5,16(a1)
0x0000000000012d6c in __sflush_r ()
=> 0x12d6c <__sflush_r+40>:	blez	a3,0x12e6c <__sflush_r+296>
0x0000000000012e6c in __sflush_r ()
=> 0x12e6c <__sflush_r+296>:	lw	a4,112(a1)
0x0000000000012e6e in __sflush_r ()
=> 0x12e6e <__sflush_r+298>:	bgtz	a4,0x12d70 <__sflush_r+44>
0x0000000000012e72 in __sflush_r ()
=> 0x12e72 <__sflush_r+302>:	j	0x12e00 <__sflush_r+188>
0x0000000000012e00 in __sflush_r ()
=> 0x12e00 <__sflush_r+188>:	li	a0,0
0x0000000000012e02 in __sflush_r ()
=> 0x12e02 <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000012e04 in __sflush_r ()
=> 0x12e04 <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000012e06 in __sflush_r ()
=> 0x12e06 <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000012e08 in __sflush_r ()
=> 0x12e08 <__sflush_r+196>:	ld	s2,16(sp)
0x0000000000012e0a in __sflush_r ()
=> 0x12e0a <__sflush_r+198>:	ld	s3,8(sp)
0x0000000000012e0c in __sflush_r ()
=> 0x12e0c <__sflush_r+200>:	addi	sp,sp,48
0x0000000000012e0e in __sflush_r ()
=> 0x12e0e <__sflush_r+202>:	ret
0x0000000000019654 in _fclose_r.part.0 ()
=> 0x19654 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019656 in _fclose_r.part.0 ()
=> 0x19656 <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019658 in _fclose_r.part.0 ()
=> 0x19658 <_fclose_r.part.0+22>:	beqz	a5,0x19664 <_fclose_r.part.0+34>
0x000000000001965a in _fclose_r.part.0 ()
=> 0x1965a <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x000000000001965c in _fclose_r.part.0 ()
=> 0x1965c <_fclose_r.part.0+26>:	mv	a0,s1
0x000000000001965e in _fclose_r.part.0 ()
=> 0x1965e <_fclose_r.part.0+28>:	jalr	a5
0x0000000000016958 in __sclose ()
=> 0x16958 <__sclose>:	lh	a1,18(a1)
0x000000000001695c in __sclose ()
=> 0x1695c <__sclose+4>:	j	0x19606 <_close_r>
0x0000000000019606 in _close_r ()
=> 0x19606 <_close_r>:	addi	sp,sp,-32
0x0000000000019608 in _close_r ()
=> 0x19608 <_close_r+2>:	sd	s0,16(sp)
0x000000000001960a in _close_r ()
=> 0x1960a <_close_r+4>:	sd	s1,8(sp)
0x000000000001960c in _close_r ()
=> 0x1960c <_close_r+6>:	mv	s0,a0
0x000000000001960e in _close_r ()
=> 0x1960e <_close_r+8>:	mv	a0,a1
0x0000000000019610 in _close_r ()
=> 0x19610 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019612 in _close_r ()
=> 0x19612 <_close_r+12>:	sw	zero,1536(gp)
0x0000000000019616 in _close_r ()
=> 0x19616 <_close_r+16>:	jal	ra,0x1b466 <_close>
0x000000000001b466 in _close ()
=> 0x1b466 <_close>:	addi	sp,sp,-16
0x000000000001b468 in _close ()
=> 0x1b468 <_close+2>:	sd	ra,8(sp)
0x000000000001b46a in _close ()
=> 0x1b46a <_close+4>:	sd	s0,0(sp)
0x000000000001b46c in _close ()
=> 0x1b46c <_close+6>:	li	a7,57
0x000000000001b470 in _close ()
=> 0x1b470 <_close+10>:	ecall
0x000000000001b474 in _close ()
=> 0x1b474 <_close+14>:	mv	s0,a0
0x000000000001b476 in _close ()
=> 0x1b476 <_close+16>:	bltz	a0,0x1b484 <_close+30>
0x000000000001b47a in _close ()
=> 0x1b47a <_close+20>:	sext.w	a0,a0
0x000000000001b47c in _close ()
=> 0x1b47c <_close+22>:	ld	ra,8(sp)
0x000000000001b47e in _close ()
=> 0x1b47e <_close+24>:	ld	s0,0(sp)
0x000000000001b480 in _close ()
=> 0x1b480 <_close+26>:	addi	sp,sp,16
0x000000000001b482 in _close ()
=> 0x1b482 <_close+28>:	ret
0x000000000001961a in _close_r ()
=> 0x1961a <_close_r+20>:	li	a5,-1
0x000000000001961c in _close_r ()
=> 0x1961c <_close_r+22>:	beq	a0,a5,0x1962a <_close_r+36>
0x0000000000019620 in _close_r ()
=> 0x19620 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019622 in _close_r ()
=> 0x19622 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019624 in _close_r ()
=> 0x19624 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019626 in _close_r ()
=> 0x19626 <_close_r+32>:	addi	sp,sp,32
0x0000000000019628 in _close_r ()
=> 0x19628 <_close_r+34>:	ret
0x0000000000019660 in _fclose_r.part.0 ()
=> 0x19660 <_fclose_r.part.0+30>:	bltz	a0,0x196ac <_fclose_r.part.0+106>
0x0000000000019664 in _fclose_r.part.0 ()
=> 0x19664 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019668 in _fclose_r.part.0 ()
=> 0x19668 <_fclose_r.part.0+38>:	andi	a5,a5,128
0x000000000001966c in _fclose_r.part.0 ()
=> 0x1966c <_fclose_r.part.0+42>:	bnez	a5,0x196b8 <_fclose_r.part.0+118>
0x000000000001966e in _fclose_r.part.0 ()
=> 0x1966e <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019670 in _fclose_r.part.0 ()
=> 0x19670 <_fclose_r.part.0+46>:	beqz	a1,0x19684 <_fclose_r.part.0+66>
0x0000000000019684 in _fclose_r.part.0 ()
=> 0x19684 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019686 in _fclose_r.part.0 ()
=> 0x19686 <_fclose_r.part.0+68>:	beqz	a1,0x19692 <_fclose_r.part.0+80>
0x0000000000019692 in _fclose_r.part.0 ()
=> 0x19692 <_fclose_r.part.0+80>:	jal	ra,0x131ba <__sfp_lock_acquire>
0x00000000000131ba in __sfp_lock_acquire ()
=> 0x131ba <__sfp_lock_acquire>:	ret
0x0000000000019696 in _fclose_r.part.0 ()
=> 0x19696 <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x000000000001969a in _fclose_r.part.0 ()
=> 0x1969a <_fclose_r.part.0+88>:	jal	ra,0x131bc <__sfp_lock_release>
0x00000000000131bc in __sfp_lock_release ()
=> 0x131bc <__sfp_lock_release>:	ret
0x000000000001969e in _fclose_r.part.0 ()
=> 0x1969e <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x00000000000196a0 in _fclose_r.part.0 ()
=> 0x196a0 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x00000000000196a2 in _fclose_r.part.0 ()
=> 0x196a2 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x00000000000196a4 in _fclose_r.part.0 ()
=> 0x196a4 <_fclose_r.part.0+98>:	mv	a0,s2
0x00000000000196a6 in _fclose_r.part.0 ()
=> 0x196a6 <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x00000000000196a8 in _fclose_r.part.0 ()
=> 0x196a8 <_fclose_r.part.0+102>:	addi	sp,sp,32
0x00000000000196aa in _fclose_r.part.0 ()
=> 0x196aa <_fclose_r.part.0+104>:	ret
0x0000000000013616 in _fwalk_reent ()
=> 0x13616 <_fwalk_reent+90>:	or	s6,a0,s6
0x000000000001361a in _fwalk_reent ()
=> 0x1361a <_fwalk_reent+94>:	sext.w	s6,s6
0x000000000001361c in _fwalk_reent ()
=> 0x1361c <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013620 in _fwalk_reent ()
=> 0x13620 <_fwalk_reent+100>:	bne	s1,s0,0x13600 <_fwalk_reent+68>
0x0000000000013600 in _fwalk_reent ()
=> 0x13600 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013604 in _fwalk_reent ()
=> 0x13604 <_fwalk_reent+72>:	bgeu	s7,a5,0x1361c <_fwalk_reent+96>
0x0000000000013608 in _fwalk_reent ()
=> 0x13608 <_fwalk_reent+76>:	lh	a5,18(s0)
0x000000000001360c in _fwalk_reent ()
=> 0x1360c <_fwalk_reent+80>:	mv	a1,s0
0x000000000001360e in _fwalk_reent ()
=> 0x1360e <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013610 in _fwalk_reent ()
=> 0x13610 <_fwalk_reent+84>:	beq	a5,s3,0x1361c <_fwalk_reent+96>
0x0000000000013614 in _fwalk_reent ()
=> 0x13614 <_fwalk_reent+88>:	jalr	s4
0x00000000000196c2 in _fclose_r ()
=> 0x196c2 <_fclose_r>:	beqz	a1,0x196fc <_fclose_r+58>
0x00000000000196c4 in _fclose_r ()
=> 0x196c4 <_fclose_r+2>:	addi	sp,sp,-32
0x00000000000196c6 in _fclose_r ()
=> 0x196c6 <_fclose_r+4>:	sd	s0,16(sp)
0x00000000000196c8 in _fclose_r ()
=> 0x196c8 <_fclose_r+6>:	sd	ra,24(sp)
0x00000000000196ca in _fclose_r ()
=> 0x196ca <_fclose_r+8>:	mv	s0,a0
0x00000000000196cc in _fclose_r ()
=> 0x196cc <_fclose_r+10>:	beqz	a0,0x196d2 <_fclose_r+16>
0x00000000000196ce in _fclose_r ()
=> 0x196ce <_fclose_r+12>:	lw	a5,80(a0)
0x00000000000196d0 in _fclose_r ()
=> 0x196d0 <_fclose_r+14>:	beqz	a5,0x196ec <_fclose_r+42>
0x00000000000196d2 in _fclose_r ()
=> 0x196d2 <_fclose_r+16>:	lh	a5,16(a1)
0x00000000000196d6 in _fclose_r ()
=> 0x196d6 <_fclose_r+20>:	bnez	a5,0x196e2 <_fclose_r+32>
0x00000000000196e2 in _fclose_r ()
=> 0x196e2 <_fclose_r+32>:	mv	a0,s0
0x00000000000196e4 in _fclose_r ()
=> 0x196e4 <_fclose_r+34>:	ld	s0,16(sp)
0x00000000000196e6 in _fclose_r ()
=> 0x196e6 <_fclose_r+36>:	ld	ra,24(sp)
0x00000000000196e8 in _fclose_r ()
=> 0x196e8 <_fclose_r+38>:	addi	sp,sp,32
0x00000000000196ea in _fclose_r ()
=> 0x196ea <_fclose_r+40>:	j	0x19642 <_fclose_r.part.0>
0x0000000000019642 in _fclose_r.part.0 ()
=> 0x19642 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019644 in _fclose_r.part.0 ()
=> 0x19644 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019646 in _fclose_r.part.0 ()
=> 0x19646 <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019648 in _fclose_r.part.0 ()
=> 0x19648 <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x000000000001964a in _fclose_r.part.0 ()
=> 0x1964a <_fclose_r.part.0+8>:	mv	s0,a1
0x000000000001964c in _fclose_r.part.0 ()
=> 0x1964c <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x000000000001964e in _fclose_r.part.0 ()
=> 0x1964e <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019650 in _fclose_r.part.0 ()
=> 0x19650 <_fclose_r.part.0+14>:	jal	ra,0x12d44 <__sflush_r>
0x0000000000012d44 in __sflush_r ()
=> 0x12d44 <__sflush_r>:	lh	a5,16(a1)
0x0000000000012d48 in __sflush_r ()
=> 0x12d48 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000012d4a in __sflush_r ()
=> 0x12d4a <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000012d4c in __sflush_r ()
=> 0x12d4c <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000012d4e in __sflush_r ()
=> 0x12d4e <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000012d50 in __sflush_r ()
=> 0x12d50 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000012d52 in __sflush_r ()
=> 0x12d52 <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000012d54 in __sflush_r ()
=> 0x12d54 <__sflush_r+16>:	andi	a3,a5,8
0x0000000000012d58 in __sflush_r ()
=> 0x12d58 <__sflush_r+20>:	mv	s0,a1
0x0000000000012d5a in __sflush_r ()
=> 0x12d5a <__sflush_r+22>:	mv	s3,a0
0x0000000000012d5c in __sflush_r ()
=> 0x12d5c <__sflush_r+24>:	bnez	a3,0x12e10 <__sflush_r+204>
0x0000000000012e10 in __sflush_r ()
=> 0x12e10 <__sflush_r+204>:	ld	s2,24(a1)
0x0000000000012e14 in __sflush_r ()
=> 0x12e14 <__sflush_r+208>:	beqz	s2,0x12e00 <__sflush_r+188>
0x0000000000012e18 in __sflush_r ()
=> 0x12e18 <__sflush_r+212>:	ld	s1,0(a1)
0x0000000000012e1a in __sflush_r ()
=> 0x12e1a <__sflush_r+214>:	slli	a4,a5,0x30
0x0000000000012e1e in __sflush_r ()
=> 0x12e1e <__sflush_r+218>:	srli	a4,a4,0x30
0x0000000000012e20 in __sflush_r ()
=> 0x12e20 <__sflush_r+220>:	andi	a4,a4,3
0x0000000000012e22 in __sflush_r ()
=> 0x12e22 <__sflush_r+222>:	sd	s2,0(a1)
0x0000000000012e26 in __sflush_r ()
=> 0x12e26 <__sflush_r+226>:	subw	s1,s1,s2
0x0000000000012e2a in __sflush_r ()
=> 0x12e2a <__sflush_r+230>:	li	a5,0
0x0000000000012e2c in __sflush_r ()
=> 0x12e2c <__sflush_r+232>:	bnez	a4,0x12e30 <__sflush_r+236>
0x0000000000012e30 in __sflush_r ()
=> 0x12e30 <__sflush_r+236>:	sw	a5,12(s0)
0x0000000000012e32 in __sflush_r ()
=> 0x12e32 <__sflush_r+238>:	bgtz	s1,0x12e3e <__sflush_r+250>
0x0000000000012e36 in __sflush_r ()
=> 0x12e36 <__sflush_r+242>:	j	0x12e00 <__sflush_r+188>
0x0000000000012e00 in __sflush_r ()
=> 0x12e00 <__sflush_r+188>:	li	a0,0
0x0000000000012e02 in __sflush_r ()
=> 0x12e02 <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000012e04 in __sflush_r ()
=> 0x12e04 <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000012e06 in __sflush_r ()
=> 0x12e06 <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000012e08 in __sflush_r ()
=> 0x12e08 <__sflush_r+196>:	ld	s2,16(sp)
0x0000000000012e0a in __sflush_r ()
=> 0x12e0a <__sflush_r+198>:	ld	s3,8(sp)
0x0000000000012e0c in __sflush_r ()
=> 0x12e0c <__sflush_r+200>:	addi	sp,sp,48
0x0000000000012e0e in __sflush_r ()
=> 0x12e0e <__sflush_r+202>:	ret
0x0000000000019654 in _fclose_r.part.0 ()
=> 0x19654 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019656 in _fclose_r.part.0 ()
=> 0x19656 <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019658 in _fclose_r.part.0 ()
=> 0x19658 <_fclose_r.part.0+22>:	beqz	a5,0x19664 <_fclose_r.part.0+34>
0x000000000001965a in _fclose_r.part.0 ()
=> 0x1965a <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x000000000001965c in _fclose_r.part.0 ()
=> 0x1965c <_fclose_r.part.0+26>:	mv	a0,s1
0x000000000001965e in _fclose_r.part.0 ()
=> 0x1965e <_fclose_r.part.0+28>:	jalr	a5
0x0000000000016958 in __sclose ()
=> 0x16958 <__sclose>:	lh	a1,18(a1)
0x000000000001695c in __sclose ()
=> 0x1695c <__sclose+4>:	j	0x19606 <_close_r>
0x0000000000019606 in _close_r ()
=> 0x19606 <_close_r>:	addi	sp,sp,-32
0x0000000000019608 in _close_r ()
=> 0x19608 <_close_r+2>:	sd	s0,16(sp)
0x000000000001960a in _close_r ()
=> 0x1960a <_close_r+4>:	sd	s1,8(sp)
0x000000000001960c in _close_r ()
=> 0x1960c <_close_r+6>:	mv	s0,a0
0x000000000001960e in _close_r ()
=> 0x1960e <_close_r+8>:	mv	a0,a1
0x0000000000019610 in _close_r ()
=> 0x19610 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019612 in _close_r ()
=> 0x19612 <_close_r+12>:	sw	zero,1536(gp)
0x0000000000019616 in _close_r ()
=> 0x19616 <_close_r+16>:	jal	ra,0x1b466 <_close>
0x000000000001b466 in _close ()
=> 0x1b466 <_close>:	addi	sp,sp,-16
0x000000000001b468 in _close ()
=> 0x1b468 <_close+2>:	sd	ra,8(sp)
0x000000000001b46a in _close ()
=> 0x1b46a <_close+4>:	sd	s0,0(sp)
0x000000000001b46c in _close ()
=> 0x1b46c <_close+6>:	li	a7,57
0x000000000001b470 in _close ()
=> 0x1b470 <_close+10>:	ecall
0x000000000001b474 in _close ()
=> 0x1b474 <_close+14>:	mv	s0,a0
0x000000000001b476 in _close ()
=> 0x1b476 <_close+16>:	bltz	a0,0x1b484 <_close+30>
0x000000000001b47a in _close ()
=> 0x1b47a <_close+20>:	sext.w	a0,a0
0x000000000001b47c in _close ()
=> 0x1b47c <_close+22>:	ld	ra,8(sp)
0x000000000001b47e in _close ()
=> 0x1b47e <_close+24>:	ld	s0,0(sp)
0x000000000001b480 in _close ()
=> 0x1b480 <_close+26>:	addi	sp,sp,16
0x000000000001b482 in _close ()
=> 0x1b482 <_close+28>:	ret
0x000000000001961a in _close_r ()
=> 0x1961a <_close_r+20>:	li	a5,-1
0x000000000001961c in _close_r ()
=> 0x1961c <_close_r+22>:	beq	a0,a5,0x1962a <_close_r+36>
0x0000000000019620 in _close_r ()
=> 0x19620 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019622 in _close_r ()
=> 0x19622 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019624 in _close_r ()
=> 0x19624 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019626 in _close_r ()
=> 0x19626 <_close_r+32>:	addi	sp,sp,32
0x0000000000019628 in _close_r ()
=> 0x19628 <_close_r+34>:	ret
0x0000000000019660 in _fclose_r.part.0 ()
=> 0x19660 <_fclose_r.part.0+30>:	bltz	a0,0x196ac <_fclose_r.part.0+106>
0x0000000000019664 in _fclose_r.part.0 ()
=> 0x19664 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019668 in _fclose_r.part.0 ()
=> 0x19668 <_fclose_r.part.0+38>:	andi	a5,a5,128
0x000000000001966c in _fclose_r.part.0 ()
=> 0x1966c <_fclose_r.part.0+42>:	bnez	a5,0x196b8 <_fclose_r.part.0+118>
0x00000000000196b8 in _fclose_r.part.0 ()
=> 0x196b8 <_fclose_r.part.0+118>:	ld	a1,24(s0)
0x00000000000196ba in _fclose_r.part.0 ()
=> 0x196ba <_fclose_r.part.0+120>:	mv	a0,s1
0x00000000000196bc in _fclose_r.part.0 ()
=> 0x196bc <_fclose_r.part.0+122>:	jal	ra,0x132e8 <_free_r>
0x00000000000132e8 in _free_r ()
=> 0x132e8 <_free_r>:	beqz	a1,0x133d8 <_free_r+240>
0x00000000000132ea in _free_r ()
=> 0x132ea <_free_r+2>:	addi	sp,sp,-32
0x00000000000132ec in _free_r ()
=> 0x132ec <_free_r+4>:	sd	s0,16(sp)
0x00000000000132ee in _free_r ()
=> 0x132ee <_free_r+6>:	sd	s1,8(sp)
0x00000000000132f0 in _free_r ()
=> 0x132f0 <_free_r+8>:	mv	s0,a1
0x00000000000132f2 in _free_r ()
=> 0x132f2 <_free_r+10>:	mv	s1,a0
0x00000000000132f4 in _free_r ()
=> 0x132f4 <_free_r+12>:	sd	ra,24(sp)
0x00000000000132f6 in _free_r ()
=> 0x132f6 <_free_r+14>:	jal	ra,0x10ee2 <__malloc_lock>
0x0000000000010ee2 in __malloc_lock ()
=> 0x10ee2 <__malloc_lock>:	ret
0x00000000000132fa in _free_r ()
=> 0x132fa <_free_r+18>:	ld	a0,-8(s0)
0x00000000000132fe in _free_r ()
=> 0x132fe <_free_r+22>:	addi	a4,s0,-16
0x0000000000013302 in _free_r ()
=> 0x13302 <_free_r+26>:	lui	a1,0x1f
0x0000000000013306 in _free_r ()
=> 0x13306 <_free_r+30>:	andi	a5,a0,-2
0x000000000001330a in _free_r ()
=> 0x1330a <_free_r+34>:	add	a2,a4,a5
0x000000000001330e in _free_r ()
=> 0x1330e <_free_r+38>:	addi	a1,a1,56
0x0000000000013312 in _free_r ()
=> 0x13312 <_free_r+42>:	ld	a3,8(a2)
0x0000000000013314 in _free_r ()
=> 0x13314 <_free_r+44>:	ld	a6,16(a1)
0x0000000000013318 in _free_r ()
=> 0x13318 <_free_r+48>:	andi	a3,a3,-4
0x000000000001331a in _free_r ()
=> 0x1331a <_free_r+50>:	beq	a6,a2,0x1345e <_free_r+374>
0x000000000001345e in _free_r ()
=> 0x1345e <_free_r+374>:	andi	a0,a0,1
0x0000000000013460 in _free_r ()
=> 0x13460 <_free_r+376>:	add	a5,a5,a3
0x0000000000013462 in _free_r ()
=> 0x13462 <_free_r+378>:	bnez	a0,0x13474 <_free_r+396>
0x0000000000013464 in _free_r ()
=> 0x13464 <_free_r+380>:	ld	a0,-16(s0)
0x0000000000013468 in _free_r ()
=> 0x13468 <_free_r+384>:	sub	a4,a4,a0
0x000000000001346a in _free_r ()
=> 0x1346a <_free_r+386>:	ld	a3,24(a4)
0x000000000001346c in _free_r ()
=> 0x1346c <_free_r+388>:	ld	a2,16(a4)
0x000000000001346e in _free_r ()
=> 0x1346e <_free_r+390>:	add	a5,a5,a0
0x0000000000013470 in _free_r ()
=> 0x13470 <_free_r+392>:	sd	a3,24(a2)
0x0000000000013472 in _free_r ()
=> 0x13472 <_free_r+394>:	sd	a2,16(a3)
0x0000000000013474 in _free_r ()
=> 0x13474 <_free_r+396>:	ori	a2,a5,1
0x0000000000013478 in _free_r ()
=> 0x13478 <_free_r+400>:	ld	a3,1464(gp)
0x000000000001347c in _free_r ()
=> 0x1347c <_free_r+404>:	sd	a2,8(a4)
0x000000000001347e in _free_r ()
=> 0x1347e <_free_r+406>:	sd	a4,16(a1)
0x0000000000013480 in _free_r ()
=> 0x13480 <_free_r+408>:	bltu	a5,a3,0x1339a <_free_r+178>
0x0000000000013484 in _free_r ()
=> 0x13484 <_free_r+412>:	ld	a1,1520(gp)
0x0000000000013488 in _free_r ()
=> 0x13488 <_free_r+416>:	mv	a0,s1
0x000000000001348a in _free_r ()
=> 0x1348a <_free_r+418>:	jal	ra,0x13212 <_malloc_trim_r>
0x0000000000013212 in _malloc_trim_r ()
=> 0x13212 <_malloc_trim_r>:	addi	sp,sp,-48
0x0000000000013214 in _malloc_trim_r ()
=> 0x13214 <_malloc_trim_r+2>:	sd	s3,8(sp)
0x0000000000013216 in _malloc_trim_r ()
=> 0x13216 <_malloc_trim_r+4>:	lui	s3,0x1f
0x000000000001321a in _malloc_trim_r ()
=> 0x1321a <_malloc_trim_r+8>:	sd	s0,32(sp)
0x000000000001321c in _malloc_trim_r ()
=> 0x1321c <_malloc_trim_r+10>:	sd	s1,24(sp)
0x000000000001321e in _malloc_trim_r ()
=> 0x1321e <_malloc_trim_r+12>:	sd	s2,16(sp)
0x0000000000013220 in _malloc_trim_r ()
=> 0x13220 <_malloc_trim_r+14>:	sd	s4,0(sp)
0x0000000000013222 in _malloc_trim_r ()
=> 0x13222 <_malloc_trim_r+16>:	sd	ra,40(sp)
0x0000000000013224 in _malloc_trim_r ()
=> 0x13224 <_malloc_trim_r+18>:	mv	s4,a1
0x0000000000013226 in _malloc_trim_r ()
=> 0x13226 <_malloc_trim_r+20>:	mv	s2,a0
0x0000000000013228 in _malloc_trim_r ()
=> 0x13228 <_malloc_trim_r+22>:	addi	s3,s3,56
0x000000000001322c in _malloc_trim_r ()
=> 0x1322c <_malloc_trim_r+26>:	jal	ra,0x10ee2 <__malloc_lock>
0x0000000000010ee2 in __malloc_lock ()
=> 0x10ee2 <__malloc_lock>:	ret
0x0000000000013230 in _malloc_trim_r ()
=> 0x13230 <_malloc_trim_r+30>:	ld	a4,16(s3)
0x0000000000013234 in _malloc_trim_r ()
=> 0x13234 <_malloc_trim_r+34>:	lui	a5,0x1
0x0000000000013236 in _malloc_trim_r ()
=> 0x13236 <_malloc_trim_r+36>:	addi	s0,a5,-33
0x000000000001323a in _malloc_trim_r ()
=> 0x1323a <_malloc_trim_r+40>:	ld	s1,8(a4)
0x000000000001323c in _malloc_trim_r ()
=> 0x1323c <_malloc_trim_r+42>:	sub	s0,s0,s4
0x0000000000013240 in _malloc_trim_r ()
=> 0x13240 <_malloc_trim_r+46>:	andi	s1,s1,-4
0x0000000000013242 in _malloc_trim_r ()
=> 0x13242 <_malloc_trim_r+48>:	add	s0,s0,s1
0x0000000000013244 in _malloc_trim_r ()
=> 0x13244 <_malloc_trim_r+50>:	srli	s0,s0,0xc
0x0000000000013246 in _malloc_trim_r ()
=> 0x13246 <_malloc_trim_r+52>:	addi	s0,s0,-1
0x0000000000013248 in _malloc_trim_r ()
=> 0x13248 <_malloc_trim_r+54>:	slli	s0,s0,0xc
0x000000000001324a in _malloc_trim_r ()
=> 0x1324a <_malloc_trim_r+56>:	blt	s0,a5,0x13260 <_malloc_trim_r+78>
0x000000000001324e in _malloc_trim_r ()
=> 0x1324e <_malloc_trim_r+60>:	li	a1,0
0x0000000000013250 in _malloc_trim_r ()
=> 0x13250 <_malloc_trim_r+62>:	mv	a0,s2
0x0000000000013252 in _malloc_trim_r ()
=> 0x13252 <_malloc_trim_r+64>:	jal	ra,0x10f34 <_sbrk_r>
0x0000000000010f34 in _sbrk_r ()
=> 0x10f34 <_sbrk_r>:	addi	sp,sp,-32
0x0000000000010f36 in _sbrk_r ()
=> 0x10f36 <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000010f38 in _sbrk_r ()
=> 0x10f38 <_sbrk_r+4>:	sd	s1,8(sp)
0x0000000000010f3a in _sbrk_r ()
=> 0x10f3a <_sbrk_r+6>:	mv	s0,a0
0x0000000000010f3c in _sbrk_r ()
=> 0x10f3c <_sbrk_r+8>:	mv	a0,a1
0x0000000000010f3e in _sbrk_r ()
=> 0x10f3e <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000010f40 in _sbrk_r ()
=> 0x10f40 <_sbrk_r+12>:	sw	zero,1536(gp)
0x0000000000010f44 in _sbrk_r ()
=> 0x10f44 <_sbrk_r+16>:	jal	ra,0x1b58a <_sbrk>
0x000000000001b58a in _sbrk ()
=> 0x1b58a <_sbrk>:	ld	a4,1544(gp)
0x000000000001b58e in _sbrk ()
=> 0x1b58e <_sbrk+4>:	addi	sp,sp,-16
0x000000000001b590 in _sbrk ()
=> 0x1b590 <_sbrk+6>:	sd	ra,8(sp)
0x000000000001b592 in _sbrk ()
=> 0x1b592 <_sbrk+8>:	mv	a5,a0
0x000000000001b594 in _sbrk ()
=> 0x1b594 <_sbrk+10>:	bnez	a4,0x1b5ac <_sbrk+34>
0x000000000001b5ac in _sbrk ()
=> 0x1b5ac <_sbrk+34>:	li	a7,214
0x000000000001b5b0 in _sbrk ()
=> 0x1b5b0 <_sbrk+38>:	add	a0,a5,a4
0x000000000001b5b4 in _sbrk ()
=> 0x1b5b4 <_sbrk+42>:	ecall
0x000000000001b5b8 in _sbrk ()
=> 0x1b5b8 <_sbrk+46>:	ld	a4,1544(gp)
0x000000000001b5bc in _sbrk ()
=> 0x1b5bc <_sbrk+50>:	add	a5,a5,a4
0x000000000001b5be in _sbrk ()
=> 0x1b5be <_sbrk+52>:	bne	a0,a5,0x1b5ce <_sbrk+68>
0x000000000001b5c2 in _sbrk ()
=> 0x1b5c2 <_sbrk+56>:	ld	ra,8(sp)
0x000000000001b5c4 in _sbrk ()
=> 0x1b5c4 <_sbrk+58>:	sd	a0,1544(gp)
0x000000000001b5c8 in _sbrk ()
=> 0x1b5c8 <_sbrk+62>:	mv	a0,a4
0x000000000001b5ca in _sbrk ()
=> 0x1b5ca <_sbrk+64>:	addi	sp,sp,16
0x000000000001b5cc in _sbrk ()
=> 0x1b5cc <_sbrk+66>:	ret
0x0000000000010f48 in _sbrk_r ()
=> 0x10f48 <_sbrk_r+20>:	li	a5,-1
0x0000000000010f4a in _sbrk_r ()
=> 0x10f4a <_sbrk_r+22>:	beq	a0,a5,0x10f58 <_sbrk_r+36>
0x0000000000010f4e in _sbrk_r ()
=> 0x10f4e <_sbrk_r+26>:	ld	ra,24(sp)
0x0000000000010f50 in _sbrk_r ()
=> 0x10f50 <_sbrk_r+28>:	ld	s0,16(sp)
0x0000000000010f52 in _sbrk_r ()
=> 0x10f52 <_sbrk_r+30>:	ld	s1,8(sp)
0x0000000000010f54 in _sbrk_r ()
=> 0x10f54 <_sbrk_r+32>:	addi	sp,sp,32
0x0000000000010f56 in _sbrk_r ()
=> 0x10f56 <_sbrk_r+34>:	ret
0x0000000000013256 in _malloc_trim_r ()
=> 0x13256 <_malloc_trim_r+68>:	ld	a5,16(s3)
0x000000000001325a in _malloc_trim_r ()
=> 0x1325a <_malloc_trim_r+72>:	add	a5,a5,s1
0x000000000001325c in _malloc_trim_r ()
=> 0x1325c <_malloc_trim_r+74>:	beq	a0,a5,0x13278 <_malloc_trim_r+102>
0x0000000000013278 in _malloc_trim_r ()
=> 0x13278 <_malloc_trim_r+102>:	neg	a1,s0
0x000000000001327c in _malloc_trim_r ()
=> 0x1327c <_malloc_trim_r+106>:	mv	a0,s2
0x000000000001327e in _malloc_trim_r ()
=> 0x1327e <_malloc_trim_r+108>:	jal	ra,0x10f34 <_sbrk_r>
0x0000000000010f34 in _sbrk_r ()
=> 0x10f34 <_sbrk_r>:	addi	sp,sp,-32
0x0000000000010f36 in _sbrk_r ()
=> 0x10f36 <_sbrk_r+2>:	sd	s0,16(sp)
0x0000000000010f38 in _sbrk_r ()
=> 0x10f38 <_sbrk_r+4>:	sd	s1,8(sp)
0x0000000000010f3a in _sbrk_r ()
=> 0x10f3a <_sbrk_r+6>:	mv	s0,a0
0x0000000000010f3c in _sbrk_r ()
=> 0x10f3c <_sbrk_r+8>:	mv	a0,a1
0x0000000000010f3e in _sbrk_r ()
=> 0x10f3e <_sbrk_r+10>:	sd	ra,24(sp)
0x0000000000010f40 in _sbrk_r ()
=> 0x10f40 <_sbrk_r+12>:	sw	zero,1536(gp)
0x0000000000010f44 in _sbrk_r ()
=> 0x10f44 <_sbrk_r+16>:	jal	ra,0x1b58a <_sbrk>
0x000000000001b58a in _sbrk ()
=> 0x1b58a <_sbrk>:	ld	a4,1544(gp)
0x000000000001b58e in _sbrk ()
=> 0x1b58e <_sbrk+4>:	addi	sp,sp,-16
0x000000000001b590 in _sbrk ()
=> 0x1b590 <_sbrk+6>:	sd	ra,8(sp)
0x000000000001b592 in _sbrk ()
=> 0x1b592 <_sbrk+8>:	mv	a5,a0
0x000000000001b594 in _sbrk ()
=> 0x1b594 <_sbrk+10>:	bnez	a4,0x1b5ac <_sbrk+34>
0x000000000001b5ac in _sbrk ()
=> 0x1b5ac <_sbrk+34>:	li	a7,214
0x000000000001b5b0 in _sbrk ()
=> 0x1b5b0 <_sbrk+38>:	add	a0,a5,a4
0x000000000001b5b4 in _sbrk ()
=> 0x1b5b4 <_sbrk+42>:	ecall
0x000000000001b5b8 in _sbrk ()
=> 0x1b5b8 <_sbrk+46>:	ld	a4,1544(gp)
0x000000000001b5bc in _sbrk ()
=> 0x1b5bc <_sbrk+50>:	add	a5,a5,a4
0x000000000001b5be in _sbrk ()
=> 0x1b5be <_sbrk+52>:	bne	a0,a5,0x1b5ce <_sbrk+68>
0x000000000001b5c2 in _sbrk ()
=> 0x1b5c2 <_sbrk+56>:	ld	ra,8(sp)
0x000000000001b5c4 in _sbrk ()
=> 0x1b5c4 <_sbrk+58>:	sd	a0,1544(gp)
0x000000000001b5c8 in _sbrk ()
=> 0x1b5c8 <_sbrk+62>:	mv	a0,a4
0x000000000001b5ca in _sbrk ()
=> 0x1b5ca <_sbrk+64>:	addi	sp,sp,16
0x000000000001b5cc in _sbrk ()
=> 0x1b5cc <_sbrk+66>:	ret
0x0000000000010f48 in _sbrk_r ()
=> 0x10f48 <_sbrk_r+20>:	li	a5,-1
0x0000000000010f4a in _sbrk_r ()
=> 0x10f4a <_sbrk_r+22>:	beq	a0,a5,0x10f58 <_sbrk_r+36>
0x0000000000010f4e in _sbrk_r ()
=> 0x10f4e <_sbrk_r+26>:	ld	ra,24(sp)
0x0000000000010f50 in _sbrk_r ()
=> 0x10f50 <_sbrk_r+28>:	ld	s0,16(sp)
0x0000000000010f52 in _sbrk_r ()
=> 0x10f52 <_sbrk_r+30>:	ld	s1,8(sp)
0x0000000000010f54 in _sbrk_r ()
=> 0x10f54 <_sbrk_r+32>:	addi	sp,sp,32
0x0000000000010f56 in _sbrk_r ()
=> 0x10f56 <_sbrk_r+34>:	ret
0x0000000000013282 in _malloc_trim_r ()
=> 0x13282 <_malloc_trim_r+112>:	li	a5,-1
0x0000000000013284 in _malloc_trim_r ()
=> 0x13284 <_malloc_trim_r+114>:	beq	a0,a5,0x132bc <_malloc_trim_r+170>
0x0000000000013288 in _malloc_trim_r ()
=> 0x13288 <_malloc_trim_r+118>:	lui	a5,0x20
0x000000000001328c in _malloc_trim_r ()
=> 0x1328c <_malloc_trim_r+122>:	addi	a5,a5,-928
0x0000000000013290 in _malloc_trim_r ()
=> 0x13290 <_malloc_trim_r+126>:	lw	a4,0(a5)
0x0000000000013292 in _malloc_trim_r ()
=> 0x13292 <_malloc_trim_r+128>:	ld	a3,16(s3)
0x0000000000013296 in _malloc_trim_r ()
=> 0x13296 <_malloc_trim_r+132>:	sub	s1,s1,s0
0x0000000000013298 in _malloc_trim_r ()
=> 0x13298 <_malloc_trim_r+134>:	ori	s1,s1,1
0x000000000001329c in _malloc_trim_r ()
=> 0x1329c <_malloc_trim_r+138>:	subw	s0,a4,s0
0x00000000000132a0 in _malloc_trim_r ()
=> 0x132a0 <_malloc_trim_r+142>:	mv	a0,s2
0x00000000000132a2 in _malloc_trim_r ()
=> 0x132a2 <_malloc_trim_r+144>:	sd	s1,8(a3)
0x00000000000132a4 in _malloc_trim_r ()
=> 0x132a4 <_malloc_trim_r+146>:	sw	s0,0(a5)
0x00000000000132a6 in _malloc_trim_r ()
=> 0x132a6 <_malloc_trim_r+148>:	jal	ra,0x10ee4 <__malloc_unlock>
0x0000000000010ee4 in __malloc_unlock ()
=> 0x10ee4 <__malloc_unlock>:	ret
0x00000000000132aa in _malloc_trim_r ()
=> 0x132aa <_malloc_trim_r+152>:	ld	ra,40(sp)
0x00000000000132ac in _malloc_trim_r ()
=> 0x132ac <_malloc_trim_r+154>:	ld	s0,32(sp)
0x00000000000132ae in _malloc_trim_r ()
=> 0x132ae <_malloc_trim_r+156>:	ld	s1,24(sp)
0x00000000000132b0 in _malloc_trim_r ()
=> 0x132b0 <_malloc_trim_r+158>:	ld	s2,16(sp)
0x00000000000132b2 in _malloc_trim_r ()
=> 0x132b2 <_malloc_trim_r+160>:	ld	s3,8(sp)
0x00000000000132b4 in _malloc_trim_r ()
=> 0x132b4 <_malloc_trim_r+162>:	ld	s4,0(sp)
0x00000000000132b6 in _malloc_trim_r ()
=> 0x132b6 <_malloc_trim_r+164>:	li	a0,1
0x00000000000132b8 in _malloc_trim_r ()
=> 0x132b8 <_malloc_trim_r+166>:	addi	sp,sp,48
0x00000000000132ba in _malloc_trim_r ()
=> 0x132ba <_malloc_trim_r+168>:	ret
0x000000000001348e in _free_r ()
=> 0x1348e <_free_r+422>:	j	0x1339a <_free_r+178>
0x000000000001339a in _free_r ()
=> 0x1339a <_free_r+178>:	ld	s0,16(sp)
0x000000000001339c in _free_r ()
=> 0x1339c <_free_r+180>:	ld	ra,24(sp)
0x000000000001339e in _free_r ()
=> 0x1339e <_free_r+182>:	mv	a0,s1
0x00000000000133a0 in _free_r ()
=> 0x133a0 <_free_r+184>:	ld	s1,8(sp)
0x00000000000133a2 in _free_r ()
=> 0x133a2 <_free_r+186>:	addi	sp,sp,32
0x00000000000133a4 in _free_r ()
=> 0x133a4 <_free_r+188>:	j	0x10ee4 <__malloc_unlock>
0x0000000000010ee4 in __malloc_unlock ()
=> 0x10ee4 <__malloc_unlock>:	ret
0x00000000000196c0 in _fclose_r.part.0 ()
=> 0x196c0 <_fclose_r.part.0+126>:	j	0x1966e <_fclose_r.part.0+44>
0x000000000001966e in _fclose_r.part.0 ()
=> 0x1966e <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019670 in _fclose_r.part.0 ()
=> 0x19670 <_fclose_r.part.0+46>:	beqz	a1,0x19684 <_fclose_r.part.0+66>
0x0000000000019684 in _fclose_r.part.0 ()
=> 0x19684 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019686 in _fclose_r.part.0 ()
=> 0x19686 <_fclose_r.part.0+68>:	beqz	a1,0x19692 <_fclose_r.part.0+80>
0x0000000000019692 in _fclose_r.part.0 ()
=> 0x19692 <_fclose_r.part.0+80>:	jal	ra,0x131ba <__sfp_lock_acquire>
0x00000000000131ba in __sfp_lock_acquire ()
=> 0x131ba <__sfp_lock_acquire>:	ret
0x0000000000019696 in _fclose_r.part.0 ()
=> 0x19696 <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x000000000001969a in _fclose_r.part.0 ()
=> 0x1969a <_fclose_r.part.0+88>:	jal	ra,0x131bc <__sfp_lock_release>
0x00000000000131bc in __sfp_lock_release ()
=> 0x131bc <__sfp_lock_release>:	ret
0x000000000001969e in _fclose_r.part.0 ()
=> 0x1969e <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x00000000000196a0 in _fclose_r.part.0 ()
=> 0x196a0 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x00000000000196a2 in _fclose_r.part.0 ()
=> 0x196a2 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x00000000000196a4 in _fclose_r.part.0 ()
=> 0x196a4 <_fclose_r.part.0+98>:	mv	a0,s2
0x00000000000196a6 in _fclose_r.part.0 ()
=> 0x196a6 <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x00000000000196a8 in _fclose_r.part.0 ()
=> 0x196a8 <_fclose_r.part.0+102>:	addi	sp,sp,32
0x00000000000196aa in _fclose_r.part.0 ()
=> 0x196aa <_fclose_r.part.0+104>:	ret
0x0000000000013616 in _fwalk_reent ()
=> 0x13616 <_fwalk_reent+90>:	or	s6,a0,s6
0x000000000001361a in _fwalk_reent ()
=> 0x1361a <_fwalk_reent+94>:	sext.w	s6,s6
0x000000000001361c in _fwalk_reent ()
=> 0x1361c <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013620 in _fwalk_reent ()
=> 0x13620 <_fwalk_reent+100>:	bne	s1,s0,0x13600 <_fwalk_reent+68>
0x0000000000013600 in _fwalk_reent ()
=> 0x13600 <_fwalk_reent+68>:	lhu	a5,16(s0)
0x0000000000013604 in _fwalk_reent ()
=> 0x13604 <_fwalk_reent+72>:	bgeu	s7,a5,0x1361c <_fwalk_reent+96>
0x0000000000013608 in _fwalk_reent ()
=> 0x13608 <_fwalk_reent+76>:	lh	a5,18(s0)
0x000000000001360c in _fwalk_reent ()
=> 0x1360c <_fwalk_reent+80>:	mv	a1,s0
0x000000000001360e in _fwalk_reent ()
=> 0x1360e <_fwalk_reent+82>:	mv	a0,s8
0x0000000000013610 in _fwalk_reent ()
=> 0x13610 <_fwalk_reent+84>:	beq	a5,s3,0x1361c <_fwalk_reent+96>
0x0000000000013614 in _fwalk_reent ()
=> 0x13614 <_fwalk_reent+88>:	jalr	s4
0x00000000000196c2 in _fclose_r ()
=> 0x196c2 <_fclose_r>:	beqz	a1,0x196fc <_fclose_r+58>
0x00000000000196c4 in _fclose_r ()
=> 0x196c4 <_fclose_r+2>:	addi	sp,sp,-32
0x00000000000196c6 in _fclose_r ()
=> 0x196c6 <_fclose_r+4>:	sd	s0,16(sp)
0x00000000000196c8 in _fclose_r ()
=> 0x196c8 <_fclose_r+6>:	sd	ra,24(sp)
0x00000000000196ca in _fclose_r ()
=> 0x196ca <_fclose_r+8>:	mv	s0,a0
0x00000000000196cc in _fclose_r ()
=> 0x196cc <_fclose_r+10>:	beqz	a0,0x196d2 <_fclose_r+16>
0x00000000000196ce in _fclose_r ()
=> 0x196ce <_fclose_r+12>:	lw	a5,80(a0)
0x00000000000196d0 in _fclose_r ()
=> 0x196d0 <_fclose_r+14>:	beqz	a5,0x196ec <_fclose_r+42>
0x00000000000196d2 in _fclose_r ()
=> 0x196d2 <_fclose_r+16>:	lh	a5,16(a1)
0x00000000000196d6 in _fclose_r ()
=> 0x196d6 <_fclose_r+20>:	bnez	a5,0x196e2 <_fclose_r+32>
0x00000000000196e2 in _fclose_r ()
=> 0x196e2 <_fclose_r+32>:	mv	a0,s0
0x00000000000196e4 in _fclose_r ()
=> 0x196e4 <_fclose_r+34>:	ld	s0,16(sp)
0x00000000000196e6 in _fclose_r ()
=> 0x196e6 <_fclose_r+36>:	ld	ra,24(sp)
0x00000000000196e8 in _fclose_r ()
=> 0x196e8 <_fclose_r+38>:	addi	sp,sp,32
0x00000000000196ea in _fclose_r ()
=> 0x196ea <_fclose_r+40>:	j	0x19642 <_fclose_r.part.0>
0x0000000000019642 in _fclose_r.part.0 ()
=> 0x19642 <_fclose_r.part.0>:	addi	sp,sp,-32
0x0000000000019644 in _fclose_r.part.0 ()
=> 0x19644 <_fclose_r.part.0+2>:	sd	s0,16(sp)
0x0000000000019646 in _fclose_r.part.0 ()
=> 0x19646 <_fclose_r.part.0+4>:	sd	s1,8(sp)
0x0000000000019648 in _fclose_r.part.0 ()
=> 0x19648 <_fclose_r.part.0+6>:	sd	s2,0(sp)
0x000000000001964a in _fclose_r.part.0 ()
=> 0x1964a <_fclose_r.part.0+8>:	mv	s0,a1
0x000000000001964c in _fclose_r.part.0 ()
=> 0x1964c <_fclose_r.part.0+10>:	sd	ra,24(sp)
0x000000000001964e in _fclose_r.part.0 ()
=> 0x1964e <_fclose_r.part.0+12>:	mv	s1,a0
0x0000000000019650 in _fclose_r.part.0 ()
=> 0x19650 <_fclose_r.part.0+14>:	jal	ra,0x12d44 <__sflush_r>
0x0000000000012d44 in __sflush_r ()
=> 0x12d44 <__sflush_r>:	lh	a5,16(a1)
0x0000000000012d48 in __sflush_r ()
=> 0x12d48 <__sflush_r+4>:	addi	sp,sp,-48
0x0000000000012d4a in __sflush_r ()
=> 0x12d4a <__sflush_r+6>:	sd	s0,32(sp)
0x0000000000012d4c in __sflush_r ()
=> 0x12d4c <__sflush_r+8>:	sd	s3,8(sp)
0x0000000000012d4e in __sflush_r ()
=> 0x12d4e <__sflush_r+10>:	sd	ra,40(sp)
0x0000000000012d50 in __sflush_r ()
=> 0x12d50 <__sflush_r+12>:	sd	s1,24(sp)
0x0000000000012d52 in __sflush_r ()
=> 0x12d52 <__sflush_r+14>:	sd	s2,16(sp)
0x0000000000012d54 in __sflush_r ()
=> 0x12d54 <__sflush_r+16>:	andi	a3,a5,8
0x0000000000012d58 in __sflush_r ()
=> 0x12d58 <__sflush_r+20>:	mv	s0,a1
0x0000000000012d5a in __sflush_r ()
=> 0x12d5a <__sflush_r+22>:	mv	s3,a0
0x0000000000012d5c in __sflush_r ()
=> 0x12d5c <__sflush_r+24>:	bnez	a3,0x12e10 <__sflush_r+204>
0x0000000000012d5e in __sflush_r ()
=> 0x12d5e <__sflush_r+26>:	lui	a4,0x1
0x0000000000012d60 in __sflush_r ()
=> 0x12d60 <__sflush_r+28>:	addi	a4,a4,-2048
0x0000000000012d64 in __sflush_r ()
=> 0x12d64 <__sflush_r+32>:	lw	a3,8(a1)
0x0000000000012d66 in __sflush_r ()
=> 0x12d66 <__sflush_r+34>:	or	a5,a5,a4
0x0000000000012d68 in __sflush_r ()
=> 0x12d68 <__sflush_r+36>:	sh	a5,16(a1)
0x0000000000012d6c in __sflush_r ()
=> 0x12d6c <__sflush_r+40>:	blez	a3,0x12e6c <__sflush_r+296>
0x0000000000012e6c in __sflush_r ()
=> 0x12e6c <__sflush_r+296>:	lw	a4,112(a1)
0x0000000000012e6e in __sflush_r ()
=> 0x12e6e <__sflush_r+298>:	bgtz	a4,0x12d70 <__sflush_r+44>
0x0000000000012e72 in __sflush_r ()
=> 0x12e72 <__sflush_r+302>:	j	0x12e00 <__sflush_r+188>
0x0000000000012e00 in __sflush_r ()
=> 0x12e00 <__sflush_r+188>:	li	a0,0
0x0000000000012e02 in __sflush_r ()
=> 0x12e02 <__sflush_r+190>:	ld	ra,40(sp)
0x0000000000012e04 in __sflush_r ()
=> 0x12e04 <__sflush_r+192>:	ld	s0,32(sp)
0x0000000000012e06 in __sflush_r ()
=> 0x12e06 <__sflush_r+194>:	ld	s1,24(sp)
0x0000000000012e08 in __sflush_r ()
=> 0x12e08 <__sflush_r+196>:	ld	s2,16(sp)
0x0000000000012e0a in __sflush_r ()
=> 0x12e0a <__sflush_r+198>:	ld	s3,8(sp)
0x0000000000012e0c in __sflush_r ()
=> 0x12e0c <__sflush_r+200>:	addi	sp,sp,48
0x0000000000012e0e in __sflush_r ()
=> 0x12e0e <__sflush_r+202>:	ret
0x0000000000019654 in _fclose_r.part.0 ()
=> 0x19654 <_fclose_r.part.0+18>:	ld	a5,80(s0)
0x0000000000019656 in _fclose_r.part.0 ()
=> 0x19656 <_fclose_r.part.0+20>:	mv	s2,a0
0x0000000000019658 in _fclose_r.part.0 ()
=> 0x19658 <_fclose_r.part.0+22>:	beqz	a5,0x19664 <_fclose_r.part.0+34>
0x000000000001965a in _fclose_r.part.0 ()
=> 0x1965a <_fclose_r.part.0+24>:	ld	a1,48(s0)
0x000000000001965c in _fclose_r.part.0 ()
=> 0x1965c <_fclose_r.part.0+26>:	mv	a0,s1
0x000000000001965e in _fclose_r.part.0 ()
=> 0x1965e <_fclose_r.part.0+28>:	jalr	a5
0x0000000000016958 in __sclose ()
=> 0x16958 <__sclose>:	lh	a1,18(a1)
0x000000000001695c in __sclose ()
=> 0x1695c <__sclose+4>:	j	0x19606 <_close_r>
0x0000000000019606 in _close_r ()
=> 0x19606 <_close_r>:	addi	sp,sp,-32
0x0000000000019608 in _close_r ()
=> 0x19608 <_close_r+2>:	sd	s0,16(sp)
0x000000000001960a in _close_r ()
=> 0x1960a <_close_r+4>:	sd	s1,8(sp)
0x000000000001960c in _close_r ()
=> 0x1960c <_close_r+6>:	mv	s0,a0
0x000000000001960e in _close_r ()
=> 0x1960e <_close_r+8>:	mv	a0,a1
0x0000000000019610 in _close_r ()
=> 0x19610 <_close_r+10>:	sd	ra,24(sp)
0x0000000000019612 in _close_r ()
=> 0x19612 <_close_r+12>:	sw	zero,1536(gp)
0x0000000000019616 in _close_r ()
=> 0x19616 <_close_r+16>:	jal	ra,0x1b466 <_close>
0x000000000001b466 in _close ()
=> 0x1b466 <_close>:	addi	sp,sp,-16
0x000000000001b468 in _close ()
=> 0x1b468 <_close+2>:	sd	ra,8(sp)
0x000000000001b46a in _close ()
=> 0x1b46a <_close+4>:	sd	s0,0(sp)
0x000000000001b46c in _close ()
=> 0x1b46c <_close+6>:	li	a7,57
0x000000000001b470 in _close ()
=> 0x1b470 <_close+10>:	ecall
0x000000000001b474 in _close ()
=> 0x1b474 <_close+14>:	mv	s0,a0
0x000000000001b476 in _close ()
=> 0x1b476 <_close+16>:	bltz	a0,0x1b484 <_close+30>
0x000000000001b47a in _close ()
=> 0x1b47a <_close+20>:	sext.w	a0,a0
0x000000000001b47c in _close ()
=> 0x1b47c <_close+22>:	ld	ra,8(sp)
0x000000000001b47e in _close ()
=> 0x1b47e <_close+24>:	ld	s0,0(sp)
0x000000000001b480 in _close ()
=> 0x1b480 <_close+26>:	addi	sp,sp,16
0x000000000001b482 in _close ()
=> 0x1b482 <_close+28>:	ret
0x000000000001961a in _close_r ()
=> 0x1961a <_close_r+20>:	li	a5,-1
0x000000000001961c in _close_r ()
=> 0x1961c <_close_r+22>:	beq	a0,a5,0x1962a <_close_r+36>
0x0000000000019620 in _close_r ()
=> 0x19620 <_close_r+26>:	ld	ra,24(sp)
0x0000000000019622 in _close_r ()
=> 0x19622 <_close_r+28>:	ld	s0,16(sp)
0x0000000000019624 in _close_r ()
=> 0x19624 <_close_r+30>:	ld	s1,8(sp)
0x0000000000019626 in _close_r ()
=> 0x19626 <_close_r+32>:	addi	sp,sp,32
0x0000000000019628 in _close_r ()
=> 0x19628 <_close_r+34>:	ret
0x0000000000019660 in _fclose_r.part.0 ()
=> 0x19660 <_fclose_r.part.0+30>:	bltz	a0,0x196ac <_fclose_r.part.0+106>
0x0000000000019664 in _fclose_r.part.0 ()
=> 0x19664 <_fclose_r.part.0+34>:	lhu	a5,16(s0)
0x0000000000019668 in _fclose_r.part.0 ()
=> 0x19668 <_fclose_r.part.0+38>:	andi	a5,a5,128
0x000000000001966c in _fclose_r.part.0 ()
=> 0x1966c <_fclose_r.part.0+42>:	bnez	a5,0x196b8 <_fclose_r.part.0+118>
0x000000000001966e in _fclose_r.part.0 ()
=> 0x1966e <_fclose_r.part.0+44>:	ld	a1,88(s0)
0x0000000000019670 in _fclose_r.part.0 ()
=> 0x19670 <_fclose_r.part.0+46>:	beqz	a1,0x19684 <_fclose_r.part.0+66>
0x0000000000019684 in _fclose_r.part.0 ()
=> 0x19684 <_fclose_r.part.0+66>:	ld	a1,120(s0)
0x0000000000019686 in _fclose_r.part.0 ()
=> 0x19686 <_fclose_r.part.0+68>:	beqz	a1,0x19692 <_fclose_r.part.0+80>
0x0000000000019692 in _fclose_r.part.0 ()
=> 0x19692 <_fclose_r.part.0+80>:	jal	ra,0x131ba <__sfp_lock_acquire>
0x00000000000131ba in __sfp_lock_acquire ()
=> 0x131ba <__sfp_lock_acquire>:	ret
0x0000000000019696 in _fclose_r.part.0 ()
=> 0x19696 <_fclose_r.part.0+84>:	sh	zero,16(s0)
0x000000000001969a in _fclose_r.part.0 ()
=> 0x1969a <_fclose_r.part.0+88>:	jal	ra,0x131bc <__sfp_lock_release>
0x00000000000131bc in __sfp_lock_release ()
=> 0x131bc <__sfp_lock_release>:	ret
0x000000000001969e in _fclose_r.part.0 ()
=> 0x1969e <_fclose_r.part.0+92>:	ld	ra,24(sp)
0x00000000000196a0 in _fclose_r.part.0 ()
=> 0x196a0 <_fclose_r.part.0+94>:	ld	s0,16(sp)
0x00000000000196a2 in _fclose_r.part.0 ()
=> 0x196a2 <_fclose_r.part.0+96>:	ld	s1,8(sp)
0x00000000000196a4 in _fclose_r.part.0 ()
=> 0x196a4 <_fclose_r.part.0+98>:	mv	a0,s2
0x00000000000196a6 in _fclose_r.part.0 ()
=> 0x196a6 <_fclose_r.part.0+100>:	ld	s2,0(sp)
0x00000000000196a8 in _fclose_r.part.0 ()
=> 0x196a8 <_fclose_r.part.0+102>:	addi	sp,sp,32
0x00000000000196aa in _fclose_r.part.0 ()
=> 0x196aa <_fclose_r.part.0+104>:	ret
0x0000000000013616 in _fwalk_reent ()
=> 0x13616 <_fwalk_reent+90>:	or	s6,a0,s6
0x000000000001361a in _fwalk_reent ()
=> 0x1361a <_fwalk_reent+94>:	sext.w	s6,s6
0x000000000001361c in _fwalk_reent ()
=> 0x1361c <_fwalk_reent+96>:	addi	s0,s0,176
0x0000000000013620 in _fwalk_reent ()
=> 0x13620 <_fwalk_reent+100>:	bne	s1,s0,0x13600 <_fwalk_reent+68>
0x0000000000013624 in _fwalk_reent ()
=> 0x13624 <_fwalk_reent+104>:	ld	s2,0(s2)
0x0000000000013628 in _fwalk_reent ()
=> 0x13628 <_fwalk_reent+108>:	bnez	s2,0x135e4 <_fwalk_reent+40>
0x000000000001362c in _fwalk_reent ()
=> 0x1362c <_fwalk_reent+112>:	ld	ra,72(sp)
0x000000000001362e in _fwalk_reent ()
=> 0x1362e <_fwalk_reent+114>:	ld	s0,64(sp)
0x0000000000013630 in _fwalk_reent ()
=> 0x13630 <_fwalk_reent+116>:	ld	s1,56(sp)
0x0000000000013632 in _fwalk_reent ()
=> 0x13632 <_fwalk_reent+118>:	ld	s2,48(sp)
0x0000000000013634 in _fwalk_reent ()
=> 0x13634 <_fwalk_reent+120>:	ld	s3,40(sp)
0x0000000000013636 in _fwalk_reent ()
=> 0x13636 <_fwalk_reent+122>:	ld	s4,32(sp)
0x0000000000013638 in _fwalk_reent ()
=> 0x13638 <_fwalk_reent+124>:	ld	s5,24(sp)
0x000000000001363a in _fwalk_reent ()
=> 0x1363a <_fwalk_reent+126>:	ld	s7,8(sp)
0x000000000001363c in _fwalk_reent ()
=> 0x1363c <_fwalk_reent+128>:	ld	s8,0(sp)
0x000000000001363e in _fwalk_reent ()
=> 0x1363e <_fwalk_reent+130>:	mv	a0,s6
0x0000000000013640 in _fwalk_reent ()
=> 0x13640 <_fwalk_reent+132>:	ld	s6,16(sp)
0x0000000000013642 in _fwalk_reent ()
=> 0x13642 <_fwalk_reent+134>:	addi	sp,sp,80
0x0000000000013644 in _fwalk_reent ()
=> 0x13644 <_fwalk_reent+136>:	ret
0x000000000001078c in exit ()
=> 0x1078c <exit+24>:	mv	a0,s0
0x000000000001078e in exit ()
=> 0x1078e <exit+26>:	jal	ra,0x1b492 <_exit>
0x000000000001b492 in _exit ()
=> 0x1b492 <_exit>:	li	a7,93
0x000000000001b496 in _exit ()
=> 0x1b496 <_exit+4>:	ecall
[Inferior 1 (process 765) exited normally]
script_remote.gdb:25: Error in sourced command file:
No registers.
